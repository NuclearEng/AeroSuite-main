Command: npm test -w server -- --runInBand
FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:00.397Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:42.737Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.752Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.753Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.754Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.755Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.758Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.760Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.761Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.763Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.767Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.769Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.769Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.769Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.770Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.770Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.770Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.771Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.771Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.772Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.773Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.773Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.773Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.774Z] [DEBUG] [Server] delete duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.774Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.775Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.776Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.778Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:42.866Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.871Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.872Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.873Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.873Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.876Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.878Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.879Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.880Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.881Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.882Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.882Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.890Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.890Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.890Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.891Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.891Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.893Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.893Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.894Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.894Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.895Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.896Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.897Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.898Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:42.984Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.990Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.991Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.991Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.992Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.997Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:42.999Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.004Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.005Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.006Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.007Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.007Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.008Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.008Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.009Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.009Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.010Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.010Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.011Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.012Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.012Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.013Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.013Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/core/domain-events-integration.test.js
  ● Console

    console.log
      [2025-08-21T22:10:43.091Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.093Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.094Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.095Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.095Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.096Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.096Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.096Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.096Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.097Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.097Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.097Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:43.097Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.098Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:43.097Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.099Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:43.097Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.099Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.100Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.100Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.105Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.106Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.106Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.106Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.106Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.107Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.107Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.107Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.107Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.107Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.108Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.108Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:43.108Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:43.108Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.109Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:43.108Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:43.108Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.109Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:43.108Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:43.108Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.114Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.114Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.116Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.116Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.117Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.117Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.117Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.117Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.118Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.118Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.118Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.118Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.119Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.119Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:43.119Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.119Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:43.119Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.120Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:43.119Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.120Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.121Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.122Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.123Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.123Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.123Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.123Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.123Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.124Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.124Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.124Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.124Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.124Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.125Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.125Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.126Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.126Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.126Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.126Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.127Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.127Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.128Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:43.128Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.129Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:43.128Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:43.129Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:43.128Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.129Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:43.130Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:10:43.131Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

PASS src/__tests__/domains/inspection/Inspection.test.js
PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:10:43.624Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.626Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.628Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.628Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.629Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.639Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.640Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.640Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.641Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.642Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.643Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:10:43.646Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:10:43.647Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:43.649Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

PASS src/__tests__/domains/component/Component.test.js
PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/__tests__/utils/testDataGenerator.js
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

FAIL src/__tests__/utils/testDataFactory.js
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:09.640Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/integration/verification.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/verification.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/verification.test.js:4:17)

FAIL src/__tests__/integration/suppliers.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/suppliers.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/suppliers.test.js:9:57)

FAIL src/__tests__/integration/setup.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:11.652Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:52.707Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.722Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.723Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.725Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.726Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.729Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.730Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.731Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.733Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.733Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.737Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.737Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.738Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.738Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.739Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.739Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.740Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.740Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.741Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.742Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.742Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.742Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.743Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.743Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.744Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.745Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.750Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:52.899Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.909Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.910Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.911Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.912Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.915Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.921Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.924Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.925Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.926Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.930Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.930Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.930Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.931Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.935Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.935Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.936Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.937Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.937Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.938Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.938Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.939Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.941Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.941Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:52.942Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/integration/inspections.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/inspections.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/inspections.test.js:9:57)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:53.120Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.131Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.132Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.133Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.134Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.142Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.143Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.145Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.146Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.152Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.153Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.153Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.154Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.155Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.155Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.155Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.156Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.156Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.157Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.158Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.158Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.159Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.159Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/core/domain-events-integration.test.js
  ● Console

    console.log
      [2025-08-21T22:10:53.324Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.326Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.327Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.327Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.328Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.329Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.329Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.329Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.329Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.329Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.330Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.330Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:53.330Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.331Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:53.330Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.332Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:53.330Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.332Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.333Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.333Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.339Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.339Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.339Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.339Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.340Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.340Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.340Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.340Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.340Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.341Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.341Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.341Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:53.341Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:53.341Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.342Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:53.341Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:53.341Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.343Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:53.341Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:53.341Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.343Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.343Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.349Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.350Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.350Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.350Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.350Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.350Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.351Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.351Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.351Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.351Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.351Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.352Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:53.352Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.352Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:53.352Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.352Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:53.352Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.353Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.353Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.355Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.355Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.356Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.356Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.356Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.356Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.356Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.357Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.357Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.357Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.357Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.358Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:53.358Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.358Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.358Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.359Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.359Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.359Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.359Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.360Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:53.360Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.360Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:53.360Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:53.361Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:53.360Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.361Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:53.361Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:10:53.362Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/__tests__/integration/customers.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/customers.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/customers.test.js:9:57)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:10:54.531Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.533Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.544Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.544Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.546Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.551Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.552Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.552Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.574Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.575Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.576Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:10:54.581Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:10:54.581Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:54.582Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:13.582Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

PASS src/__tests__/domains/component/Component.test.js
PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/integration/auth.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/auth.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/auth.test.js:9:39)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:55.436Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.449Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.451Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.452Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.453Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.456Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.458Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.459Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.461Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.461Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.467Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.467Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.468Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.468Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.469Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.472Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.475Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.475Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.478Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.479Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.479Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.480Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.480Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.481Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.482Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.508Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.509Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:14.587Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

  ● Console

    console.log
      [2025-08-21T22:10:55.719Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.724Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.725Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.726Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.727Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.733Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.734Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.736Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.737Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.737Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.738Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.739Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.739Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.742Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.747Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.747Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.748Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.749Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.749Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.750Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.750Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.751Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.752Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.753Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:55.754Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:56.019Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.028Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.029Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.030Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.031Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.053Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.055Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.061Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.066Z] [DEBUG] [Server] findById duration { ms: 4, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.067Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.068Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.068Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.069Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.069Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.070Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.070Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.071Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.071Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.072Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.073Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.073Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.074Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.074Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/integration/ai.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/ai.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/ai.test.js:17:17)

FAIL src/__tests__/core/domain-events-integration.test.js
FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/__tests__/jest.custom.js
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

Summary of all failing tests
FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:00.397Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/test-utils/security.test.js
  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

F  ● Console

    console.log
      [2025-08-21T22:10:56.317Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.319Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.319Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.320Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.320Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.321Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.321Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.321Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.322Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.322Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.322Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.323Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:56.323Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.324Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:56.323Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.324Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:56.323Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.335Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.336Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.336Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.342Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.343Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.343Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.343Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.343Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.343Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.344Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.344Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.344Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.344Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.344Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.345Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:56.345Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:56.345Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.346Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:56.345Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:56.345Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.346Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:56.345Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:56.345Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.346Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.347Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.352Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.352Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.352Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.352Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.353Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.353Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.353Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.353Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.353Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.354Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.354Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.354Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:56.354Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.354Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:56.354Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.355Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:56.354Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.355Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.355Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.357Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.358Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.358Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.358Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.358Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.359Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.359Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.359Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.359Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.359Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.360Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.360Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:56.360Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.360Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.361Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.361Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.361Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.361Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.362Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.362Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:56.362Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.362Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:56.362Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:56.363Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:56.362Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.363Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:56.363Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:10:56.364Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

AIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/core/domain-events-integration.test.js
  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/__tests__/utils/testDataGenerator.js
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

FAIL src/__tests__/utils/testDataFactory.js
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

FAIL src/__tests__/integration/verification.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/verification.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/verification.test.js:4:17)

FAIL src/__tests__/integration/suppliers.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/suppliers.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/suppliers.test.js:9:57)

FAIL src/__tests__/integration/setup.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)

FAIL src/__tests__/integration/inspections.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/inspections.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/inspections.test.js:9:57)

FAIL src/__tests__/integration/customers.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/customers.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/customers.test.js:9:57)

FAIL src/__tests__/integration/auth.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/setup.js
      src/__tests__/integration/auth.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/setup.js:13:13)
      at Object.require (src/__tests__/integration/auth.test.js:9:39)

FAIL src/__tests__/integration/ai.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/__tests__/integration/ai.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/__tests__/integration/ai.test.js:17:17)

FAIL src/__tests__/jest.custom.js
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)


Test Suites: 40 failed, 4 passed, 44 total
Tests:       24 failed, 167 passed, 191 total
Snapshots:   0 total
Time:        18.74 s
Ran all test suites.
FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:15.714Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:10:57.566Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.568Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.586Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.587Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.588Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.594Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.594Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.594Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.596Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.613Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.614Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:10:57.617Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:10:57.618Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:57.618Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

Jest did not exit one second after the test run has completed.

'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
PASS src/__tests__/domains/component/Component.test.js
FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:58.048Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.061Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.062Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.064Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.064Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.068Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.069Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.070Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.071Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.071Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.072Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.073Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.073Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.073Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.074Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.074Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.075Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.075Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.076Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.080Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.080Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.081Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.081Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.082Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.083Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.083Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.084Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:17.006Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:58.312Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.317Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.318Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.318Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.319Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.350Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.351Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.353Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.354Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.354Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.357Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.357Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.358Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.358Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.359Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.359Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.360Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.372Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.372Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.372Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.373Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.379Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.380Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.381Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.382Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

  ● Console

    console.log
      [2025-08-21T22:10:58.573Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.623Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.626Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.627Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.628Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.646Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.648Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.649Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.650Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.652Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.665Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.665Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.678Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.679Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.680Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.680Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.681Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.682Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.683Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.684Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.684Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.686Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.686Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/core/domain-events-integration.test.js
FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

  ● Console

    console.log
      [2025-08-21T22:10:58.863Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.869Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.872Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.872Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.874Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.875Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.876Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.876Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.878Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.878Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.879Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.879Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:58.879Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.880Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:58.879Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.881Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:58.879Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.886Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.887Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.888Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.894Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.894Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.894Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.894Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.895Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.895Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.895Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.895Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.896Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.896Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.896Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.897Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:58.897Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:58.897Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.904Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:58.897Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:58.897Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.905Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:10:58.897Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:58.897Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.906Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.907Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.912Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.912Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.912Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.912Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.913Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.913Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.913Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.913Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.913Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.913Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.914Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.914Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:58.914Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.914Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:58.914Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.915Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:10:58.914Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.915Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.915Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.918Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.918Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.918Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.918Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.918Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.919Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.919Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.919Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.919Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.919Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.920Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.920Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:10:58.920Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.920Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.921Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.921Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.921Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.921Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.921Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.922Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:58.922Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.922Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:58.922Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:58.923Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:10:58.922Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.923Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:10:58.924Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:10:58.924Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:59.218Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.232Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.233Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.249Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.250Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.254Z] [DEBUG] [Server] create duration { ms: 1 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.255Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.256Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.262Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.263Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.264Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.264Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.265Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.265Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.265Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.266Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.268Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.268Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.269Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.269Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.270Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.270Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.271Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.271Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.272Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.283Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.284Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:18.280Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:59.514Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.521Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.522Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.542Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.543Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.546Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.547Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.549Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.550Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.550Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.551Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.565Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.566Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.566Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.567Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.567Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.568Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.569Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.569Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.570Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.570Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.571Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.573Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.574Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.574Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:10:59.804Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.818Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.819Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.820Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.821Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.827Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.829Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.866Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.867Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.868Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.869Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.869Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.870Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.871Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.872Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.872Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.873Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.873Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.873Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.874Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.874Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.875Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:10:59.875Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:11:00.118Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.120Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.122Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.122Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.131Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.147Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.148Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.149Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.150Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.151Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.152Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:00.156Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:00.162Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.164Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/__tests__/core/domain-events-integration.test.js
  ● Console

    console.log
      [2025-08-21T22:11:00.058Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.060Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.063Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.064Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.064Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.065Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.065Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.066Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.066Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.066Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.067Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.067Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:00.067Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.068Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:00.067Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.080Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:00.067Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.081Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.081Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.081Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.086Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.087Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.087Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.087Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.087Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.088Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.088Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.088Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.088Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.089Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.089Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.089Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:00.089Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:00.089Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.119Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:00.089Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:00.089Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.120Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:00.089Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:00.089Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.151Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.151Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.154Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.154Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.155Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.156Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.168Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.168Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.168Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.169Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.169Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.169Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.170Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.170Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:00.170Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.171Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:00.170Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.171Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:00.170Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.171Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.172Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.174Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.174Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.175Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.175Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.175Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.176Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.176Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.176Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.177Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.177Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.178Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.178Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:00.179Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.179Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.180Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.180Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.180Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.181Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.181Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.181Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:00.181Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.182Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:00.181Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.184Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:00.181Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.185Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:00.185Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:11:00.186Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:00.534Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.575Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.577Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.578Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.579Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.593Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.595Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.596Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.597Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.597Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.599Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.599Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.599Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.599Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.600Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.600Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.605Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.605Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.606Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.607Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.607Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.608Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.608Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.609Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.610Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.611Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.612Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:19.391Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:00.871Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.876Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.877Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.878Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.878Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.919Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.921Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.923Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.924Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.924Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.927Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.927Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.928Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.928Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.929Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.930Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.931Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.935Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.935Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.941Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.942Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.943Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.945Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.946Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:00.947Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:01.185Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.192Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.204Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.205Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.206Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.211Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.213Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.214Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.215Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.216Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.221Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.221Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.224Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.224Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.225Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.225Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.229Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.229Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.230Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.231Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.231Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.232Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.232Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:11:01.502Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.503Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.505Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.505Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.507Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.542Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.543Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.544Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.545Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.546Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.547Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:01.551Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:01.553Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.563Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/__tests__/core/domain-events-integration.test.js
FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

  ● Console

    console.log
      [2025-08-21T22:11:01.453Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.455Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.456Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.488Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.489Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.490Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.491Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.491Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.491Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.492Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.492Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.493Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:01.493Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.494Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:01.493Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.495Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:01.493Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.496Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.511Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.511Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.522Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.523Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.523Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.524Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.524Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.524Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.524Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.525Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.525Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.525Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.526Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.526Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:01.526Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:01.526Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.527Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:01.526Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:01.526Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.528Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:01.526Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:01.526Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.528Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.538Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.545Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.545Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.546Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.546Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.546Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.546Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.547Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.547Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.547Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.547Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.548Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.548Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:01.548Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.548Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:01.548Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.549Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:01.548Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.549Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.551Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.552Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.552Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.553Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.553Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.553Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.553Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.554Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.554Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.554Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.556Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.561Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.562Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:01.562Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.563Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.563Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.563Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.564Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.564Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.564Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.565Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:01.565Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.565Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:01.565Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.565Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:01.565Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.570Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:01.571Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:11:01.573Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/__tests__/utils/testDataGenerator.test.js
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:20.277Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:01.853Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.883Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.884Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.887Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.888Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.897Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.899Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.900Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.902Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.903Z] [DEBUG] [Server] update duration { ms: 1 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.906Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.910Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.911Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.914Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.915Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.915Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.916Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.916Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.917Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.918Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.918Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.919Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.919Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.920Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.921Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.922Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:01.922Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:02.157Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.162Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.163Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.164Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.213Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.216Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.217Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.222Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.223Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.223Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.225Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.225Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.246Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.246Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.247Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.247Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.248Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.253Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.253Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.254Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.255Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.255Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.257Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.258Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.259Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:02.479Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.553Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.556Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.558Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.559Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.566Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.568Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.569Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.570Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.571Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.577Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.578Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.579Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.579Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.580Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.580Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.581Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.581Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.582Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.583Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.583Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.584Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.584Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/__tests__/core/domain-events-integration.test.js
PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:11:02.862Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.863Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.865Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.866Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.868Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.880Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.880Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.882Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.883Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.884Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.885Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:02.888Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:02.889Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.894Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

  ● Console

    console.log
      [2025-08-21T22:11:02.818Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.819Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.820Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.821Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.821Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.822Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.822Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.822Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.822Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.823Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.823Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.824Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:02.824Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.825Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:02.824Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.826Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:02.824Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.826Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.827Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.827Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.833Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.834Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.834Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.834Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.834Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.834Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.835Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.835Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.835Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.836Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.837Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.838Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:02.838Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:02.838Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.844Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:02.838Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:02.838Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.845Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:02.838Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:02.838Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.845Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.847Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.852Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.852Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.852Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.852Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.853Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.853Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.853Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.853Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.853Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.854Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.854Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.854Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:02.854Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.855Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:02.854Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.855Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:02.854Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.855Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.856Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.858Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.858Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.858Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.859Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.859Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.859Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.859Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.859Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.860Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.860Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.860Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.860Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:02.861Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.861Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.861Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.861Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.861Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.862Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.862Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.862Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:02.862Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.863Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:02.862Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:02.863Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:02.862Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.863Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:02.864Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:11:02.864Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

  ● Console

    console.log
      [2025-08-21T22:11:03.383Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.398Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.399Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.401Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.401Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.416Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.418Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.424Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.425Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.426Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.427Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.427Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.428Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.428Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.429Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.429Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.430Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.430Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.431Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.431Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.432Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.432Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.433Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.444Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.445Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.448Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.449Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:03.697Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.716Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.717Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.718Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.718Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.721Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.733Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.735Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.741Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.741Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.743Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.743Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.744Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.744Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.746Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.746Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.747Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.748Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.749Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.749Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.750Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.751Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.763Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.764Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.765Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

  ● Console

    console.log
      [2025-08-21T22:11:03.991Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.997Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.997Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.998Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:03.999Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.013Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.018Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.019Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.020Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.021Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.022Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.022Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.023Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.023Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.025Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.025Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.026Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.026Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.027Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.027Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.028Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.031Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.031Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:11:04.189Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.196Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.198Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.199Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.200Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.205Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.205Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.238Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.240Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.241Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.242Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:04.247Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:04.247Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.255Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/__tests__/core/domain-events-integration.test.js
FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

  ● Console

    console.log
      [2025-08-21T22:11:04.300Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.302Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.314Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.315Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.316Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.317Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.317Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.317Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.317Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.318Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.318Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.319Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:04.319Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.319Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:04.319Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.320Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:04.319Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.328Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.328Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.328Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.342Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.342Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.342Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.343Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.343Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.343Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.343Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.343Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.344Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.344Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.344Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.345Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:04.345Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:04.345Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.346Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:04.345Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:04.345Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.346Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:04.345Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:04.345Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.346Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.347Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.371Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.372Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.372Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.372Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.372Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.373Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.373Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.373Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.373Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.374Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.374Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.374Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:04.374Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.375Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:04.374Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.375Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:04.374Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.375Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.376Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.377Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.378Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.378Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.378Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.378Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.378Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.379Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.379Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.379Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.379Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.379Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.380Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:04.380Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.380Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.380Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.381Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.381Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.381Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.381Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.382Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:04.382Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.382Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:04.382Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.382Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:04.382Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.383Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:04.383Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:11:04.383Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

  ● Console

    console.log
      [2025-08-21T22:11:04.729Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.760Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.783Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.784Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.796Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.799Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.801Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.802Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.803Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.803Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.804Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.805Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.806Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.806Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.807Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.808Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.809Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.810Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.810Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.811Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.811Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.812Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.812Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.813Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.814Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.815Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:04.816Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:05.091Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.117Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.121Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.122Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.123Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.126Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.127Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.130Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.146Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.146Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.150Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.150Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.151Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.151Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.152Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.152Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.162Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.164Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.164Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.165Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.166Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.167Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.170Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.172Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.173Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:05.334Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.395Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.396Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.397Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.398Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.418Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.427Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.431Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.432Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.434Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.438Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.438Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.439Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.440Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.441Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.441Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.442Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.442Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.443Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.444Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.444Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.460Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.460Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/test-utils/security.test.js
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/__tests__/core/domain-events-integration.test.js
PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

  ● Console

    console.log
      [2025-08-21T22:11:05.790Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.809Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.811Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.812Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.813Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.843Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.844Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.850Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.852Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.852Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.854Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.855Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.855Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.856Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.856Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.857Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.858Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.859Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.860Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.860Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.923Z] [DEBUG] [Server] delete duration { ms: 62, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.925Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.925Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.965Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.966Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.969Z] [DEBUG] [Server] findById duration { ms: 2, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.970Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

  ● Console

    console.log
      [2025-08-21T22:11:05.830Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.831Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.833Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.834Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.835Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.860Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.861Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.862Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.866Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.867Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.923Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:05.964Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:05.966Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.971Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

  ● Console

    console.log
      [2025-08-21T22:11:05.783Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.784Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.785Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.786Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.786Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.787Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.787Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.791Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.791Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.791Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.791Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.792Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:05.792Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.793Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:05.792Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.794Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:05.792Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.794Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.794Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.794Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.801Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.801Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.801Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.802Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.802Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.802Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.803Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.803Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.803Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.803Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.804Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.804Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:05.804Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:05.804Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.805Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:05.804Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:05.804Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.805Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:05.804Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:05.804Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.806Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.831Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.840Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.840Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.840Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.841Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.841Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.841Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.842Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.842Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.842Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.842Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.842Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.843Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:05.843Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.843Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:05.843Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.843Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:05.843Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.844Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.844Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.851Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.851Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.851Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.851Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.852Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.852Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.852Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.852Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.853Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.853Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.853Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.853Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:05.854Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.854Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.854Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.855Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.855Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.855Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.855Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.856Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:05.856Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.856Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:05.856Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:05.857Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:05.856Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.857Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:05.858Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:11:05.859Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:06.403Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.409Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.410Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.411Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.412Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.417Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.419Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.421Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.423Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.423Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.425Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.425Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.426Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.426Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.459Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.459Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.461Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.464Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.465Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.467Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.467Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.468Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.470Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.471Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.473Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:06.752Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.763Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.764Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.765Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.766Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.796Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.798Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.799Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.800Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.801Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.802Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.802Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.803Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.804Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.804Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.814Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.815Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.815Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.816Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.817Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.817Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.818Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:06.818Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/__tests__/core/domain-events-integration.test.js
  ● Console

    console.log
      [2025-08-21T22:11:07.041Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.043Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.044Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.044Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.045Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.046Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.046Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.046Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.046Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.047Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.047Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.048Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:07.048Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.050Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:07.048Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.052Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:07.048Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.052Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.053Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.053Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.061Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.061Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.061Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.062Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.062Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.062Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.066Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.067Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.067Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.067Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.067Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.068Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:07.068Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:07.068Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.069Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:07.068Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:07.068Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.069Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:07.068Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:07.068Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.069Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.070Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.071Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.071Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.071Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.071Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.072Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.072Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.072Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.072Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.072Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.073Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.073Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.073Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:07.073Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.074Z] [DEBUG] [Server] Domain event published: InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:07.073Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.074Z] [DEBUG] [Server] customer handling inspection:InspectionScheduled {
        event: {
          type: 'InspectionScheduled',
          payload: {
            inspectionId: 'inspection-1',
            title: undefined,
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            scheduledDate: '2023-01-01T10:00:00.000Z'
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:07.073Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.074Z] [DEBUG] [Server] Handling InspectionScheduled for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.075Z] [INFO] [Server] Updated customer customer-1 with scheduled inspection on 2023-01-01T10:00:00.000Z { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.076Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.076Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.076Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.077Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.077Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.077Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.077Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.077Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.078Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.078Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.079Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.079Z] [INFO] [Server] Initializing Customer domain event publishers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.079Z] [DEBUG] [Server] Registered schema for event: CustomerCreated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.080Z] [DEBUG] [Server] Registered schema for event: CustomerDetailsUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.080Z] [DEBUG] [Server] Registered schema for event: CustomerStatusUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.080Z] [DEBUG] [Server] Registered schema for event: CustomerAddressUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.080Z] [DEBUG] [Server] Registered schema for event: CustomerContactAdded

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.080Z] [DEBUG] [Server] Registered schema for event: CustomerContactUpdated

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.081Z] [DEBUG] [Server] Registered schema for event: CustomerContactRemoved

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.081Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:07.081Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.082Z] [DEBUG] [Server] Domain event published: CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:07.081Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:07.082Z] [DEBUG] [Server] inspection handling customer:CustomerCreated {
        event: {
          type: 'CustomerCreated',
          payload: {
            customerId: 'customer-1',
            name: 'Test Customer',
            code: 'TEST-001'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:07.081Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.082Z] [DEBUG] [Server] Handling CustomerCreated for inspection domain: Test Customer (customer-1)

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:07.082Z] [INFO] [Server] Processed new customer Test Customer (customer-1) in inspection domain

      at Logger.log [as info] (src/utils/logger.js:16:13)
          at Array.forEach (<anonymous>)

    console.error
      [2025-08-21T22:11:07.083Z] [ERROR] [Server] Error publishing event from customer {
        error: Error: Event CustomerCreated is missing required field: name
            at DomainEventBus.validateEvent (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:57:17)
            at DomainEventBus.validateEvent [as publishFromContext] (/Users/tannercoker/AeroSuite-main-1/server/src/core/DomainEventBus.js:126:12)
            at publishFromContext (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:162:24)
            at Object.<anonymous> (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/toThrowMatchers.js:74:11)
            at Object.throwingMatcher [as toThrow] (/Users/tannercoker/AeroSuite-main-1/node_modules/expect/build/index.js:320:21)
            at Object.toThrow (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/core/domain-events-integration.test.js:169:10)
            at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)
            at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)
            at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34),
        sourceContext: 'customer',
        event: { type: 'CustomerCreated', payload: { customerId: 'customer-1' } }
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at DomainEventBus.error [as publishFromContext] (src/core/DomainEventBus.js:134:19)
      at publishFromContext (src/__tests__/core/domain-events-integration.test.js:162:24)
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/core/domain-events-integration.test.js:169:10)

  ● Domain Events Integration › Customer to Inspection integration › CustomerStatusUpdated event should be handled by inspection domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Found 2 scheduled inspections", Anything

    Number of calls: 0

      68 |       // Assert
      69 |       expect(inspectionRepository.findByCustomerAndStatus).toHaveBeenCalledWith('customer-1', 'scheduled');
    > 70 |       expect(logger.info).toHaveBeenCalledWith(expect.stringContaining('Found 2 scheduled inspections'), expect.anything());
         |                           ^
      71 |     });
      72 |   });
      73 |   

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:70:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionCompleted event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with inspection result: passed", Anything

    Number of calls: 0

      100 |       // Assert
      101 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 102 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      103 |         expect.stringContaining('Updated customer customer-1 with inspection result: passed'),
      104 |         expect.anything()
      105 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:102:27)

  ● Domain Events Integration › Inspection to Customer integration › InspectionScheduled event should be handled by customer domain

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Updated customer customer-1 with scheduled inspection", Anything

    Number of calls: 0

      134 |       // Assert
      135 |       expect(customerRepository.findById).toHaveBeenCalledWith('customer-1');
    > 136 |       expect(logger.info).toHaveBeenCalledWith(
          |                           ^
      137 |         expect.stringContaining('Updated customer customer-1 with scheduled inspection'),
      138 |         expect.anything()
      139 |       );

      at Object.toHaveBeenCalledWith (src/__tests__/core/domain-events-integration.test.js:136:27)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
FAIL src/__tests__/domains/customer/Customer.test.js
  ● Customer Domain Model › Customer Aggregate › should create a valid customer

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      60 |       expect(customer.contacts[0]).toBeInstanceOf(Contact);
      61 |       expect(customer.contacts[0].name).toBe('John Doe');
    > 62 |       expect(customer.contacts[0].isPrimary).toBe(true); // First contact should be primary
         |                                              ^
      63 |     });
      64 |     
      65 |     it('should throw error for invalid customer', () => {

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:62:46)

  ● Customer Domain Model › Customer Aggregate › should throw error for invalid customer

    expect(received).toThrow(expected)

    Expected constructor: DomainError
    Received constructor: TypeError

    Received message: "Cannot destructure property 'street' of 'undefined' as it is undefined."

          10 | class Address extends ValueObject {
          11 |   constructor({
        > 12 |     street,
             |     ^
          13 |     city,
          14 |     state,
          15 |     postalCode,

      at new street (src/domains/customer/models/Address.js:12:5)
      at new Customer (src/domains/customer/models/Customer.js:43:59)
      at src/__tests__/domains/customer/Customer.test.js:67:9
      at Object.<anonymous> (../node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (../node_modules/expect/build/index.js:320:21)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)
      at Object.toThrow (src/__tests__/domains/customer/Customer.test.js:71:10)

  ● Customer Domain Model › Address Value Object › should format full address correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "123 Main St, London, SW1A 1AA, UK"
    Received: "123 Main St, London,  SW1A 1AA, UK"

      307 |       });
      308 |       
    > 309 |       expect(addressNoState.getFullAddress()).toBe('123 Main St, London, SW1A 1AA, UK');
          |                                               ^
      310 |     });
      311 |   });
      312 |   

      at Object.toBe (src/__tests__/domains/customer/Customer.test.js:309:47)

  ● Console

    console.log
      [2025-08-21T22:11:07.354Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.360Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.362Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.399Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.400Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.406Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.406Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.406Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.417Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.418Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.419Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:07.428Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:07.429Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:07.430Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/ai/services/__tests__/ModelPerformanceService.test.js
  ● ModelPerformanceService › getModelMetrics returns metrics for valid model and metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for invalid modelId

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics returns empty for missing metricType

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAllMetrics aggregates metrics across models

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getAggregatedMetrics returns aggregated metrics

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

  ● ModelPerformanceService › getModelMetrics handles timeWindow edge case

    TypeError: ModelPerformanceService is not a constructor

       5 |
       6 |   beforeEach(() => {
    >  7 |     service = new ModelPerformanceService();
         |               ^
       8 |     // Mock internal data or methods as needed
       9 |     service.metricsStore = {
      10 |       'modelA': {

      at Object.<anonymous> (src/ai/services/__tests__/ModelPerformanceService.test.js:7:15)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

PASS src/__tests__/domains/inspection/Inspection.test.js
FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

PASS src/__tests__/infrastructure/anti-corruption-layer.test.js
  ● Console

    console.log
      [2025-08-21T22:11:08.296Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.297Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.301Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: oracle

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.301Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.303Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: unknown

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.334Z] [INFO] [Server] Creating Anti-Corruption Layer for provider: sap

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.334Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.335Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.336Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.337Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.338Z] [INFO] [Server] Initializing Anti-Corruption Layer for SAP ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.error
      [2025-08-21T22:11:08.367Z] [ERROR] [Server] Translation error for supplier: Required field 'CardName' is missing {
        acl: 'SAP ERP',
        entityType: 'supplier',
        error: "Error: Required field 'CardName' is missing\n" +
          '    at SapAntiCorruptionLayer.validateRequiredFields (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:85:15)\n' +
          '    at SapAntiCorruptionLayer.validateRequiredFields [as translateToDomain] (/Users/tannercoker/AeroSuite-main-1/server/src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:68:12)\n' +
          '    at Object.translateToDomain (/Users/tannercoker/AeroSuite-main-1/server/src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)\n' +
          '    at Promise.then.completed (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at _runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/Users/tannercoker/AeroSuite-main-1/node_modules/jest-runner/build/runTest.js:444:34)',
        dataId: 'unknown'
      }

      26 |
      27 |   error(message, ...args) {
    > 28 |     console.error(`[${new Date().toISOString()}] [ERROR] [${this.context}] ${message}`, ...args);
         |             ^
      29 |   }
      30 | }
      31 |

      at Logger.error (src/utils/logger.js:28:13)
      at Object.error (src/infrastructure/logger.js:13:39)
      at SapAntiCorruptionLayer.error [as logTranslationError] (src/infrastructure/anti-corruption-layer/BaseAntiCorruptionLayer.js:100:12)
      at SapAntiCorruptionLayer.logTranslationError [as translateToDomain] (src/infrastructure/anti-corruption-layer/SapAntiCorruptionLayer.js:85:12)
      at Object.translateToDomain (src/__tests__/infrastructure/anti-corruption-layer.test.js:145:29)

    console.log
      [2025-08-21T22:11:08.368Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:08.369Z] [INFO] [Server] Initializing Anti-Corruption Layer for Oracle ERP

      at Logger.log [as info] (src/utils/logger.js:16:13)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

PASS src/__tests__/domains/component/Component.test.js
FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

PASS src/__tests__/utils/threatDetection.test.js
FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/supplier/services/__tests__/SupplierService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.test.js:1:54)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/domains/supplier/services/__tests__/SupplierService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.<anonymous> (src/domains/supplier/services/__tests__/SupplierService.integration.test.js:1:54)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/domains/supplier/repositories/__tests__/SupplierRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.<anonymous> (src/domains/supplier/repositories/__tests__/SupplierRepository.test.js:1:60)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/domains/inspection/repositories/__tests__/InspectionRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.<anonymous> (src/domains/inspection/repositories/__tests__/InspectionRepository.test.js:1:64)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/inspection/services/__tests__/InspectionService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.test.js:1:58)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/domains/inspection/services/__tests__/InspectionService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.<anonymous> (src/domains/inspection/services/__tests__/InspectionService.integration.test.js:1:58)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/domains/customer/services/__tests__/CustomerService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.test.js:1:54)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/domains/customer/services/__tests__/CustomerService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.<anonymous> (src/domains/customer/services/__tests__/CustomerService.integration.test.js:1:54)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/domains/customer/repositories/__tests__/CustomerRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.<anonymous> (src/domains/customer/repositories/__tests__/CustomerRepository.test.js:1:60)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/domains/component/services/__tests__/ComponentService.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.test.js:1:56)

FAIL src/domains/component/services/__tests__/ComponentService.integration.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.<anonymous> (src/domains/component/services/__tests__/ComponentService.integration.test.js:1:56)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/domains/component/repositories/__tests__/ComponentRepository.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.<anonymous> (src/domains/component/repositories/__tests__/ComponentRepository.test.js:1:62)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/__tests__/domains/inspection/services/InspectionService.test.js
  ● Test suite failed to run

    Implementation does not satisfy the InspectionServiceInterface

      44 |   setImplementation(implementation) {
      45 |     if (!this.isValidImplementation(implementation)) {
    > 46 |       throw new Error('Implementation does not satisfy the InspectionServiceInterface');
         |             ^
      47 |     }
      48 |     
      49 |     this.implementation = implementation;

      at InspectionServiceInterface.setImplementation (src/domains/inspection/interfaces/InspectionServiceInterface.js:46:13)
      at new setImplementation (src/domains/inspection/services/InspectionService.js:38:32)
      at Object.<anonymous> (src/domains/inspection/services/InspectionService.js:648:27)
      at Object.require (src/__tests__/domains/inspection/services/InspectionService.test.js:8:27)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/domains/supplier/controllers/SupplierController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Supplier".
    Use mongoose.model(name, schema)

      11 | const Qualification = require('../models/Qualification');
      12 | const mongoose = require('mongoose');
    > 13 | const SupplierModel = mongoose.model('Supplier');
         |                                ^
      14 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      15 | const logger = require('../../../infrastructure/logger');
      16 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/supplier/repositories/supplierRepository.js:13:32)
      at Object.require (src/domains/supplier/services/SupplierService.js:16:28)
      at Object.require (src/domains/supplier/controllers/SupplierController.js:10:25)
      at Object.require (src/domains/supplier/controllers/SupplierController.test.js:10:28)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/domains/inspection/controllers/InspectionController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Inspection".
    Use mongoose.model(name, schema)

      10 | const Defect = require('../models/Defect');
      11 | const mongoose = require('mongoose');
    > 12 | const InspectionModel = mongoose.model('Inspection');
         |                                  ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/inspection/repositories/inspectionRepository.js:12:34)
      at Object.require (src/domains/inspection/services/InspectionService.js:13:30)
      at Object.require (src/domains/inspection/controllers/InspectionController.js:10:27)
      at Object.require (src/domains/inspection/controllers/InspectionController.test.js:10:30)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/domains/customer/controllers/CustomerController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Customer".
    Use mongoose.model(name, schema)

      10 | const Contact = require('../models/Contact');
      11 | const mongoose = require('mongoose');
    > 12 | const CustomerModel = mongoose.model('Customer');
         |                                ^
      13 |
      14 | class CustomerRepository extends Repository {
      15 |   /**

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/customer/repositories/customerRepository.js:12:32)
      at Object.require (src/domains/customer/services/CustomerService.js:13:28)
      at Object.require (src/domains/customer/controllers/CustomerController.js:10:25)
      at Object.require (src/domains/customer/controllers/CustomerController.test.js:10:28)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/domains/component/controllers/ComponentController.test.js
  ● Test suite failed to run

    MissingSchemaError: Schema hasn't been registered for model "Component".
    Use mongoose.model(name, schema)

      10 | const Revision = require('../models/Revision');
      11 | const mongoose = require('mongoose');
    > 12 | const ComponentModel = mongoose.model('Component');
         |                                 ^
      13 | const CacheManager = require('../../../infrastructure/caching/CacheManager');
      14 | const logger = require('../../../infrastructure/logger');
      15 |

      at Mongoose.model (../node_modules/mongoose/lib/mongoose.js:577:13)
      at Object.model (src/domains/component/repositories/componentRepository.js:12:33)
      at Object.require (src/domains/component/services/ComponentService.js:13:29)
      at Object.require (src/domains/component/controllers/ComponentController.js:10:26)
      at Object.require (src/domains/component/controllers/ComponentController.test.js:10:29)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/__tests__/utils/testDataGenerator.test.js (11.702 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:38.909Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (12.005 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:38.960Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (11.979 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.130Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (12.187 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.161Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/__tests__/utils/testDataGenerator.test.js (12.273 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.088Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (12.191 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.385Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (12.661 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.320Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/__tests__/utils/testDataGenerator.test.js (12.995 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.373Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (12.88 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:39.361Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/ai/services/__tests__/AutomatedRetrainingService.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/services/AutomatedRetrainingService.js
      src/ai/services/__tests__/AutomatedRetrainingService.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/services/AutomatedRetrainingService.js:18:20)
      at Object.require (src/ai/services/__tests__/AutomatedRetrainingService.test.js:1:40)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/ai/core/__tests__/AIFramework.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/core/__tests__/AIFramework.defect-detection.test.js:1:25)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/__tests__/utils/testDataGenerator.test.js (16.729 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:45.669Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.072 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:45.344Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.07 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:45.877Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (16.975 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:46.286Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.241 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:45.962Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.247 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:46.216Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.179 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:46.270Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.486 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:46.298Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/utils/testDataGenerator.test.js (17.847 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:46.073Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/controllers/__tests__/ai.controller.defect-detection.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/controllers/ai.controller.js:10:22)
      at Object.require (src/controllers/__tests__/ai.controller.defect-detection.test.js:3:22)

FAIL src/ai/services/foundation.service.test.js
  ● Test suite failed to run

    The Node.js native addon module (tfjs_binding.node) can not be found at path: /Users/tannercoker/AeroSuite-main-1/node_modules/@tensorflow/tfjs-node/lib/napi-v8/tfjs_binding.node. 
    Please run command 'npm rebuild @tensorflow/tfjs-node --build-addon-from-source' to rebuild the native addon module. 
    If you have problem with building the addon module, please check https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md or file an issue.

      1 | // Task: AI001 - AI/ML Core Framework
    > 2 | const tf = require('@tensorflow/tfjs-node');
        |            ^
      3 | const natural = require('natural');
      4 | const brain = require('brain.js');
      5 | const mlpipeline = require('ml-pipeline');

      at Object.<anonymous> (../node_modules/@tensorflow/tfjs-node/dist/index.js:61:11)
      at Object.require (src/ai/core/AIFramework.js:2:12)
      at Object.require (src/ai/services/foundation.service.js:15:21)
      at Object.require (src/ai/services/foundation.service.test.js:1:25)

FAIL src/test-utils/security.test.js (15.299 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/test-utils/security.test.js (15.558 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/test-utils/security.test.js (16.554 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
FAIL src/test-utils/security.test.js (16.626 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

  ● Console

    console.log
      [2025-08-21T22:11:40.499Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.680Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.681Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.684Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.685Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.859Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.860Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.941Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.943Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.943Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.944Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.944Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.945Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.945Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.946Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.946Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.947Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.947Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.949Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.950Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.950Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.951Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.951Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.952Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.953Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.954Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:40.955Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/test-utils/security.test.js (16.538 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/test-utils/security.test.js (16.104 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/test-utils/security.test.js (17.003 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/test-utils/security.test.js (16.532 s)
FAIL src/test-utils/security.test.js (16.458 s)
  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

  ● Console

    console.error
      npm audit failed: Command failed: npm audit --json

      18 |     } catch (err) {
      19 |       // If audit fails, print output and fail
    > 20 |       console.error('npm audit failed:', output || err.message);
         |               ^
      21 |       throw err;
      22 |     }
      23 |   });

      at Object.error (src/test-utils/security.test.js:20:15)

  ● Security Audit › should have no high or critical vulnerabilities (npm audit)

    Command failed: npm audit --json

      12 |     let output = '';
      13 |     try {
    > 14 |       output = execSync('npm audit --json', { encoding: 'utf-8' });
         |                ^
      15 |       const audit = JSON.parse(output);
      16 |       const highOrCritical = Object.values(audit.advisories || {}).filter(a => a.severity === 'high' || a.severity === 'critical');
      17 |       expect(highOrCritical.length).toBe(0);

      at Object.execSync (src/test-utils/security.test.js:14:16)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:41.386Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.640Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.643Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.645Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.645Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.650Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.972Z] [DEBUG] [Server] findById duration { ms: 321, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.975Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.976Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.977Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.979Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.979Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.980Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.980Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.981Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.981Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.982Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.982Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.983Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:41.984Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.148Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.149Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.149Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.151Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.153Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.155Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.156Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:42.257Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.495Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.496Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.498Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.500Z] [DEBUG] [Server] findAll duration { ms: 1, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.661Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.662Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.665Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.682Z] [DEBUG] [Server] findById duration { ms: 16, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.682Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.684Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.684Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.685Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.685Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.686Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.686Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.687Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.688Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.689Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.691Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.691Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.692Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.694Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.913Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.914Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:42.701Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.724Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.726Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.728Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.728Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.734Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.735Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.739Z] [DEBUG] [Server] findById duration { ms: 2, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.742Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.742Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.745Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.746Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.746Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.746Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.747Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.747Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.749Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.749Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.750Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.751Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.751Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.752Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.752Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.753Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.754Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.755Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.152Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

  ● Console

    console.log
      [2025-08-21T22:11:42.368Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.664Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.665Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.668Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.669Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.685Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.687Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.688Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.691Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.691Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.693Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.693Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.694Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.694Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.694Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.695Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.988Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.988Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.989Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.990Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.990Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.992Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.992Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.993Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.994Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.996Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.996Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

  ● Console

    console.log
      [2025-08-21T22:11:42.388Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.654Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.655Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.657Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.672Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.684Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.686Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.687Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.689Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.690Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.695Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.695Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.696Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.696Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.709Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.709Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.710Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.711Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.713Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.714Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.714Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.715Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.715Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.717Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.721Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.724Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.727Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
node:events:496
      throw er; // Unhandled 'error' event
      ^

Error: bind EADDRINUSE null:5000
    at listenOnPrimaryHandle (node:net:2021:18)
    at rr (node:internal/cluster/child:163:12)
    at Worker.<anonymous> (node:internal/cluster/child:113:7)
    at process.onInternalMessage (node:internal/cluster/utils:49:5)
    at process.emit (node:events:530:35)
    at emit (node:internal/child_process:949:14)
    at processTicksAndRejections (node:internal/process/task_queues:91:21)
Emitted 'error' event on Server instance at:
    at listenOnPrimaryHandle (node:net:2022:21)
    at rr (node:internal/cluster/child:163:12)
    [... lines matching original stack trace ...]
    at processTicksAndRejections (node:internal/process/task_queues:91:21) {
  errno: -48,
  code: 'EADDRINUSE',
  syscall: 'bind',
  address: null,
  port: 5000
}

Node.js v22.18.0
FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:42.875Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.994Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:42.996Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.118Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.118Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.230Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.231Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.232Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.237Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.237Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.239Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.239Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.242Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.242Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.243Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.243Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.258Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.259Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.260Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.261Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.261Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.262Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.262Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.428Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.435Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.437Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.438Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

  ● Console

    console.log
      [2025-08-21T22:11:43.175Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.192Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.193Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.197Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.198Z] [DEBUG] [Server] findAll duration { ms: 1, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.202Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.203Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.204Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.207Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.207Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.209Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.210Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.210Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.211Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.212Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.212Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.213Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.213Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.214Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.215Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.216Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.663Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.665Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.668Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.669Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.671Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.672Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:43.364Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.369Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.568Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.569Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.570Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.575Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.576Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.579Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.581Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.581Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.589Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.589Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.591Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.591Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.593Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.593Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.594Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.596Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.596Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.597Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.598Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.598Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.600Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.601Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.602Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:43.269Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.317Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.318Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.320Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.320Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.636Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.654Z] [DEBUG] [Server] findById duration { ms: 5, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.655Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.656Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.656Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.658Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.658Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.659Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.659Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.660Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.660Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.661Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.662Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.853Z] [DEBUG] [Server] findById duration { ms: 191, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.877Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.877Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.877Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.877Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.878Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.879Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.880Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.881Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/supplier/services/SupplierService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:43.484Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.814Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.827Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.829Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.829Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.837Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.838Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.843Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.844Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.844Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.846Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.846Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.846Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.847Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.847Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.847Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.850Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.851Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.852Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.854Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.854Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.855Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.855Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.858Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.859Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.860Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:43.861Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● SupplierService › findById › should return null if supplier is not found

    ValidationError: Supplier not found

      69 |     const result = await this.getRepository().findById(id);
      70 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 71 |     if (!result) throw new ValidationError('Supplier not found');
         |                        ^
      72 |     return result;
      73 |   }
      74 |   

      at SupplierService.findById (src/domains/supplier/services/SupplierService.js:71:24)
      at Object.<anonymous> (src/__tests__/domains/supplier/services/SupplierService.test.js:101:22)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:44.217Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.439Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.440Z] [DEBUG] [Server] findAll duration { ms: 1, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.441Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.442Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.453Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.460Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.461Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.463Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.464Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.465Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.467Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.468Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.469Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.470Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.470Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.471Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.472Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.474Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.474Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.475Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.476Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.476Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:44.220Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.248Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.249Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.250Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.251Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.519Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.520Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.522Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.523Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.523Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.525Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.526Z] [DEBUG] [Server] update duration { ms: 1 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.526Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.526Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.674Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.674Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.676Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.678Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.678Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.686Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.686Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.687Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.688Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.689Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.690Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:44.178Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.189Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.190Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.192Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.193Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.524Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.526Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.528Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.529Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.529Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.530Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.530Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.531Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.531Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.531Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.531Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.532Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.715Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.715Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.716Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.719Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.720Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.722Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.722Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.723Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:44.524Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.689Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.690Z] [DEBUG] [Server] findAll duration { ms: 1, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.690Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.691Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.695Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.696Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.857Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.858Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.858Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.874Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.875Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.875Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.876Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.876Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.877Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.877Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.878Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.879Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.879Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.879Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.880Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.882Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.884Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.092Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:44.874Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.879Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.880Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.881Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:44.882Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.103Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.105Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.107Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.109Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.109Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.110Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.114Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.115Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.115Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.115Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.116Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.116Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.117Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.118Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.118Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.119Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.119Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.121Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.122Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.122Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:45.088Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.094Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.096Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.097Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.098Z] [DEBUG] [Server] findAll duration { ms: 1, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.106Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.108Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.109Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.110Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.112Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.113Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.114Z] [DEBUG] [Server] update duration { ms: 1 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.431Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.431Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.432Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.432Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.434Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.434Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.435Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.436Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.436Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.437Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.438Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/ai/routes/analysis.test.js
  ● Test suite failed to run

    Cannot find module 'password-validator' from 'src/middleware/validators/auth.validator.js'

    Require stack:
      src/middleware/validators/auth.validator.js
      src/routes/v1/auth.routes.js
      src/routes/v1/index.js
      src/routes/index.js
      src/app.js
      src/ai/routes/analysis.test.js

      1 | const { body, param } = require('express-validator');
    > 2 | const passwordValidator = require('password-validator');
        |                           ^
      3 |
      4 | // Create password schema
      5 | const passwordSchema = new passwordValidator();

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.require (src/middleware/validators/auth.validator.js:2:27)
      at Object.require (src/routes/v1/auth.routes.js:5:23)
      at Object.require (src/routes/v1/index.js:11:20)
      at Object.require (src/routes/index.js:33:18)
      at Object.require (src/app.js:18:16)
      at Object.require (src/ai/routes/analysis.test.js:4:13)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:45.480Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.485Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.486Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.487Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.488Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.490Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.491Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.493Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.681Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.681Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.697Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.697Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.698Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.698Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.698Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.699Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.699Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.702Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.702Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.703Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.703Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.704Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.705Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.706Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.707Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

  ● Console

    console.log
      [2025-08-21T22:11:45.180Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.203Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.204Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.205Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.206Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.437Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.438Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.441Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.442Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.442Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.443Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.444Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.444Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.444Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.456Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.456Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.457Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.459Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.459Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.460Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.460Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.461Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.462Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.463Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.464Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/utils/testDataGenerator.test.js (23.676 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:56.220Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

FAIL src/__tests__/domains/customer/services/CustomerService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:45.554Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.560Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.560Z] [DEBUG] [Server] findAll duration { ms: 0, query: { name: { '$regex': 'Test', '$options': 'i' } } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.561Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.562Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.768Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.769Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.771Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.772Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.772Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.773Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.773Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.777Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.777Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.777Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.778Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.778Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.779Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.780Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.780Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.780Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.781Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.783Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.784Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.785Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● CustomerService › findById › should return null if customer is not found

    Customer not found

      66 |     const customer = await this.getRepository().findById(id);
      67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
    > 68 |     if (!customer) throw new Error('Customer not found');
         |                          ^
      69 |     return customer;
      70 |   }
      71 |   

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:101:22)

  ● CustomerService › update › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.update (src/domains/customer/services/CustomerService.js:195:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:256:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:256:70)

  ● CustomerService › delete › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.delete (src/domains/customer/services/CustomerService.js:257:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:413:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:413:56)

  ● CustomerService › addContact › should throw an error if customer is not found

    expect(received).rejects.toThrow(expected)

    Expected constructor: ValidationError
    Received constructor: Error

    Received message: "Customer not found"

          66 |     const customer = await this.getRepository().findById(id);
          67 |     logger.debug('findById duration', { ms: Date.now() - start, id });
        > 68 |     if (!customer) throw new Error('Customer not found');
             |                          ^
          69 |     return customer;
          70 |   }
          71 |

      at CustomerService.findById (src/domains/customer/services/CustomerService.js:68:26)
      at CustomerService.addContact (src/domains/customer/services/CustomerService.js:284:22)
      at Object.<anonymous> (src/__tests__/domains/customer/services/CustomerService.test.js:465:7)
      at Object.toThrow (../node_modules/expect/build/index.js:218:22)
      at Object.toThrow (src/__tests__/domains/customer/services/CustomerService.test.js:465:81)

FAIL src/__tests__/core/domain-events-integration.test.js
FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:45.885Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.047Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.048Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.049Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.049Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.058Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.059Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.060Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.061Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.062Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.063Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.063Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.064Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.064Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.064Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.065Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.066Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.066Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.067Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.069Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.069Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.070Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.070Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/domains/component/services/ComponentService.test.js
  ● Console

    console.log
      [2025-08-21T22:11:46.188Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.227Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.228Z] [DEBUG] [Server] findAll duration { ms: 0, query: { category: 'electronics' } }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.229Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.230Z] [DEBUG] [Server] findAll duration { ms: 0, query: {} }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.239Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.240Z] [DEBUG] [Server] create duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.242Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.243Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.244Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.244Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.245Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.246Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.246Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.247Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.248Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.249Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.249Z] [DEBUG] [Server] update duration { ms: 0 }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.544Z] [DEBUG] [Server] findById duration { ms: 1, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.545Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.546Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.546Z] [DEBUG] [Server] findById duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.547Z] [DEBUG] [Server] delete duration { ms: 0, id: '123' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

  ● ComponentService › findAll › should use default values if options are not provided

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      {},
    - ObjectContaining {"limit": 10, "skip": 0, "sort": {"createdAt": 1}},
    + {"limit": 10, "skip": 0, "sort": {"name": 1}},

    Number of calls: 1

      180 |       
      181 |       // Assert
    > 182 |       expect(mockComponentRepository.findAll).toHaveBeenCalledWith(
          |                                               ^
      183 |         {},
      184 |         expect.objectContaining({
      185 |           skip: 0,

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:182:47)

  ● ComponentService › update › should update component status if status is provided

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      441 |       
      442 |       // Assert
    > 443 |       expect(mockComponent.approve).toHaveBeenCalled();
          |                                     ^
      444 |       expect(mockComponent.reject).not.toHaveBeenCalled();
      445 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      446 |     });

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:443:37)

  ● ComponentService › update › should reject component if status is rejected

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      469 |       // Assert
      470 |       expect(mockComponent.approve).not.toHaveBeenCalled();
    > 471 |       expect(mockComponent.reject).toHaveBeenCalled();
          |                                    ^
      472 |       expect(mockComponent.discontinue).not.toHaveBeenCalled();
      473 |     });
      474 |     

      at Object.toHaveBeenCalled (src/__tests__/domains/component/services/ComponentService.test.js:471:36)

  ● ComponentService › search › should search components by query

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -17,10 +17,17 @@
              "description": Object {
                "$options": "i",
                "$regex": "test",
              },
            },
    +       Object {
    +         "tags": Object {
    +           "$in": Array [
    +             "test",
    +           ],
    +         },
    +       },
          ],
        },
        "limit": 10,
        "page": 1,
      },

    Number of calls: 1

      581 |       });
      582 |       
    > 583 |       expect(componentService.findAll).toHaveBeenCalledWith({
          |                                        ^
      584 |         filter: {
      585 |           $or: [
      586 |             { name: { $regex: query, $options: 'i' } },

      at Object.toHaveBeenCalledWith (src/__tests__/domains/component/services/ComponentService.test.js:583:40)

FAIL src/__tests__/utils/testDataGenerator.test.js (23.851 s)
  ● TestDataGenerator › Supplier Generation › should generate a supplier with risk level based on quality score

    expect(received).toBe(expected) // Object.is equality

    Expected: "low"
    Received: "high"

      147 |         performance: { qualityScore: 95 }
      148 |       });
    > 149 |       expect(lowRiskSupplier.riskLevel).toBe('low');
          |                                         ^
      150 |       
      151 |       const mediumRiskSupplier = generator.generateSupplier({
      152 |         performance: { qualityScore: 85 }

      at Object.toBe (src/__tests__/utils/testDataGenerator.test.js:149:41)

  ● TestDataGenerator › Inspection Generation › should generate appropriate data based on inspection status

    expect(received).toBeNull()

    Received: 2025-08-17T10:57:55.684Z

      181 |         status: 'scheduled'
      182 |       });
    > 183 |       expect(scheduledInspection.actualStartTime).toBeNull();
          |                                                   ^
      184 |       expect(scheduledInspection.actualEndTime).toBeNull();
      185 |       expect(scheduledInspection.outcome).toBeNull();
      186 |       

      at Object.toBeNull (src/__tests__/utils/testDataGenerator.test.js:183:51)

  ● Console

    console.log
      [2025-08-21T22:11:45.558Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.560Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.561Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.561Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.561Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.562Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.562Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.790Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.790Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.791Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.791Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.792Z] [DEBUG] [Server] Publishing event from customer {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:45.792Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.793Z] [DEBUG] [Server] Domain event published: CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:45.792Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:45.794Z] [DEBUG] [Server] inspection handling customer:CustomerStatusUpdated {
        event: {
          type: 'CustomerStatusUpdated',
          payload: {
            customerId: 'customer-1',
            status: 'inactive',
            previousStatus: 'active'
          },
          sourceContext: 'customer',
          timestamp: '2025-08-21T22:11:45.792Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:45.794Z] [DEBUG] [Server] Handling CustomerStatusUpdated for inspection domain: customer-1, status: inactive

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:45.794Z] [INFO] [Server] Found 2 scheduled inspections for now inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.795Z] [INFO] [Server] Would handle 2 inspections for inactive customer customer-1

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.802Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.803Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:45.803Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.009Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.009Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.009Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.009Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.010Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.010Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.010Z] [INFO] [Server] inspection subscribed to component:ComponentCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.010Z] [INFO] [Server] inspection subscribed to component:ComponentSpecificationUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.071Z] [DEBUG] [Server] Publishing event from inspection {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:46.071Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:46.071Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.072Z] [DEBUG] [Server] Domain event published: InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:46.071Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:46.071Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)

    console.log
      [2025-08-21T22:11:46.073Z] [DEBUG] [Server] customer handling inspection:InspectionCompleted {
        event: {
          type: 'InspectionCompleted',
          payload: {
            inspectionId: 'inspection-1',
            customerId: 'customer-1',
            supplierId: 'supplier-1',
            completedDate: '2025-08-21T22:11:46.071Z',
            result: 'passed',
            defectCount: 0
          },
          sourceContext: 'inspection',
          timestamp: '2025-08-21T22:11:46.071Z'
        }
      }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:46.073Z] [DEBUG] [Server] Handling InspectionCompleted for customer customer-1 { inspectionId: 'inspection-1' }

      at Logger.log [as debug] (src/utils/logger.js:20:13)
          at Array.forEach (<anonymous>)

    console.log
      [2025-08-21T22:11:46.074Z] [INFO] [Server] Updated customer customer-1 with inspection result: passed { inspectionId: 'inspection-1' }

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.079Z] [INFO] [Server] Initializing Customer domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.079Z] [INFO] [Server] customer subscribed to inspection:InspectionCompleted

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.079Z] [INFO] [Server] customer subscribed to inspection:InspectionScheduled

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.079Z] [INFO] [Server] customer subscribed to supplier:SupplierCustomerAssociated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.080Z] [INFO] [Server] Initializing Inspection domain event handlers

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.080Z] [INFO] [Server] inspection subscribed to customer:CustomerCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.080Z] [INFO] [Server] inspection subscribed to customer:CustomerStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.080Z] [INFO] [Server] inspection subscribed to supplier:SupplierCreated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.080Z] [INFO] [Server] inspection subscribed to supplier:SupplierStatusUpdated

      at Logger.log [as info] (src/utils/logger.js:16:13)

    console.log
      [2025-08-21T22:11:46.081Z] [INFO] [Server] inspection subscribed to compo