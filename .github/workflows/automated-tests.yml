name: Automated Tests

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master, development ]
  workflow_dispatch:
    inputs:
      coverage-threshold:
        description: 'Minimum code coverage threshold (%)'
        default: '75'
        required: true
        type: string

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps
          cd client && npm install --legacy-peer-deps
          cd ../server && npm install --legacy-peer-deps
          
      - name: Run Backend Unit Tests
        run: |
          cd server
          npm test
          
      - name: Run Frontend Unit Tests
        run: |
          cd client
          npm test -- --watchAll=false
          
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            server/coverage
            client/coverage
          retention-days: 7
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          
      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps
          cd server && npm install --legacy-peer-deps
          
      - name: Run Integration Tests
        run: |
          cd server
          npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/aerosuite-test
          
      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: server/coverage-integration
          retention-days: 7
  
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          
      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps
          cd client && npm install --legacy-peer-deps
          cd ../server && npm install --legacy-peer-deps
          npm install -g cypress
          
      - name: Start Backend Server
        run: |
          cd server
          npm run start:test &
          sleep 5
        env:
          NODE_ENV: test
          PORT: 5000
          MONGODB_URI: mongodb://localhost:27017/aerosuite-test
          
      - name: Start Frontend Server
        run: |
          cd client
          npm run start:test &
          sleep 10
        env:
          REACT_APP_API_URL: http://localhost:5000
          PORT: 3000
          
      - name: Run E2E Tests
        run: |
          npx cypress run
          
      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: cypress/videos
          retention-days: 7
  
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          
      - name: Install Dependencies
        run: npm install --legacy-peer-deps
      
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
          
      - name: Generate Combined Coverage Report
        run: |
          npm install -g nyc
          mkdir -p .nyc_output
          cp -r coverage-reports/unit-test-results/server/.nyc_output/* .nyc_output/ || true
          cp -r coverage-reports/integration-test-results/.nyc_output/* .nyc_output/ || true
          nyc report --reporter=lcov --reporter=text-summary
          
      - name: Check Coverage Threshold
        run: |
          COVERAGE_THRESHOLD=${{ github.event.inputs.coverage-threshold || '75' }}
          COVERAGE_RESULT=$(nyc report --reporter=text-summary | grep -oP 'Statements\s+:\s+\K[0-9.]+')
          
          echo "Coverage threshold: ${COVERAGE_THRESHOLD}%"
          echo "Actual coverage: ${COVERAGE_RESULT}%"
          
          if (( $(echo "${COVERAGE_RESULT} < ${COVERAGE_THRESHOLD}" | bc -l) )); then
            echo "::error::Code coverage ${COVERAGE_RESULT}% is below the threshold of ${COVERAGE_THRESHOLD}%"
            exit 1
          else
            echo "::notice::Code coverage ${COVERAGE_RESULT}% meets the threshold of ${COVERAGE_THRESHOLD}%"
          fi
          
      - name: Upload Combined Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: coverage
          retention-days: 30
  
  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          
      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps
          cd client && npm install --legacy-peer-deps
          cd ../server && npm install --legacy-peer-deps
          
      - name: Lint Backend
        run: |
          cd server
          npm run lint
          
      - name: Lint Frontend
        run: |
          cd client
          npm run lint
  
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          
      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps
          cd client && npm install --legacy-peer-deps
          cd ../server && npm install --legacy-peer-deps
          
      - name: Type Check Backend
        run: |
          cd server
          npm run type-check
          
      - name: Type Check Frontend
        run: |
          cd client
          npm run type-check 