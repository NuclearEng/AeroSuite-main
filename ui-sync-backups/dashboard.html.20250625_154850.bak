<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AeroSuite - Dashboard</title>
    <style>
        :root {
            /* Primary color palette - more sophisticated blue */
            --primary-color: #2563eb;
            --primary-light: #3b82f6;
            --primary-dark: #1d4ed8;
            --primary-contrast: #ffffff;
            
            /* Secondary color palette */
            --secondary-color: #0ea5e9;
            --secondary-light: #38bdf8;
            --secondary-dark: #0284c7;
            
            /* Accent colors */
            --accent-green: #10b981;
            --accent-red: #ef4444;
            --accent-yellow: #f59e0b;
            --accent-purple: #8b5cf6;
            
            /* Neutral colors */
            --text-primary: #1e293b;
            --text-secondary: #475569;
            --text-tertiary: #64748b;
            --light-bg: #f8fafc;
            --card-bg: #ffffff;
            --border-color: #e2e8f0;
            
            /* Status colors */
            --status-success-bg: #ecfdf5;
            --status-success-text: #065f46;
            --status-warning-bg: #fffbeb;
            --status-warning-text: #92400e;
            --status-danger-bg: #fef2f2;
            --status-danger-text: #b91c1c;
            --status-info-bg: #eff6ff;
            --status-info-text: #1e40af;
            
            /* Spacing system */
            --space-xs: 0.25rem;
            --space-sm: 0.5rem;
            --space-md: 1rem;
            --space-lg: 1.5rem;
            --space-xl: 2rem;
            --space-2xl: 3rem;
            
            /* UI elements */
            --border-radius-sm: 0.25rem;
            --border-radius: 0.5rem;
            --border-radius-lg: 0.75rem;
            --border-radius-xl: 1rem;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            
            /* Typography */
            --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            --font-size-xs: 0.75rem;
            --font-size-sm: 0.875rem;
            --font-size-base: 1rem;
            --font-size-lg: 1.125rem;
            --font-size-xl: 1.25rem;
            --font-size-2xl: 1.5rem;
            --font-size-3xl: 1.875rem;
            --font-size-4xl: 2.25rem;
            
            /* Transitions */
            --transition-fast: 150ms ease;
            --transition-normal: 250ms ease;
            --transition-slow: 350ms ease;
            
            /* Z-index system */
            --z-index-dropdown: 10;
            --z-index-sticky: 20;
            --z-index-fixed: 30;
            --z-index-modal-backdrop: 40;
            --z-index-modal: 50;
            --z-index-popover: 60;
            --z-index-tooltip: 70;
        }
        
        /* Base styles */
        *, *::before, *::after {
            box-sizing: border-box;
        }
        
        html {
            font-size: 16px;
            scroll-behavior: smooth;
        }
        
        body {
            font-family: var(--font-family);
            margin: 0;
            padding: 0;
            background-color: var(--light-bg);
            color: var(--text-primary);
            line-height: 1.5;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        h1, h2, h3, h4, h5, h6 {
            margin-top: 0;
            font-weight: 600;
            line-height: 1.2;
            color: var(--text-primary);
        }
        
        p {
            margin-top: 0;
            margin-bottom: var(--space-md);
        }
        
        a {
            color: var(--primary-color);
            text-decoration: none;
            transition: color var(--transition-fast);
        }
        
        a:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        /* Header and navigation */
        .header {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
            padding: var(--space-md) var(--space-xl);
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: var(--z-index-sticky);
        }
        
        .logo {
            font-weight: 700;
            font-size: var(--font-size-xl);
            margin-right: var(--space-xl);
            letter-spacing: -0.025em;
            display: flex;
            align-items: center;
        }
        
        .logo::before {
            content: '';
            display: inline-block;
            width: 24px;
            height: 24px;
            background-color: var(--primary-contrast);
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5'/%3E%3C/svg%3E");
            mask-size: contain;
            mask-repeat: no-repeat;
            margin-right: var(--space-sm);
        }
        
        .nav {
            display: flex;
            flex-grow: 1;
            gap: var(--space-sm);
        }
        
        .nav-link {
            color: rgba(255, 255, 255, 0.85);
            text-decoration: none;
            padding: var(--space-sm) var(--space-md);
            border-radius: var(--border-radius);
            transition: all var(--transition-fast);
            font-weight: 500;
            position: relative;
        }
        
        .nav-link:hover {
            color: var(--primary-contrast);
            background-color: rgba(255, 255, 255, 0.1);
            text-decoration: none;
        }
        
        .nav-link.active {
            color: var(--primary-contrast);
            background-color: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }
        
        .nav-link.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: var(--space-md);
            right: var(--space-md);
            height: 2px;
            background-color: var(--primary-contrast);
            border-radius: 2px;
        }
        
        .header-actions {
            display: flex;
            align-items: center;
            gap: var(--space-md);
        }
        
        /* Notifications */
        .notifications-dropdown {
            position: relative;
        }
        
        .notifications-btn {
            background: none;
            border: none;
            color: var(--primary-contrast);
            cursor: pointer;
            position: relative;
            font-size: var(--font-size-xl);
            padding: var(--space-xs);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            transition: background-color var(--transition-fast);
        }
        
        .notifications-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .notification-icon {
            font-style: normal;
        }
        
        .notification-badge {
            position: absolute;
            top: 0;
            right: 0;
            background-color: var(--accent-red);
            color: white;
            border-radius: 50%;
            min-width: 18px;
            height: 18px;
            font-size: var(--font-size-xs);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            border: 2px solid var(--primary-color);
        }
        
        .notifications-dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            top: calc(100% + 8px);
            background-color: var(--card-bg);
            min-width: 350px;
            max-width: 400px;
            box-shadow: var(--shadow-lg);
            z-index: var(--z-index-dropdown);
            border-radius: var(--border-radius);
            overflow: hidden;
            border: 1px solid var(--border-color);
            animation: fadeIn 0.2s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .notifications-dropdown-content.show {
            display: block;
        }
        
        .notifications-dropdown-content::before {
            content: '';
            position: absolute;
            top: -8px;
            right: 16px;
            width: 16px;
            height: 16px;
            background-color: var(--card-bg);
            transform: rotate(45deg);
            border-top: 1px solid var(--border-color);
            border-left: 1px solid var(--border-color);
        }
        
        .notifications-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--space-md) var(--space-lg);
            background-color: var(--light-bg);
            border-bottom: 1px solid var(--border-color);
        }
        
        .notifications-header h3 {
            margin: 0;
            font-size: var(--font-size-base);
            font-weight: 600;
        }
        
        .mark-all-read-btn {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            font-size: var(--font-size-sm);
            padding: var(--space-xs);
            font-weight: 500;
            transition: color var(--transition-fast);
        }
        
        .mark-all-read-btn:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        .notifications-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .notification-item {
            padding: var(--space-md) var(--space-lg);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: flex-start;
            transition: background-color var(--transition-fast);
            cursor: pointer;
        }
        
        .notification-item:hover {
            background-color: var(--light-bg);
        }
        
        .notification-item.unread {
            background-color: rgba(37, 99, 235, 0.05);
        }
        
        .notification-icon-wrapper {
            margin-right: var(--space-md);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: var(--status-info-bg);
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .notification-icon-wrapper.warning {
            background-color: var(--status-warning-bg);
            color: var(--accent-yellow);
        }
        
        .notification-icon-wrapper.danger {
            background-color: var(--status-danger-bg);
            color: var(--accent-red);
        }
        
        .notification-icon-wrapper.success {
            background-color: var(--status-success-bg);
            color: var(--accent-green);
        }
        
        .notification-content {
            flex-grow: 1;
        }
        
        .notification-title {
            font-weight: 600;
            margin-bottom: var(--space-xs);
            font-size: var(--font-size-sm);
            color: var(--text-primary);
        }
        
        .notification-message {
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            margin-bottom: var(--space-xs);
            line-height: 1.4;
        }
        
        .notification-time {
            font-size: var(--font-size-xs);
            color: var(--text-tertiary);
        }
        
        .user-menu {
            color: var(--primary-contrast);
            cursor: pointer;
            padding: var(--space-xs) var(--space-md);
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            font-weight: 500;
            transition: background-color var(--transition-fast);
        }
        
        .user-menu:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .user-menu::before {
            content: '';
            display: inline-block;
            width: 24px;
            height: 24px;
            background-color: var(--primary-contrast);
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='12' cy='7' r='4'/%3E%3C/svg%3E");
            mask-size: contain;
            mask-repeat: no-repeat;
            margin-right: var(--space-sm);
        }
        
        /* Main layout */
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: var(--space-lg);
        }
        
        /* Special container for Kanban page */
        #tasks-page.container {
            max-width: 1400px;
        }
        
        .page-title {
            font-size: var(--font-size-2xl);
            margin: 0 0 var(--space-lg);
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
        }
        
        .page-title::before {
            content: '';
            display: inline-block;
            width: 28px;
            height: 28px;
            background-color: var(--primary-color);
            mask-size: contain;
            mask-repeat: no-repeat;
            margin-right: var(--space-sm);
        }
        
        #dashboard-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='3' width='7' height='7'/%3E%3Crect x='14' y='3' width='7' height='7'/%3E%3Crect x='14' y='14' width='7' height='7'/%3E%3Crect x='3' y='14' width='7' height='7'/%3E%3C/svg%3E");
        }
        
        #suppliers-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2'/%3E%3Crect x='8' y='2' width='8' height='4' rx='1' ry='1'/%3E%3Cpath d='M9 14h6'/%3E%3Cpath d='M9 10h6'/%3E%3Cpath d='M9 18h6'/%3E%3C/svg%3E");
        }
        
        #customers-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='9' cy='7' r='4'/%3E%3Cpath d='M23 21v-2a4 4 0 0 0-3-3.87'/%3E%3Cpath d='M16 3.13a4 4 0 0 1 0 7.75'/%3E%3C/svg%3E");
        }
        
        #tasks-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M9 11l3 3L22 4'/%3E%3Cpath d='M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11'/%3E%3C/svg%3E");
        }
        
        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: var(--space-lg);
            margin-bottom: var(--space-xl);
        }
        
        .card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: var(--space-lg);
            transition: transform var(--transition-normal), box-shadow var(--transition-normal);
            border: 1px solid var(--border-color);
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }
        
        .card-title {
            font-size: var(--font-size-lg);
            margin-top: 0;
            margin-bottom: var(--space-md);
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: var(--space-xs);
        }
        
        .card-content {
            margin-bottom: var(--space-md);
            flex-grow: 1;
        }
        
        .card-footer {
            margin-top: auto;
            display: flex;
            justify-content: flex-end;
        }
        
        /* Metrics */
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: var(--space-md);
            margin-bottom: var(--space-lg);
        }
        
        /* Hide metrics on non-dashboard pages */
        .page-content:not(#dashboard-page) .metrics {
            display: none !important;
        }
        
        .metric {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: var(--space-md);
            text-align: center;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            transition: transform var(--transition-fast), box-shadow var(--transition-fast);
        }
        
        .metric:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }
        
        .metric-value {
            font-size: var(--font-size-2xl);
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: var(--space-xs);
            line-height: 1;
        }
        
        .metric-label {
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            font-weight: 500;
        }
        
        .metric-link {
            color: var(--primary-color);
            text-decoration: none;
            cursor: pointer;
            transition: color var(--transition-fast);
        }
        
        .metric-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        .btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            background-color: var(--primary-dark);
        }
        
        .footer {
            text-align: center;
            padding: var(--space-lg);
            background-color: #1e293b;
            color: #f8fafc;
            margin-top: var(--space-2xl);
            font-size: var(--font-size-sm);
        }
        
        .page-content {
            display: none;
        }
        
        .page-content.active {
            display: block;
        }
        
        /* Tables */
        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            overflow: hidden;
        }
        
        table th, table td {
            padding: var(--space-md);
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }
        
        table th {
            background-color: var(--light-bg);
            font-weight: 600;
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        table tr:last-child td {
            border-bottom: none;
        }
        
        table tr:hover td {
            background-color: rgba(0, 0, 0, 0.01);
        }
        
        table td {
            transition: background-color var(--transition-fast);
        }
        
        /* Status badges */
        .status {
            padding: var(--space-xs) var(--space-sm);
            border-radius: 1rem;
            font-size: var(--font-size-xs);
            display: inline-flex;
            align-items: center;
            font-weight: 500;
            line-height: 1;
            gap: 4px;
        }
        
        .status::before {
            content: '';
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        
        .status-active {
            background-color: var(--status-success-bg);
            color: var(--status-success-text);
        }
        
        .status-active::before {
            background-color: var(--accent-green);
        }
        
        .status-pending {
            background-color: var(--status-warning-bg);
            color: var(--status-warning-text);
        }
        
        .status-pending::before {
            background-color: var(--accent-yellow);
        }
        
        .status-completed {
            background-color: var(--status-info-bg);
            color: var(--status-info-text);
        }
        
        .status-completed::before {
            background-color: var(--secondary-color);
        }
        
        .status-inactive {
            background-color: var(--status-danger-bg);
            color: var(--status-danger-text);
        }
        
        .status-inactive::before {
            background-color: var(--accent-red);
        }
        
        /* Modals */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: var(--z-index-modal-backdrop);
            overflow-y: auto;
            backdrop-filter: blur(4px);
            animation: fadeIn 0.2s ease;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            width: 90%;
            max-width: 600px;
            margin: 5vh auto;
            padding: var(--space-xl);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-xl);
            position: relative;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(-30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .report-modal-content {
            max-width: 800px;
        }
        
        .report-content-wrapper {
            max-height: 60vh;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        @media (max-width: 768px) {
            .report-modal-content {
                max-width: 100%;
                padding: 1rem;
            }
            
            .report-content-wrapper {
                max-height: 50vh;
            }
        }
        
        .close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            cursor: pointer;
            font-size: 1.2rem;
            z-index: 10;
        }
        
        /* Form styles */
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .form-actions {
            margin-top: 1.5rem;
            display: flex;
            justify-content: flex-end;
        }
        
        .form-actions .btn {
            margin-left: 0.5rem;
        }
        
        .btn-success {
            background-color: #4caf50;
        }
        
        .btn-success:hover {
            background-color: #45a049;
        }
        
        .btn-danger {
            background-color: #f44336;
        }
        
        .btn-danger:hover {
            background-color: #d32f2f;
        }

        /* Enhanced Business Modal Styles */
        .modal-header {
            padding: 24px 24px 16px;
            border-bottom: 1px solid var(--border-color);
            position: sticky;
            top: 0;
            background: var(--card-bg);
            z-index: 10;
        }
        
        .modal-body {
            padding: 24px;
        }
        
        .form-section {
            margin-bottom: 32px;
            padding-bottom: 24px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .form-section:last-child {
            border-bottom: none;
        }
        
        .form-section h3 {
            margin: 0 0 16px 0;
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin-bottom: 16px;
        }
        
        /* Enhanced form controls */
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.2);
        }
        
        .form-group small {
            display: block;
            margin-top: 4px;
            color: var(--text-secondary);
            font-size: 12px;
        }
        
        /* File upload styles */
        .file-upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 10px;
            padding: 24px;
            text-align: center;
            transition: border-color 0.2s;
            cursor: pointer;
            background-color: #fafafa;
        }
        
        .file-upload-area:hover {
            border-color: var(--primary-color);
        }
        
        .file-upload-area.dragover {
            border-color: var(--primary-color);
            background-color: rgba(25, 118, 210, 0.1);
        }
        
        .uploaded-files {
            margin-top: 16px;
        }
        
        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 8px;
        }
        
        .file-item .remove-file {
            color: var(--accent-red);
            cursor: pointer;
            font-weight: bold;
        }
        
        /* Enhanced responsive design */
        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }
        }
        
        /* Relationship graph styles */
        .relationship-container {
            margin-top: 2rem;
            border: 1px solid #ddd;
            padding: 1rem;
            border-radius: var(--border-radius);
            background-color: #fff;
            overflow: auto;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        
        .relationship-node {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            margin: 0.5rem;
            color: white;
            font-weight: bold;
            min-width: 150px;
            text-align: center;
        }
        
        .node-supplier {
            background-color: var(--primary-color);
        }
        
        .node-customer {
            background-color: #4caf50;
        }
        
        .relationship-line {
            display: inline-block;
            width: 50px;
            height: 2px;
            background-color: #666;
            margin: 0 0.5rem;
            vertical-align: middle;
        }
        
        .action-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .search-box {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 250px;
        }
        
        .tab-content {
            margin-top: 1rem;
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 1rem;
            overflow-x: auto; /* Allow horizontal scrolling on small screens */
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
        }
        
        .tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-right: 0.5rem;
            white-space: nowrap; /* Prevent text wrapping */
            transition: background-color 0.2s ease;
        }
        
        .tab:hover {
            background-color: rgba(25, 118, 210, 0.05);
        }
        
        .tab.active {
            border-color: #ddd;
            border-bottom-color: white;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
            margin-bottom: -1px;
            background-color: white;
            position: relative;
        }
        
        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: white;
        }
        
        /* Inspector styles */
        .inspector-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        
        .inspector-card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: transform 0.2s, box-shadow 0.2s;
            position: relative;
        }
        
        .inspector-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .inspector-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .inspector-card:hover .inspector-actions {
            opacity: 1;
        }
        
        .inspector-action-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.2s;
        }
        
        .inspector-action-btn:hover {
            background-color: var(--primary-dark);
        }
        
        .inspector-action-btn.edit {
            background-color: #4caf50;
        }
        
        .inspector-action-btn.edit:hover {
            background-color: #45a049;
        }
        
        .inspector-status-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 15px;
            height: 15px;
            border-radius: 50%;
        }
        
        .inspector-status-indicator.available {
            background-color: #4caf50;
            box-shadow: 0 0 5px #4caf50;
        }
        
        .inspector-status-indicator.assigned {
            background-color: #ff9800;
            box-shadow: 0 0 5px #ff9800;
        }
        
        .inspector-status-indicator.unavailable {
            background-color: #f44336;
            box-shadow: 0 0 5px #f44336;
        }
        
        .inspector-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 1rem;
            border: 3px solid var(--primary-color);
        }
        
        .inspector-name {
            font-size: 1.2rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }
        
        .inspector-title {
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .inspector-stats {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin: 1rem 0;
            padding-top: 1rem;
            border-top: 1px solid #eee;
        }
        
        .inspector-stat {
            text-align: center;
            flex: 1;
        }
        
        .inspector-stat-value {
            font-weight: bold;
            color: var(--primary-color);
        }
        
        .inspector-stat-label {
            font-size: 0.8rem;
            color: #666;
        }
        
        .inspector-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            margin: 0.25rem;
            background-color: #e6f7ed;
            color: #0c6b3d;
        }
        
        .inspector-contact {
            margin-top: 1rem;
            width: 100%;
            display: flex;
            justify-content: space-around;
        }
        
        .inspector-contact a {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 0.9rem;
        }
        
        .inspector-contact a:hover {
            text-decoration: underline;
        }
        
        .specialty-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }
        
        .specialty-tag {
            background-color: #e6f7ed;
            color: #0c6b3d;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 12px;
        }
        
        /* Responsive modal adjustments */
        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 3vh auto;
                padding: 1.5rem;
            }
            
            .scrollable-form {
                max-height: 80vh;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .form-actions .btn {
                margin-left: 0;
                margin-top: 0.5rem;
                width: 100%;
            }
        }
        
        .btn-success {
            background-color: #4caf50;
        }
        
        /* Map styles */
        .filter-container {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
        }
        
        .filter-container label {
            margin-right: 1rem;
            font-weight: bold;
        }
        
        .filter-container select {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-width: 200px;
        }
        
        .map-marker-info {
            padding: 10px;
            max-width: 300px;
        }
        
        .map-marker-info h3 {
            margin-top: 0;
            color: var(--primary-color);
        }
        
        .map-marker-info p {
            margin: 5px 0;
        }
        
        .map-marker-info .status {
            display: inline-block;
            margin-top: 5px;
        }
        
        .map-legend {
            position: absolute;
            bottom: 30px;
            right: 10px;
            background-color: white;
            padding: 10px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            z-index: 5;
            max-width: 200px;
        }
        
        .map-legend h4 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 14px;
            text-align: center;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .legend-marker {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            margin-right: 8px;
            border: 1px solid #fff;
            box-shadow: 0 0 2px rgba(0,0,0,0.3);
        }
        
        .legend-label {
            display: inline-block;
            width: 15px;
            height: 15px;
            background-color: #1976d2;
            color: white;
            text-align: center;
            line-height: 15px;
            font-size: 10px;
            font-weight: bold;
            margin-right: 8px;
            border-radius: 2px;
        }
        
        /* Kanban board styles */
        .kanban-container {
            display: flex;
            gap: 1rem;
            overflow-x: auto;
            padding-bottom: 1rem;
            min-height: 600px;
            height: calc(100vh - 250px);
            width: 100%;
            min-width: 1200px;
        }
        
        .kanban-column {
            flex: 1;
            min-width: 280px;
            background-color: var(--light-bg);
            border-radius: var(--border-radius);
            display: flex;
            flex-direction: column;
            height: 100%;
            max-height: 100%;
        }
        
        .kanban-column-header {
            padding: 1rem;
            background-color: var(--primary-color);
            color: white;
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1;
        }
        
        .kanban-column-header h3 {
            margin: 0;
            font-size: 1rem;
        }
        
        .kanban-column-count {
            background-color: white;
            color: var(--primary-color);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.8rem;
        }
        
        .kanban-column-body {
            padding: 1rem;
            flex: 1;
            overflow-y: auto;
            max-height: calc(100% - 60px);
        }
        
        .kanban-task {
            background-color: white;
            border-radius: var(--border-radius);
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            box-shadow: var(--shadow);
            cursor: grab;
            position: relative;
            border-left: 4px solid;
        }
        
        .kanban-task:active {
            cursor: grabbing;
        }
        
        .kanban-task-title {
            font-weight: bold;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }
        
        .kanban-task-description {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 1rem;
        }
        
        .kanban-task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: #666;
        }
        
        .kanban-task-assignee {
            display: flex;
            align-items: center;
        }
        
        .kanban-task-assignee-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.5rem;
            font-size: 0.8rem;
        }
        
        .kanban-task-due {
            display: flex;
            align-items: center;
        }
        
        .kanban-task-priority {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        
        .priority-high {
            background-color: #f44336;
        }
        
        .priority-medium {
            background-color: #ff9800;
        }
        
        .priority-low {
            background-color: #4caf50;
        }
        
        .kanban-task[data-category="inspection"] {
            border-left-color: #9c27b0;
        }
        
        .kanban-task[data-category="supplier"] {
            border-left-color: #2196f3;
        }
        
        .kanban-task[data-category="customer"] {
            border-left-color: #4caf50;
        }
        
        .kanban-task[data-category="report"] {
            border-left-color: #ff9800;
        }
        
        .kanban-task[data-category="finance"] {
            border-left-color: #607d8b;
        }
        
        .kanban-task[data-category="compliance"] {
            border-left-color: #f44336;
        }
        
        .kanban-add-task {
            background-color: rgba(25, 118, 210, 0.1);
            border: 2px dashed var(--primary-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.2s;
            margin: 1rem;
            position: sticky;
            bottom: 0;
            z-index: 1;
        }
        
        .kanban-add-task:hover {
            background-color: rgba(25, 118, 210, 0.2);
        }
        
        .kanban-filter-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .kanban-filters {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .kanban-filter {
            padding: 0.25rem 0.5rem;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 0.9rem;
            cursor: pointer;
        }
        
        .kanban-filter.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .task-detail-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        @media (max-width: 768px) {
            .task-detail-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .kanban-task-actions {
            position: absolute;
            top: 8px;
            right: 8px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.2s;
        }
        
        .kanban-task:hover .kanban-task-actions {
            opacity: 1;
        }
        
        .kanban-task-action {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.2s;
        }
        
        .kanban-task-action:hover {
            background-color: rgba(0, 0, 0, 0.2);
        }
        
        .kanban-task.highlight {
            animation: highlight-pulse 2s ease-out;
            box-shadow: 0 0 0 2px var(--primary-color);
        }
        
        @keyframes highlight-pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(25, 118, 210, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(25, 118, 210, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(25, 118, 210, 0);
            }
        }
        
        /* Kanban filter styles */
        /* Buttons */
        .btn {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
            border: none;
            padding: var(--space-sm) var(--space-lg);
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: var(--font-size-sm);
            font-weight: 500;
            transition: all var(--transition-fast);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-xs);
            line-height: 1.5;
        }
        
        .btn:hover {
            background-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-sm);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn:disabled {
            background-color: #cbd5e1;
            color: #64748b;
            cursor: not-allowed;
        }
        
        .btn-success {
            background-color: var(--accent-green);
        }
        
        .btn-success:hover {
            background-color: #059669;
        }
        
        .btn-warning {
            background-color: var(--accent-yellow);
        }
        
        .btn-warning:hover {
            background-color: #d97706;
        }
        
        .btn-danger {
            background-color: var(--accent-red);
        }
        
        .btn-danger:hover {
            background-color: #dc2626;
        }
        
        .btn-outline {
            background-color: transparent;
            color: var(--primary-color);
            border: 1px solid var(--primary-color);
        }
        
        .btn-outline:hover {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
        }
        
        .btn-sm {
            padding: var(--space-xs) var(--space-sm);
            font-size: var(--font-size-xs);
        }
        
        .btn-lg {
            padding: var(--space-md) var(--space-xl);
            font-size: var(--font-size-base);
        }
        
        .btn-icon {
            padding: var(--space-xs);
            width: 36px;
            height: 36px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: var(--space-lg);
            overflow-x: auto;
            scrollbar-width: thin;
            gap: var(--space-xs);
        }
        
        .tab {
            padding: var(--space-md) var(--space-lg);
            cursor: pointer;
            border-bottom: 2px solid transparent;
            color: var(--text-secondary);
            font-weight: 500;
            transition: all var(--transition-fast);
            white-space: nowrap;
        }
        
        .tab:hover {
            color: var(--primary-color);
            border-bottom-color: var(--border-color);
        }
        
        .tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Forms */
        .form-group {
            margin-bottom: var(--space-md);
        }
        
        label {
            display: block;
            margin-bottom: var(--space-xs);
            font-weight: 500;
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
        }
        
        input[type="text"],
        input[type="email"],
        input[type="password"],
        input[type="number"],
        input[type="date"],
        input[type="tel"],
        select,
        textarea {
            width: 100%;
            padding: var(--space-sm) var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: var(--font-size-sm);
            line-height: 1.5;
            color: var(--text-primary);
            transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
            background-color: var(--card-bg);
        }
        
        input:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        
        input::placeholder {
            color: var(--text-tertiary);
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: var(--space-md);
            margin-top: var(--space-lg);
        }
        
        /* Search box */
        .search-box {
            padding: var(--space-sm) var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: var(--font-size-sm);
            width: 300px;
            background-color: var(--card-bg);
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'/%3E%3Cline x1='21' y1='21' x2='16.65' y2='16.65'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: 12px center;
            padding-left: 40px;
            transition: all var(--transition-fast);
        }
        
        .search-box:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            width: 350px;
        }
        
        /* Action bar */
        .action-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-lg);
            flex-wrap: wrap;
            gap: var(--space-md);
        }
        
        /* Add modern styles for map visualization */
        #supplier-map {
            height: 600px;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--shadow);
            border: 1px solid var(--border-color);
            margin-bottom: var(--space-lg);
        }
        
        .map-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: var(--space-md);
            flex-wrap: wrap;
            gap: var(--space-md);
        }
        
        .map-filter-group {
            display: flex;
            align-items: center;
            gap: var(--space-xs);
        }
        
        .map-legend {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: var(--space-md);
            box-shadow: var(--shadow);
            position: absolute;
            bottom: 20px;
            right: 20px;
            z-index: 10;
            border: 1px solid var(--border-color);
            max-width: 200px;
        }
        
        .legend-title {
            font-weight: 600;
            margin-top: 0;
            margin-bottom: var(--space-sm);
            font-size: var(--font-size-sm);
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: var(--space-xs);
            margin-bottom: var(--space-xs);
            font-size: var(--font-size-xs);
        }
        
        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }
        
        /* Custom info window styles */
        .custom-info-window {
            padding: 0;
            width: 280px;
            border-radius: var(--border-radius);
            overflow: hidden;
        }
        
        .info-window-header {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
            padding: var(--space-sm) var(--space-md);
        }
        
        .info-window-title {
            margin: 0;
            font-size: var(--font-size-base);
            font-weight: 600;
        }
        
        .info-window-content {
            padding: var(--space-md);
        }
        
        .info-window-row {
            display: flex;
            margin-bottom: var(--space-xs);
        }
        
        .info-window-label {
            font-weight: 500;
            color: var(--text-secondary);
            width: 100px;
            font-size: var(--font-size-xs);
        }
        
        .info-window-value {
            font-size: var(--font-size-xs);
            color: var(--text-primary);
        }
        
        .info-window-actions {
            padding: var(--space-sm) var(--space-md);
            background-color: var(--light-bg);
            display: flex;
            justify-content: flex-end;
            gap: var(--space-sm);
            border-top: 1px solid var(--border-color);
        }
        
        /* Relationship visualization */
        .relationship-visualization {
            height: 500px;
            border-radius: var(--border-radius);
            overflow: hidden;
            background-color: var(--light-bg);
            border: 1px solid var(--border-color);
            position: relative;
        }
        
        .relationship-controls {
            position: absolute;
            top: var(--space-md);
            right: var(--space-md);
            z-index: 5;
            display: flex;
            gap: var(--space-xs);
        }
        
        .relationship-legend {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: var(--space-md);
            box-shadow: var(--shadow);
            position: absolute;
            bottom: var(--space-md);
            right: var(--space-md);
            z-index: 5;
            border: 1px solid var(--border-color);
        }
        
        .relationship-type {
            display: flex;
            align-items: center;
            gap: var(--space-xs);
            margin-bottom: var(--space-xs);
            font-size: var(--font-size-xs);
        }
        
        .relationship-line {
            width: 20px;
            height: 2px;
        }
        
        .primary-supplier {
            background-color: var(--primary-color);
        }
        
        .secondary-supplier {
            background-color: var(--secondary-color);
        }
        
        .distributor {
            background-color: var(--accent-purple);
        }
    </style>
    <!-- Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3qlqoHZJzltrdOrw99Rfa-DV4QWA60O0&callback=initMap" async defer></script>
</head>
<body>
    <div class="header">
        <div class="logo">AeroSuite</div>
        <nav class="nav">
            <a href="#dashboard" class="active nav-link" data-page="dashboard-page">Dashboard</a>
            <a href="#suppliers" class="nav-link" data-page="suppliers-page">Suppliers</a>
            <a href="#customers" class="nav-link" data-page="customers-page">Customers</a>
            <a href="#inspections" class="nav-link" data-page="inspections-page">Inspections</a>
            <a href="#inspectors" class="nav-link" data-page="inspectors-page">Inspectors</a>
            <a href="#relationships" class="nav-link" data-page="relationships-page">Relationships</a>
            <a href="#tasks" class="nav-link" data-page="tasks-page">Tasks</a>
            <a href="#reports" class="nav-link" data-page="reports-page">Reports</a>
        </nav>
        <div class="header-actions">
            <div class="notifications-dropdown">
                <button class="notifications-btn" id="notifications-btn">
                    <i class="notification-icon">🔔</i>
                    <span class="notification-badge" id="notification-count">0</span>
                </button>
                <div class="notifications-dropdown-content" id="notifications-dropdown">
                    <div class="notifications-header">
                        <h3>Notifications</h3>
                        <button class="mark-all-read-btn" id="mark-all-read">Mark all as read</button>
                    </div>
                    <div class="notifications-list" id="notifications-list">
                        <!-- Notifications will be loaded here -->
                    </div>
                </div>
            </div>
            <div class="user-menu">
                <span>Admin</span>
            </div>
        </div>
    </div>
    
    <!-- Dashboard Page -->
    <div class="container page-content active" id="dashboard-page">
        <h1 class="page-title">Dashboard</h1>
        
        <div class="card-grid">
            <div class="card">
                <h2 class="card-title">Supplier Performance</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value" id="supplier-count">-</div>
                            <div class="metric-label">Suppliers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="avg-rating">-</div>
                            <div class="metric-label">Avg Rating</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="active-suppliers">-</div>
                            <div class="metric-label">Active</div>
                        </div>
                    </div>
                    <p>Track and analyze supplier performance metrics.</p>
                </div>
                <button class="btn" id="supplier-details-btn">View Details</button>
            </div>
            
            <div class="card">
                <h2 class="card-title">Inspection Status</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value" id="inspection-count">-</div>
                            <div class="metric-label">Total</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="completed-inspections">-</div>
                            <div class="metric-label">Completed</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="scheduled-inspections">-</div>
                            <div class="metric-label">Scheduled</div>
                        </div>
                    </div>
                    <p>Monitor ongoing and completed inspections.</p>
                </div>
                <button class="btn" id="inspection-details-btn">View Details</button>
            </div>
            
            <div class="card">
                <h2 class="card-title">Customer Orders</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value" id="customer-count">-</div>
                            <div class="metric-label">Customers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#customers" class="metric-link" data-page="customers-page" data-filter="order">2</a>
                            </div>
                            <div class="metric-label">Orders</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#customers" class="metric-link" data-page="customers-page" data-filter="pending">1</a>
                            </div>
                            <div class="metric-label">Pending</div>
                        </div>
                    </div>
                    <p>Track customer orders and delivery status.</p>
                </div>
                <button class="btn" id="customer-details-btn">View Details</button>
            </div>
            
            <div class="card">
                <h2 class="card-title">Quality Metrics</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-filter="passed">98%</a>
                            </div>
                            <div class="metric-label">Pass Rate</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="completed-inspections-tab">3</a>
                            </div>
                            <div class="metric-label">Issues</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-filter="critical">1</a>
                            </div>
                            <div class="metric-label">Critical</div>
                        </div>
                    </div>
                    <p>Review quality control metrics and trends.</p>
                </div>
                <button class="btn" id="quality-details-btn">View Details</button>
            </div>
        </div>
    </div>
    
    <!-- Suppliers Page -->
    <div class="container page-content" id="suppliers-page">
        <h1 class="page-title">Suppliers</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="supplier-search" placeholder="Search suppliers...">
            <button class="btn btn-success" id="add-supplier-btn">Add Supplier</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="suppliers-list-tab">Suppliers List</div>
            <div class="tab" data-tab="supplier-relationships-tab">Relationships</div>
            <div class="tab" data-tab="supplier-map-tab">Location Map</div>
        </div>
        
        <div class="tab-content active" id="suppliers-list-tab">
            <div class="card">
                <h2 class="card-title">Supplier List</h2>
                <table id="suppliers-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Rating</th>
                            <th>Location</th>
                            <th>Contact</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Supplier data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="supplier-relationships-tab">
            <div class="card">
                <h2 class="card-title">Supplier-Customer Relationships</h2>
                <div class="relationship-container" id="supplier-relationships">
                    <!-- Relationship visualization will be rendered here -->
                </div>
            </div>
        </div>
        
        <div class="tab-content" id="supplier-map-tab">
            <div class="card">
                <h2 class="card-title">Supplier Locations</h2>
                <div class="filter-container">
                    <label for="customer-filter">Filter by Customer:</label>
                    <select id="customer-filter">
                        <option value="">All Customers</option>
                        <!-- Customer options will be loaded dynamically -->
                    </select>
                </div>
                <div id="supplier-map" style="height: 500px; width: 100%; margin-top: 20px;"></div>
            </div>
        </div>
    </div>
    
    <!-- Customers Page -->
    <div class="container page-content" id="customers-page">
        <h1 class="page-title">Customers</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="customer-search" placeholder="Search customers...">
            <button class="btn btn-success" id="add-customer-btn">Add Customer</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="customers-list-tab">Customers List</div>
            <div class="tab" data-tab="customer-relationships-tab">Relationships</div>
        </div>
        
        <div class="tab-content active" id="customers-list-tab">
            <div class="card">
                <h2 class="card-title">Customer List</h2>
                <table id="customers-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Industry</th>
                            <th>Location</th>
                            <th>Contact</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Customer data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="customer-relationships-tab">
            <div class="card">
                <h2 class="card-title">Customer-Supplier Relationships</h2>
                <div class="relationship-container" id="customer-relationships">
                    <!-- Relationship visualization will be rendered here -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- Inspections Page -->
    <div class="container page-content" id="inspections-page">
        <h1 class="page-title">Inspections</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="inspection-search" placeholder="Search inspections...">
            <button class="btn btn-success" id="add-inspection-btn">Schedule Inspection</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="inspections-list-tab">All Inspections</div>
            <div class="tab" data-tab="scheduled-inspections-tab">Scheduled</div>
            <div class="tab" data-tab="completed-inspections-tab">Completed</div>
        </div>
        
        <div class="tab-content active" id="inspections-list-tab">
            <div class="card">
                <h2 class="card-title">Inspection List</h2>
                <table id="inspections-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Supplier</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Inspector</th>
                            <th>Result</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Inspection data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="scheduled-inspections-tab">
            <div class="card">
                <h2 class="card-title">Scheduled Inspections</h2>
                <table id="scheduled-inspections-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Supplier</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Inspector</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Scheduled inspection data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="completed-inspections-tab">
            <div class="card">
                <h2 class="card-title">Completed Inspections</h2>
                <table id="completed-inspections-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Supplier</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Inspector</th>
                            <th>Result</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Completed inspection data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Reports Page -->
    <div class="container page-content" id="reports-page">
        <h1 class="page-title">Reports</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="report-search" placeholder="Search reports...">
            <button class="btn btn-success" id="add-report-btn">Generate New Report</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="all-reports-tab">All Reports</div>
            <div class="tab" data-tab="supplier-reports-tab">Supplier</div>
            <div class="tab" data-tab="quality-reports-tab">Quality</div>
            <div class="tab" data-tab="inspection-reports-tab">Inspection</div>
            <div class="tab" data-tab="custom-reports-tab">Custom Reports</div>
        </div>
        
        <div class="tab-content active" id="all-reports-tab">
            <div class="card">
                <h2 class="card-title">All Reports</h2>
                <table id="reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Created By</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="supplier-reports-tab">
            <div class="card">
                <h2 class="card-title">Supplier Reports</h2>
                <table id="supplier-reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Supplier report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="quality-reports-tab">
            <div class="card">
                <h2 class="card-title">Quality Reports</h2>
                <table id="quality-reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Quality report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="inspection-reports-tab">
            <div class="card">
                <h2 class="card-title">Inspection Reports</h2>
                <table id="inspection-reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Inspection report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="custom-reports-tab">
            <div class="card">
                <h2 class="card-title">Custom Reports</h2>
                <p>Create custom reports by selecting parameters below:</p>
                
                <form id="custom-report-form">
                    <div class="form-group">
                        <label for="report-type">Report Type</label>
                        <select id="report-type" required>
                            <option value="">-- Select Report Type --</option>
                            <option value="supplier">Supplier Performance</option>
                            <option value="quality">Quality Control</option>
                            <option value="inspection">Inspection Results</option>
                            <option value="customer">Customer Satisfaction</option>
                            <option value="compliance">Compliance Audit</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="report-period-type">Period Type</label>
                        <select id="report-period-type" required>
                            <option value="monthly">Monthly</option>
                            <option value="quarterly">Quarterly</option>
                            <option value="yearly">Yearly</option>
                            <option value="custom">Custom Date Range</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-month-container">
                        <label for="report-period-month">Month</label>
                        <select id="report-period-month">
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                        <select id="report-period-year">
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-quarter-container" style="display: none;">
                        <label for="report-period-quarter">Quarter</label>
                        <select id="report-period-quarter">
                            <option value="Q1">Q1 (Jan-Mar)</option>
                            <option value="Q2">Q2 (Apr-Jun)</option>
                            <option value="Q3">Q3 (Jul-Sep)</option>
                            <option value="Q4">Q4 (Oct-Dec)</option>
                        </select>
                        <select id="report-period-quarter-year">
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-year-container" style="display: none;">
                        <label for="report-period-year-only">Year</label>
                        <select id="report-period-year-only">
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-custom-container" style="display: none;">
                        <label for="report-period-start">Start Date</label>
                        <input type="date" id="report-period-start">
                        
                        <label for="report-period-end">End Date</label>
                        <input type="date" id="report-period-end">
                    </div>
                    
                    <div class="form-group">
                        <label for="report-format">Report Format</label>
                        <select id="report-format" required>
                            <option value="html">HTML (View Online)</option>
                            <option value="pdf">PDF</option>
                            <option value="excel">Excel</option>
                            <option value="csv">CSV</option>
                        </select>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn btn-success">Generate Report</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Inspectors Page -->
    <div class="container page-content" id="inspectors-page">
        <h1 class="page-title">Inspectors</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="inspector-search" placeholder="Search inspectors...">
            <button class="btn btn-success" id="add-inspector-btn">Add Inspector</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="all-inspectors-tab">All Inspectors</div>
            <div class="tab" data-tab="available-inspectors-tab">Available</div>
            <div class="tab" data-tab="assigned-inspectors-tab">Assigned</div>
            <div class="tab" data-tab="specialties-tab">Specialties</div>
        </div>
        
        <div class="tab-content active" id="all-inspectors-tab">
            <div class="inspector-grid" id="inspector-grid">
                <!-- Inspector cards will be loaded here -->
            </div>
        </div>
        
        <div class="tab-content" id="available-inspectors-tab">
            <div class="inspector-grid" id="available-inspector-grid">
                <!-- Available inspectors will be loaded here -->
            </div>
        </div>
        
        <div class="tab-content" id="assigned-inspectors-tab">
            <div class="inspector-grid" id="assigned-inspector-grid">
                <!-- Assigned inspectors will be loaded here -->
            </div>
        </div>
        
        <div class="tab-content" id="specialties-tab">
            <div class="card">
                <h2 class="card-title">Inspector Specialties</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Specialty</th>
                            <th>Description</th>
                            <th>Inspectors</th>
                        </tr>
                    </thead>
                    <tbody id="specialties-table-body">
                        <!-- Specialties will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Relationships Page -->
    <div class="container page-content" id="relationships-page">
        <h1 class="page-title">Organizational Relationships</h1>
        
        <div class="card">
            <h2 class="card-title">Customer-Supplier Network</h2>
            <p>This view shows the relationships between customers and suppliers in the AeroSuite ecosystem.</p>
            
            <div class="relationship-container" id="org-relationships">
                <!-- Relationship visualization will be rendered here -->
            </div>
        </div>
        
        <div class="card">
            <h2 class="card-title">Manage Relationships</h2>
            <form id="add-relationship-form">
                <div class="form-group">
                    <label for="relationship-customer">Customer</label>
                    <select id="relationship-customer" required>
                        <!-- Customer options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="relationship-supplier">Supplier</label>
                    <select id="relationship-supplier" required>
                        <!-- Supplier options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="relationship-type">Relationship Type</label>
                    <select id="relationship-type" required>
                        <option value="primary">Primary Supplier</option>
                        <option value="secondary">Secondary Supplier</option>
                        <option value="potential">Potential Supplier</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-success">Add Relationship</button>
                </div>
            </form>
            
            <table id="relationships-table">
                <thead>
                    <tr>
                        <th>Customer</th>
                        <th>Supplier</th>
                        <th>Type</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Relationship data will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Tasks/Kanban Page -->
    <div class="container page-content" id="tasks-page">
        <h1 class="page-title">Task Management</h1>
        
        <div class="kanban-filter-bar">
            <div class="kanban-filters">
                <div class="kanban-filter active" data-filter="all">All</div>
                <div class="kanban-filter" data-filter="inspection">Inspection</div>
                <div class="kanban-filter" data-filter="supplier">Supplier</div>
                <div class="kanban-filter" data-filter="customer">Customer</div>
                <div class="kanban-filter" data-filter="report">Report</div>
                <div class="kanban-filter" data-filter="finance">Finance</div>
                <div class="kanban-filter" data-filter="compliance">Compliance</div>
            </div>
            <button class="btn btn-success" id="add-task-btn">Add Task</button>
        </div>
        
        <div class="kanban-container">
            <div class="kanban-column" id="backlog-column">
                <div class="kanban-column-header">
                    <h3>Backlog</h3>
                    <div class="kanban-column-count" id="backlog-count">0</div>
                </div>
                <div class="kanban-column-body" id="backlog-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="backlog">
                    + Add Task
                </div>
            </div>
            
            <div class="kanban-column" id="in-progress-column">
                <div class="kanban-column-header" style="background-color: #ff9800;">
                    <h3>In Progress</h3>
                    <div class="kanban-column-count" id="in-progress-count" style="color: #ff9800;">0</div>
                </div>
                <div class="kanban-column-body" id="in-progress-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="in-progress">
                    + Add Task
                </div>
            </div>
            
            <div class="kanban-column" id="review-column">
                <div class="kanban-column-header" style="background-color: #9c27b0;">
                    <h3>Review</h3>
                    <div class="kanban-column-count" id="review-count" style="color: #9c27b0;">0</div>
                </div>
                <div class="kanban-column-body" id="review-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="review">
                    + Add Task
                </div>
            </div>
            
            <div class="kanban-column" id="done-column">
                <div class="kanban-column-header" style="background-color: #4caf50;">
                    <h3>Done</h3>
                    <div class="kanban-column-count" id="done-count" style="color: #4caf50;">0</div>
                </div>
                <div class="kanban-column-body" id="done-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="done">
                    + Add Task
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal for details -->
    <div class="modal" id="details-modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h2 id="modal-title">Details</h2>
            <div id="modal-content"></div>
        </div>
    </div>
    
    <!-- Enhanced Supplier Modal -->
    <div class="modal" id="add-supplier-modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close-btn" data-modal="add-supplier-modal">&times;</span>
                <h2>Add New Supplier</h2>
            </div>
            <div class="modal-body">
                <form id="add-supplier-form">
                    <!-- Basic Information -->
                    <div class="form-section">
                        <h3>Basic Information</h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-name">Supplier Name *</label>
                                <input type="text" id="supplier-name" required>
                            </div>
                            <div class="form-group">
                                <label for="supplier-status">Status *</label>
                                <select id="supplier-status" required>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="pending">Pending</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-rating">Rating (1-5)</label>
                                <input type="number" id="supplier-rating" min="1" max="5" step="0.1" value="4.0">
                            </div>
                            <div class="form-group">
                                <label for="supplier-email">Contact Email</label>
                                <input type="email" id="supplier-email" required>
                            </div>
                        </div>
                    </div>

                    <!-- Business Identifiers -->
                    <div class="form-section">
                        <h3>Business Identifiers</h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-duns">DUNS Number</label>
                                <input type="text" id="supplier-duns" pattern="[0-9]{9}" placeholder="123456789">
                                <small>9-digit Data Universal Numbering System identifier</small>
                            </div>
                            <div class="form-group">
                                <label for="supplier-tin">TIN/EIN</label>
                                <input type="text" id="supplier-tin" pattern="[0-9]{2}-[0-9]{7}" placeholder="12-3456789">
                                <small>Tax Identification Number</small>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-cage">CAGE Code</label>
                                <input type="text" id="supplier-cage" pattern="[0-9A-Z]{5}" placeholder="1A2B3">
                                <small>Commercial And Government Entity code</small>
                            </div>
                            <div class="form-group">
                                <label for="supplier-naics">NAICS Code</label>
                                <input type="text" id="supplier-naics" pattern="[0-9]{6}" placeholder="336411">
                                <small>Industry Classification Code</small>
                            </div>
                        </div>
                    </div>

                    <!-- Ship-To Address -->
                    <div class="form-section">
                        <h3>Ship-To Address</h3>
                        <div class="form-group">
                            <label for="supplier-ship-address1">Address Line 1</label>
                            <input type="text" id="supplier-ship-address1">
                        </div>
                        <div class="form-group">
                            <label for="supplier-ship-address2">Address Line 2</label>
                            <input type="text" id="supplier-ship-address2">
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-ship-city">City</label>
                                <input type="text" id="supplier-ship-city">
                            </div>
                            <div class="form-group">
                                <label for="supplier-ship-state">State/Province</label>
                                <input type="text" id="supplier-ship-state">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-ship-zip">ZIP/Postal Code</label>
                                <input type="text" id="supplier-ship-zip">
                            </div>
                            <div class="form-group">
                                <label for="supplier-ship-country">Country</label>
                                <select id="supplier-ship-country">
                                    <option value="US">United States</option>
                                    <option value="CA">Canada</option>
                                    <option value="MX">Mexico</option>
                                    <option value="GB">United Kingdom</option>
                                    <option value="DE">Germany</option>
                                    <option value="FR">France</option>
                                    <option value="JP">Japan</option>
                                    <option value="CN">China</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Bill-To Address -->
                    <div class="form-section">
                        <h3>Bill-To Address</h3>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="supplier-same-address"> Same as Ship-To Address
                            </label>
                        </div>
                        <div id="supplier-bill-address-section">
                            <div class="form-group">
                                <label for="supplier-bill-address1">Address Line 1</label>
                                <input type="text" id="supplier-bill-address1">
                            </div>
                            <div class="form-group">
                                <label for="supplier-bill-address2">Address Line 2</label>
                                <input type="text" id="supplier-bill-address2">
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="supplier-bill-city">City</label>
                                    <input type="text" id="supplier-bill-city">
                                </div>
                                <div class="form-group">
                                    <label for="supplier-bill-state">State/Province</label>
                                    <input type="text" id="supplier-bill-state">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="supplier-bill-zip">ZIP/Postal Code</label>
                                    <input type="text" id="supplier-bill-zip">
                                </div>
                                <div class="form-group">
                                    <label for="supplier-bill-country">Country</label>
                                    <select id="supplier-bill-country">
                                        <option value="US">United States</option>
                                        <option value="CA">Canada</option>
                                        <option value="MX">Mexico</option>
                                        <option value="GB">United Kingdom</option>
                                        <option value="DE">Germany</option>
                                        <option value="FR">France</option>
                                        <option value="JP">Japan</option>
                                        <option value="CN">China</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="btn btn-danger" data-modal="add-supplier-modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Save Supplier</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Add Customer Modal -->
    <div class="modal" id="add-customer-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-customer-modal">&times;</span>
            <h2>Add New Customer</h2>
            <form id="add-customer-form">
                <div class="form-group">
                    <label for="customer-name">Customer Name</label>
                    <input type="text" id="customer-name" required>
                </div>
                <div class="form-group">
                    <label for="customer-status">Status</label>
                    <select id="customer-status" required>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="pending">Pending</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="customer-industry">Industry</label>
                    <input type="text" id="customer-industry" required>
                </div>
                <div class="form-group">
                    <label for="customer-location">Location</label>
                    <input type="text" id="customer-location" required>
                </div>
                <div class="form-group">
                    <label for="customer-email">Contact Email</label>
                    <input type="email" id="customer-email" required>
                </div>
                <div class="form-group">
                    <label for="customer-suppliers">Associated Suppliers</label>
                    <select id="customer-suppliers" multiple>
                        <!-- Supplier options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-customer-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Customer</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add Inspection Modal -->
    <div class="modal" id="add-inspection-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-inspection-modal">&times;</span>
            <h2>Schedule New Inspection</h2>
            <form id="add-inspection-form">
                <div class="form-group">
                    <label for="inspection-supplier">Supplier</label>
                    <select id="inspection-supplier" required>
                        <!-- Supplier options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspection-type">Inspection Type</label>
                    <select id="inspection-type" required>
                        <option value="quality">Quality</option>
                        <option value="safety">Safety</option>
                        <option value="compliance">Compliance</option>
                        <option value="environmental">Environmental</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspection-date">Inspection Date</label>
                    <input type="date" id="inspection-date" required>
                </div>
                <div class="form-group">
                    <label for="inspection-inspector">Inspector</label>
                    <select id="inspection-inspector" required>
                        <!-- Inspector options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspection-notes">Notes</label>
                    <textarea id="inspection-notes" rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-inspection-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Schedule Inspection</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add Inspector Modal -->
    <div class="modal" id="add-inspector-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-inspector-modal">&times;</span>
            <h2>Add New Inspector</h2>
            <form id="add-inspector-form">
                <div class="form-group">
                    <label for="inspector-name">Full Name</label>
                    <input type="text" id="inspector-name" required>
                </div>
                <div class="form-group">
                    <label for="inspector-title">Title/Position</label>
                    <input type="text" id="inspector-title" required>
                </div>
                <div class="form-group">
                    <label for="inspector-email">Email</label>
                    <input type="email" id="inspector-email" required>
                </div>
                <div class="form-group">
                    <label for="inspector-phone">Phone</label>
                    <input type="tel" id="inspector-phone" required>
                </div>
                <div class="form-group">
                    <label for="inspector-status">Status</label>
                    <select id="inspector-status" required>
                        <option value="available">Available</option>
                        <option value="assigned">Assigned</option>
                        <option value="unavailable">Unavailable</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspector-specialties">Specialties</label>
                    <select id="inspector-specialties" multiple>
                        <option value="quality">Quality Control</option>
                        <option value="safety">Safety</option>
                        <option value="compliance">Regulatory Compliance</option>
                        <option value="environmental">Environmental</option>
                        <option value="materials">Materials Testing</option>
                        <option value="structural">Structural</option>
                        <option value="electrical">Electrical Systems</option>
                        <option value="mechanical">Mechanical Systems</option>
                    </select>
                    <small>Hold Ctrl/Cmd to select multiple</small>
                    <div class="specialty-preview" id="specialty-preview"></div>
                </div>
                <div class="form-group">
                    <label for="inspector-avatar">Avatar URL</label>
                    <input type="url" id="inspector-avatar" placeholder="https://example.com/avatar.jpg">
                    <small>Leave blank for default avatar</small>
                    <div id="avatar-preview" style="margin-top: 10px; text-align: center; display: none;">
                        <img id="avatar-preview-img" src="" alt="Avatar Preview" style="width: 100px; height: 100px; border-radius: 50%; border: 3px solid var(--primary-color);">
                    </div>
                </div>
                <div class="form-group">
                    <label for="inspector-bio">Bio/Notes</label>
                    <textarea id="inspector-bio" rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-inspector-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Inspector</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add Report Modal -->
    <div class="modal" id="add-report-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-report-modal">&times;</span>
            <h2>Generate New Report</h2>
            <form id="add-report-form" class="scrollable-form">
                <div class="form-group">
                    <label for="report-title">Report Title</label>
                    <input type="text" id="report-title" required>
                </div>
                <div class="form-group">
                    <label for="modal-report-type">Report Type</label>
                    <select id="modal-report-type" required>
                        <option value="">-- Select Report Type --</option>
                        <option value="supplier">Supplier Performance</option>
                        <option value="quality">Quality Control</option>
                        <option value="inspection">Inspection Results</option>
                        <option value="customer">Customer Satisfaction</option>
                        <option value="compliance">Compliance Audit</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="modal-report-period-type">Period Type</label>
                    <select id="modal-report-period-type" required>
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                        <option value="yearly">Yearly</option>
                        <option value="custom">Custom Date Range</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-month-container">
                    <label for="modal-report-period-month">Month</label>
                    <select id="modal-report-period-month">
                        <option value="1">January</option>
                        <option value="2">February</option>
                        <option value="3">March</option>
                        <option value="4">April</option>
                        <option value="5">May</option>
                        <option value="6">June</option>
                        <option value="7">July</option>
                        <option value="8">August</option>
                        <option value="9">September</option>
                        <option value="10">October</option>
                        <option value="11">November</option>
                        <option value="12">December</option>
                    </select>
                    <select id="modal-report-period-year">
                        <option value="2023">2023</option>
                        <option value="2022">2022</option>
                        <option value="2021">2021</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-quarter-container" style="display: none;">
                    <label for="modal-report-period-quarter">Quarter</label>
                    <select id="modal-report-period-quarter">
                        <option value="Q1">Q1 (Jan-Mar)</option>
                        <option value="Q2">Q2 (Apr-Jun)</option>
                        <option value="Q3">Q3 (Jul-Sep)</option>
                        <option value="Q4">Q4 (Oct-Dec)</option>
                    </select>
                    <select id="modal-report-period-quarter-year">
                        <option value="2023">2023</option>
                        <option value="2022">2022</option>
                        <option value="2021">2021</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-year-container" style="display: none;">
                    <label for="modal-report-period-year-only">Year</label>
                    <select id="modal-report-period-year-only">
                        <option value="2023">2023</option>
                        <option value="2022">2022</option>
                        <option value="2021">2021</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-custom-container" style="display: none;">
                    <label for="modal-report-period-start">Start Date</label>
                    <input type="date" id="modal-report-period-start">
                    
                    <label for="modal-report-period-end">End Date</label>
                    <input type="date" id="modal-report-period-end">
                </div>
                
                <div class="form-group">
                    <label for="report-description">Description</label>
                    <textarea id="report-description" rows="3" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="modal-report-format">Report Format</label>
                    <select id="modal-report-format" required>
                        <option value="html">HTML (View Online)</option>
                        <option value="pdf">PDF</option>
                        <option value="excel">Excel</option>
                        <option value="csv">CSV</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-report-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Generate Report</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- View Report Modal -->
    <div class="modal" id="view-report-modal">
        <div class="modal-content report-modal-content">
            <span class="close-btn" data-modal="view-report-modal">&times;</span>
            <h2 id="view-report-title">Report Details</h2>
            <div class="report-content-wrapper">
                <div id="report-details-container">
                    <!-- Report details will be loaded here -->
                </div>
                <div id="report-metrics-container" style="margin-top: 20px;">
                    <!-- Report metrics will be loaded here -->
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn" id="download-report-btn">Download</button>
                <button type="button" class="btn" id="print-report-btn">Print</button>
                <button type="button" class="btn" id="share-report-btn">Share</button>
                <button type="button" class="btn btn-danger" data-modal="view-report-modal">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Task Detail Modal -->
    <div class="modal" id="task-detail-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="task-detail-modal">&times;</span>
            <h2 id="task-detail-title">Task Details</h2>
            <div id="task-detail-content">
                <div class="task-detail-grid">
                    <div>
                        <h3>Description</h3>
                        <p id="task-detail-description"></p>
                        
                        <h3>Related To</h3>
                        <p id="task-detail-related"></p>
                    </div>
                    <div>
                        <h3>Details</h3>
                        <table>
                            <tr>
                                <td><strong>Status:</strong></td>
                                <td id="task-detail-status"></td>
                            </tr>
                            <tr>
                                <td><strong>Priority:</strong></td>
                                <td id="task-detail-priority"></td>
                            </tr>
                            <tr>
                                <td><strong>Category:</strong></td>
                                <td id="task-detail-category"></td>
                            </tr>
                            <tr>
                                <td><strong>Assignee:</strong></td>
                                <td id="task-detail-assignee"></td>
                            </tr>
                            <tr>
                                <td><strong>Due Date:</strong></td>
                                <td id="task-detail-due-date"></td>
                            </tr>
                            <tr>
                                <td><strong>Created Date:</strong></td>
                                <td id="task-detail-created-date"></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn" id="edit-task-btn">Edit</button>
                <button type="button" class="btn btn-danger" id="delete-task-btn">Delete</button>
                <button type="button" class="btn btn-danger" data-modal="task-detail-modal">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Add/Edit Task Modal -->
    <div class="modal" id="add-task-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-task-modal">&times;</span>
            <h2 id="task-modal-title">Add New Task</h2>
            <form id="task-form">
                <input type="hidden" id="task-id">
                <div class="form-group">
                    <label for="task-title">Title</label>
                    <input type="text" id="task-title" required>
                </div>
                <div class="form-group">
                    <label for="task-description">Description</label>
                    <textarea id="task-description" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="task-status">Status</label>
                    <select id="task-status" required>
                        <option value="backlog">Backlog</option>
                        <option value="in-progress">In Progress</option>
                        <option value="review">Review</option>
                        <option value="done">Done</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-priority">Priority</label>
                    <select id="task-priority" required>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-category">Category</label>
                    <select id="task-category" required>
                        <option value="inspection">Inspection</option>
                        <option value="supplier">Supplier</option>
                        <option value="customer">Customer</option>
                        <option value="report">Report</option>
                        <option value="finance">Finance</option>
                        <option value="compliance">Compliance</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-assignee">Assignee</label>
                    <select id="task-assignee" required>
                        <option value="John Smith">John Smith</option>
                        <option value="Sarah Johnson">Sarah Johnson</option>
                        <option value="Michael Brown">Michael Brown</option>
                        <option value="Emily Wilson">Emily Wilson</option>
                        <option value="Robert Davis">Robert Davis</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-due-date">Due Date</label>
                    <input type="date" id="task-due-date" required>
                </div>
                <div class="form-group">
                    <label for="task-related-type">Related To</label>
                    <select id="task-related-type">
                        <option value="">None</option>
                        <option value="supplier">Supplier</option>
                        <option value="customer">Customer</option>
                        <option value="inspection">Inspection</option>
                        <option value="report">Report</option>
                    </select>
                </div>
                <div class="form-group" id="task-related-id-container" style="display: none;">
                    <label for="task-related-id">Select Related Item</label>
                    <select id="task-related-id">
                        <!-- Options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-task-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Task</button>
                </div>
            </form>
        </div>
    </div>
    
    <div class="footer">
        © 2023 AeroSuite - Advanced Aerospace Supply Chain Management
    </div>

    <script>
        // Global data storage
        const appData = {
            suppliers: [],
            customers: [],
            inspections: [],
            relationships: [],
            inspectors: [],
            reports: [],
            specialties: [
                { id: 'quality', name: 'Quality Control', description: 'Expertise in quality assurance and control processes' },
                { id: 'safety', name: 'Safety', description: 'Specializes in safety regulations and compliance' },
                { id: 'compliance', name: 'Regulatory Compliance', description: 'Expert in aerospace regulatory requirements' },
                { id: 'environmental', name: 'Environmental', description: 'Focuses on environmental impact assessment' },
                { id: 'materials', name: 'Materials Testing', description: 'Specializes in material properties and testing' },
                { id: 'structural', name: 'Structural', description: 'Expert in structural integrity and analysis' },
                { id: 'electrical', name: 'Electrical Systems', description: 'Specializes in electrical systems and components' },
                { id: 'mechanical', name: 'Mechanical Systems', description: 'Expert in mechanical systems and components' }
            ]
        };
        
        // Load data from API
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Check API health
                const healthResponse = await fetch('/api/health');
                const healthData = await healthResponse.json();
                console.log('API Status:', healthData);
                
                // Load all data
                await loadSuppliers();
                await loadCustomers();
                await loadInspections();
                await loadInspectors();
                await loadReports();
                await loadTasks();
                
                // Create sample relationships (since API doesn't have this yet)
                createSampleRelationships();
                
                // Set up navigation first
                setupNavigation();
                
                // Get the current page from hash or default to dashboard
                const currentHash = window.location.hash || '#dashboard';
                const currentPageId = currentHash === '#dashboard' ? 'dashboard-page' : currentHash.substring(1) + '-page';
                
                // Activate the current page
                document.querySelectorAll('.nav-link').forEach(link => {
                    if (link.getAttribute('href') === currentHash) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
                
                document.querySelectorAll('.page-content').forEach(page => {
                    if (page.id === currentPageId) {
                        page.classList.add('active');
                        // Initialize tabs on the active page
                        initializePageTabs(page);
                    } else {
                        page.classList.remove('active');
                    }
                });
                
                // Only update dashboard metrics if we're on the dashboard page
                if (currentPageId === 'dashboard-page') {
                    updateDashboardMetrics();
                }
                
                // Set up tabs
                setupTabs();
                
                // Set up modals
                setupModals();
                
                // Set up modal detail views
                setupModal();
                
                // Set up forms
                setupForms();
                
                // Set up search functionality
                setupSearch();
                
                // Render relationships
                renderRelationships();
                
                // Set up metric links (for static metrics that don't get updated by updateDashboardMetrics)
                setupMetricLinks();
                
                // Notifications functionality
                setupNotifications();
            } catch (error) {
                console.error('Error connecting to API:', error);
            }
        });
        
        async function loadSuppliers() {
            try {
                const response = await fetch('/api/suppliers');
                const data = await response.json();
                appData.suppliers = data.data;
                
                // Update suppliers table
                updateSuppliersTable();
                
                // Update supplier dropdowns
                updateSupplierDropdowns();
            } catch (error) {
                console.error('Error loading suppliers:', error);
            }
        }
        
        function updateSuppliersTable() {
            const tableBody = document.querySelector('#suppliers-table tbody');
            tableBody.innerHTML = '';
            
            appData.suppliers.forEach(supplier => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${supplier.name}</td>
                    <td><span class="status status-${supplier.status}">${supplier.status}</span></td>
                    <td>${supplier.rating}</td>
                    <td>${supplier.location}</td>
                    <td>${supplier.contactEmail}</td>
                    <td>
                        <button class="btn" data-action="view" data-type="supplier" data-id="${supplier.id}">View</button>
                        <button class="btn" data-action="edit" data-type="supplier" data-id="${supplier.id}">Edit</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        function updateSupplierDropdowns() {
            // Update all supplier dropdowns in the application
            const dropdowns = document.querySelectorAll('select[id*="supplier"], #inspection-supplier, #customer-suppliers, #relationship-supplier');
            
            dropdowns.forEach(dropdown => {
                // Save the currently selected value
                const currentValue = dropdown.value;
                
                // Clear existing options except the first one if it's a placeholder
                const firstOption = dropdown.querySelector('option:first-child');
                const hasPlaceholder = firstOption && (!firstOption.value || firstOption.value === '');
                
                dropdown.innerHTML = '';
                
                if (hasPlaceholder) {
                    dropdown.appendChild(firstOption);
                }
                
                // Add supplier options
                appData.suppliers.forEach(supplier => {
                    const option = document.createElement('option');
                    option.value = supplier.id;
                    option.textContent = supplier.name;
                    dropdown.appendChild(option);
                });
                
                // Restore the selected value if it still exists
                if (currentValue) {
                    dropdown.value = currentValue;
                }
            });
        }
        
        async function loadCustomers() {
            try {
                const response = await fetch('/api/customers');
                const data = await response.json();
                appData.customers = data.data;
                
                // Update customers table
                updateCustomersTable();
                
                // Update customer dropdowns
                updateCustomerDropdowns();
            } catch (error) {
                console.error('Error loading customers:', error);
            }
        }
        
        function updateCustomersTable() {
            const tableBody = document.querySelector('#customers-table tbody');
            tableBody.innerHTML = '';
            
            appData.customers.forEach(customer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${customer.name}</td>
                    <td><span class="status status-${customer.status}">${customer.status}</span></td>
                    <td>${customer.industry}</td>
                    <td>${customer.location}</td>
                    <td>${customer.contactEmail}</td>
                    <td>
                        <button class="btn" data-action="view" data-type="customer" data-id="${customer.id}">View</button>
                        <button class="btn" data-action="edit" data-type="customer" data-id="${customer.id}">Edit</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        function updateCustomerDropdowns() {
            // Update all customer dropdowns in the application
            const dropdowns = document.querySelectorAll('select[id*="customer"], #relationship-customer, #customer-filter');
            
            dropdowns.forEach(dropdown => {
                // Save the currently selected value
                const currentValue = dropdown.value;
                
                // Clear existing options except the first one if it's a placeholder
                const firstOption = dropdown.querySelector('option:first-child');
                const hasPlaceholder = firstOption && (!firstOption.value || firstOption.value === '');
                
                dropdown.innerHTML = '';
                
                if (hasPlaceholder) {
                    dropdown.appendChild(firstOption);
                }
                
                // Add customer options
                appData.customers.forEach(customer => {
                    const option = document.createElement('option');
                    option.value = customer.id;
                    option.textContent = customer.name;
                    dropdown.appendChild(option);
                });
                
                // Restore the selected value if it still exists
                if (currentValue) {
                    dropdown.value = currentValue;
                }
            });
        }
        
        async function loadInspections() {
            try {
                const response = await fetch('/api/inspections');
                const data = await response.json();
                appData.inspections = data.data;
                
                // Update inspections tables
                updateInspectionsTables();
            } catch (error) {
                console.error('Error loading inspections:', error);
            }
        }
        
        function updateInspectionsTables() {
            // Update main inspections table
            const mainTableBody = document.querySelector('#inspections-table tbody');
            mainTableBody.innerHTML = '';
            
            // Update scheduled inspections table
            const scheduledTableBody = document.querySelector('#scheduled-inspections-table tbody');
            scheduledTableBody.innerHTML = '';
            
            // Update completed inspections table
            const completedTableBody = document.querySelector('#completed-inspections-table tbody');
            completedTableBody.innerHTML = '';
            
            appData.inspections.forEach(inspection => {
                // Find supplier name
                const supplier = appData.suppliers.find(s => s.id === inspection.supplierId);
                const supplierName = supplier ? supplier.name : 'Unknown';
                
                // Create row for main table
                const mainRow = document.createElement('tr');
                mainRow.innerHTML = `
                    <td>${inspection.id}</td>
                    <td>${supplierName}</td>
                    <td>${inspection.type}</td>
                    <td><span class="status status-${inspection.status}">${inspection.status}</span></td>
                    <td>${new Date(inspection.date).toLocaleDateString()}</td>
                    <td>${inspection.inspector}</td>
                    <td>${inspection.result}</td>
                    <td>
                        <button class="btn" data-action="view" data-type="inspection" data-id="${inspection.id}">View</button>
                        <button class="btn" data-action="edit" data-type="inspection" data-id="${inspection.id}">Edit</button>
                    </td>
                `;
                mainTableBody.appendChild(mainRow);
                
                // Add to appropriate status table
                if (inspection.status === 'scheduled') {
                    const scheduledRow = document.createElement('tr');
                    scheduledRow.innerHTML = `
                        <td>${inspection.id}</td>
                        <td>${supplierName}</td>
                        <td>${inspection.type}</td>
                        <td>${new Date(inspection.date).toLocaleDateString()}</td>
                        <td>${inspection.inspector}</td>
                        <td>
                            <button class="btn" data-action="complete" data-type="inspection" data-id="${inspection.id}">Complete</button>
                            <button class="btn" data-action="cancel" data-type="inspection" data-id="${inspection.id}">Cancel</button>
                        </td>
                    `;
                    scheduledTableBody.appendChild(scheduledRow);
                } else if (inspection.status === 'completed') {
                    const completedRow = document.createElement('tr');
                    completedRow.innerHTML = `
                        <td>${inspection.id}</td>
                        <td>${supplierName}</td>
                        <td>${inspection.type}</td>
                        <td>${new Date(inspection.date).toLocaleDateString()}</td>
                        <td>${inspection.inspector}</td>
                        <td>${inspection.result}</td>
                        <td>
                            <button class="btn" data-action="view" data-type="inspection" data-id="${inspection.id}">View Report</button>
                        </td>
                    `;
                    completedTableBody.appendChild(completedRow);
                }
            });
        }
        
        function createSampleRelationships() {
            try {
                // Try to load relationships from API first
                fetch('/api/relationships')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.data) {
                            appData.relationships = data.data;
                        } else {
                            // Fallback to sample relationships
                            appData.relationships = [
                                { id: '1', customerId: '1', supplierId: '1', type: 'primary' },
                                { id: '2', customerId: '1', supplierId: '2', type: 'secondary' },
                                { id: '3', customerId: '2', supplierId: '1', type: 'secondary' },
                                { id: '4', customerId: '2', supplierId: '2', type: 'primary' }
                            ];
                        }
                        
                        // Update relationships table
                        updateRelationshipsTable();
                        
                        // Render relationship visualizations
                        renderRelationships();
                    })
                    .catch(error => {
                        console.error('Error loading relationships:', error);
                        // Fallback to sample relationships
                        appData.relationships = [
                            { id: '1', customerId: '1', supplierId: '1', type: 'primary' },
                            { id: '2', customerId: '1', supplierId: '2', type: 'secondary' },
                            { id: '3', customerId: '2', supplierId: '1', type: 'secondary' },
                            { id: '4', customerId: '2', supplierId: '2', type: 'primary' }
                        ];
                        
                        // Update relationships table
                        updateRelationshipsTable();
                        
                        // Render relationship visualizations
                        renderRelationships();
                    });
            } catch (error) {
                console.error('Error loading relationships:', error);
                // Fallback to sample relationships
                appData.relationships = [
                    { id: '1', customerId: '1', supplierId: '1', type: 'primary' },
                    { id: '2', customerId: '1', supplierId: '2', type: 'secondary' },
                    { id: '3', customerId: '2', supplierId: '1', type: 'secondary' },
                    { id: '4', customerId: '2', supplierId: '2', type: 'primary' }
                ];
                
                // Update relationships table
                updateRelationshipsTable();
                
                // Render relationship visualizations
                renderRelationships();
            }
        }
        
        function updateRelationshipsTable() {
            const tableBody = document.querySelector('#relationships-table tbody');
            tableBody.innerHTML = '';
            
            appData.relationships.forEach(relationship => {
                const customer = appData.customers.find(c => c.id === relationship.customerId);
                const supplier = appData.suppliers.find(s => s.id === relationship.supplierId);
                
                if (customer && supplier) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${customer.name}</td>
                        <td>${supplier.name}</td>
                        <td>${relationship.type}</td>
                        <td>
                            <button class="btn btn-danger" data-action="delete" data-type="relationship" data-id="${relationship.id}">Remove</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                }
            });
        }
        
        function renderRelationships() {
            // Render relationships in the relationships page
            const container = document.getElementById('org-relationships');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (appData.relationships.length === 0) {
                container.innerHTML = '<p>No relationships defined yet. Use the form below to add relationships between customers and suppliers.</p>';
                return;
            }
            
            // Group by customer
            const customerGroups = {};
            
            appData.relationships.forEach(rel => {
                if (!customerGroups[rel.customerId]) {
                    customerGroups[rel.customerId] = [];
                }
                customerGroups[rel.customerId].push(rel);
            });
            
            // Create visualization
            for (const customerId in customerGroups) {
                const customer = appData.customers.find(c => c.id === customerId);
                if (customer) {
                    const relationshipGroup = document.createElement('div');
                    relationshipGroup.style.display = 'flex';
                    relationshipGroup.style.flexDirection = 'column';
                    relationshipGroup.style.marginBottom = '20px';
                    relationshipGroup.style.width = '100%';
                    
                    const customerNode = document.createElement('div');
                    customerNode.classList.add('relationship-node', 'node-customer');
                    customerNode.textContent = customer.name;
                    relationshipGroup.appendChild(customerNode);
                    
                    const suppliersContainer = document.createElement('div');
                    suppliersContainer.style.display = 'flex';
                    suppliersContainer.style.flexWrap = 'wrap';
                    suppliersContainer.style.marginTop = '10px';
                    suppliersContainer.style.marginLeft = '30px';
                    
                    customerGroups[customerId].forEach(rel => {
                        const supplier = appData.suppliers.find(s => s.id === rel.supplierId);
                        if (supplier) {
                            const supplierGroup = document.createElement('div');
                            supplierGroup.style.display = 'flex';
                            supplierGroup.style.alignItems = 'center';
                            supplierGroup.style.margin = '5px 10px';
                            
                            const line = document.createElement('div');
                            line.classList.add('relationship-line');
                            supplierGroup.appendChild(line);
                            
                            const supplierNode = document.createElement('div');
                            supplierNode.classList.add('relationship-node', 'node-supplier');
                            supplierNode.textContent = supplier.name;
                            supplierGroup.appendChild(supplierNode);
                            
                            // Add relationship type indicator
                            const relationshipType = document.createElement('div');
                            relationshipType.style.fontSize = '0.8rem';
                            relationshipType.style.fontStyle = 'italic';
                            relationshipType.style.marginLeft = '10px';
                            relationshipType.textContent = `(${rel.type})`;
                            supplierGroup.appendChild(relationshipType);
                            
                            suppliersContainer.appendChild(supplierGroup);
                        }
                    });
                    
                    relationshipGroup.appendChild(suppliersContainer);
                    container.appendChild(relationshipGroup);
                    
                    container.appendChild(document.createElement('hr'));
                }
            }
            
            // Also render in supplier and customer relationship tabs
            renderSupplierRelationships();
            renderCustomerRelationships();
        }
        
        function renderSupplierRelationships() {
            const container = document.getElementById('supplier-relationships');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (appData.relationships.length === 0) {
                container.innerHTML = '<p>No supplier relationships defined yet.</p>';
                return;
            }
            
            // Group by supplier
            const supplierGroups = {};
            
            appData.relationships.forEach(rel => {
                if (!supplierGroups[rel.supplierId]) {
                    supplierGroups[rel.supplierId] = [];
                }
                supplierGroups[rel.supplierId].push(rel);
            });
            
            // Create visualization
            for (const supplierId in supplierGroups) {
                const supplier = appData.suppliers.find(s => s.id === supplierId);
                if (supplier) {
                    const relationshipGroup = document.createElement('div');
                    relationshipGroup.style.display = 'flex';
                    relationshipGroup.style.flexDirection = 'column';
                    relationshipGroup.style.marginBottom = '20px';
                    relationshipGroup.style.width = '100%';
                    
                    const supplierNode = document.createElement('div');
                    supplierNode.classList.add('relationship-node', 'node-supplier');
                    supplierNode.textContent = supplier.name;
                    relationshipGroup.appendChild(supplierNode);
                    
                    const customersContainer = document.createElement('div');
                    customersContainer.style.display = 'flex';
                    customersContainer.style.flexWrap = 'wrap';
                    customersContainer.style.marginTop = '10px';
                    customersContainer.style.marginLeft = '30px';
                    
                    supplierGroups[supplierId].forEach(rel => {
                        const customer = appData.customers.find(c => c.id === rel.customerId);
                        if (customer) {
                            const customerGroup = document.createElement('div');
                            customerGroup.style.display = 'flex';
                            customerGroup.style.alignItems = 'center';
                            customerGroup.style.margin = '5px 10px';
                            
                            const line = document.createElement('div');
                            line.classList.add('relationship-line');
                            customerGroup.appendChild(line);
                            
                            const customerNode = document.createElement('div');
                            customerNode.classList.add('relationship-node', 'node-customer');
                            customerNode.textContent = customer.name;
                            customerGroup.appendChild(customerNode);
                            
                            // Add relationship type indicator
                            const relationshipType = document.createElement('div');
                            relationshipType.style.fontSize = '0.8rem';
                            relationshipType.style.fontStyle = 'italic';
                            relationshipType.style.marginLeft = '10px';
                            relationshipType.textContent = `(${rel.type})`;
                            customerGroup.appendChild(relationshipType);
                            
                            customersContainer.appendChild(customerGroup);
                        }
                    });
                    
                    relationshipGroup.appendChild(customersContainer);
                    container.appendChild(relationshipGroup);
                    
                    container.appendChild(document.createElement('hr'));
                }
            }
        }
        
        function renderCustomerRelationships() {
            const container = document.getElementById('customer-relationships');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (appData.relationships.length === 0) {
                container.innerHTML = '<p>No customer relationships defined yet.</p>';
                return;
            }
            
            // Group by customer
            const customerGroups = {};
            
            appData.relationships.forEach(rel => {
                if (!customerGroups[rel.customerId]) {
                    customerGroups[rel.customerId] = [];
                }
                customerGroups[rel.customerId].push(rel);
            });
            
            // Create visualization
            for (const customerId in customerGroups) {
                const customer = appData.customers.find(c => c.id === customerId);
                if (customer) {
                    const relationshipGroup = document.createElement('div');
                    relationshipGroup.style.display = 'flex';
                    relationshipGroup.style.flexDirection = 'column';
                    relationshipGroup.style.marginBottom = '20px';
                    relationshipGroup.style.width = '100%';
                    
                    const customerNode = document.createElement('div');
                    customerNode.classList.add('relationship-node', 'node-customer');
                    customerNode.textContent = customer.name;
                    relationshipGroup.appendChild(customerNode);
                    
                    const suppliersContainer = document.createElement('div');
                    suppliersContainer.style.display = 'flex';
                    suppliersContainer.style.flexWrap = 'wrap';
                    suppliersContainer.style.marginTop = '10px';
                    suppliersContainer.style.marginLeft = '30px';
                    
                    customerGroups[customerId].forEach(rel => {
                        const supplier = appData.suppliers.find(s => s.id === rel.supplierId);
                        if (supplier) {
                            const supplierGroup = document.createElement('div');
                            supplierGroup.style.display = 'flex';
                            supplierGroup.style.alignItems = 'center';
                            supplierGroup.style.margin = '5px 10px';
                            
                            const line = document.createElement('div');
                            line.classList.add('relationship-line');
                            supplierGroup.appendChild(line);
                            
                            const supplierNode = document.createElement('div');
                            supplierNode.classList.add('relationship-node', 'node-supplier');
                            supplierNode.textContent = supplier.name;
                            supplierGroup.appendChild(supplierNode);
                            
                            // Add relationship type indicator
                            const relationshipType = document.createElement('div');
                            relationshipType.style.fontSize = '0.8rem';
                            relationshipType.style.fontStyle = 'italic';
                            relationshipType.style.marginLeft = '10px';
                            relationshipType.textContent = `(${rel.type})`;
                            supplierGroup.appendChild(relationshipType);
                            
                            suppliersContainer.appendChild(supplierGroup);
                        }
                    });
                    
                    relationshipGroup.appendChild(suppliersContainer);
                    container.appendChild(relationshipGroup);
                    
                    container.appendChild(document.createElement('hr'));
                }
            }
        }
        
        function updateDashboardMetrics() {
            // Supplier metrics
            document.getElementById('supplier-count').innerHTML = `<a href="#suppliers" class="metric-link" data-page="suppliers-page">${appData.suppliers.length}</a>`;
            
            const avgRating = appData.suppliers.reduce((sum, s) => sum + s.rating, 0) / appData.suppliers.length;
            document.getElementById('avg-rating').innerHTML = `<a href="#suppliers" class="metric-link" data-page="suppliers-page">${avgRating.toFixed(1)}</a>`;
            
            const activeSuppliers = appData.suppliers.filter(s => s.status === 'active').length;
            document.getElementById('active-suppliers').innerHTML = `<a href="#suppliers" class="metric-link" data-page="suppliers-page" data-filter="active">${activeSuppliers}</a>`;
            
            // Inspection metrics
            document.getElementById('inspection-count').innerHTML = `<a href="#inspections" class="metric-link" data-page="inspections-page">${appData.inspections.length}</a>`;
            
            const completedInspections = appData.inspections.filter(i => i.status === 'completed').length;
            document.getElementById('completed-inspections').innerHTML = `<a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="completed-inspections-tab">${completedInspections}</a>`;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AeroSuite - Dashboard</title>
    <style>
        :root {
            /* Primary color palette - more sophisticated blue */
            --primary-color: #2563eb;
            --primary-light: #3b82f6;
            --primary-dark: #1d4ed8;
            --primary-contrast: #ffffff;
            
            /* Secondary color palette */
            --secondary-color: #0ea5e9;
            --secondary-light: #38bdf8;
            --secondary-dark: #0284c7;
            
            /* Accent colors */
            --accent-green: #10b981;
            --accent-red: #ef4444;
            --accent-yellow: #f59e0b;
            --accent-purple: #8b5cf6;
            
            /* Neutral colors */
            --text-primary: #1e293b;
            --text-secondary: #475569;
            --text-tertiary: #64748b;
            --light-bg: #f8fafc;
            --card-bg: #ffffff;
            --border-color: #e2e8f0;
            
            /* Status colors */
            --status-success-bg: #ecfdf5;
            --status-success-text: #065f46;
            --status-warning-bg: #fffbeb;
            --status-warning-text: #92400e;
            --status-danger-bg: #fef2f2;
            --status-danger-text: #b91c1c;
            --status-info-bg: #eff6ff;
            --status-info-text: #1e40af;
            
            /* Spacing system */
            --space-xs: 0.25rem;
            --space-sm: 0.5rem;
            --space-md: 1rem;
            --space-lg: 1.5rem;
            --space-xl: 2rem;
            --space-2xl: 3rem;
            
            /* UI elements */
            --border-radius-sm: 0.25rem;
            --border-radius: 0.5rem;
            --border-radius-lg: 0.75rem;
            --border-radius-xl: 1rem;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            
            /* Typography */
            --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            --font-size-xs: 0.75rem;
            --font-size-sm: 0.875rem;
            --font-size-base: 1rem;
            --font-size-lg: 1.125rem;
            --font-size-xl: 1.25rem;
            --font-size-2xl: 1.5rem;
            --font-size-3xl: 1.875rem;
            --font-size-4xl: 2.25rem;
            
            /* Transitions */
            --transition-fast: 150ms ease;
            --transition-normal: 250ms ease;
            --transition-slow: 350ms ease;
            
            /* Z-index system */
            --z-index-dropdown: 10;
            --z-index-sticky: 20;
            --z-index-fixed: 30;
            --z-index-modal-backdrop: 40;
            --z-index-modal: 50;
            --z-index-popover: 60;
            --z-index-tooltip: 70;
        }
        
        /* Base styles */
        *, *::before, *::after {
            box-sizing: border-box;
        }
        
        html {
            font-size: 16px;
            scroll-behavior: smooth;
        }
        
        body {
            font-family: var(--font-family);
            margin: 0;
            padding: 0;
            background-color: var(--light-bg);
            color: var(--text-primary);
            line-height: 1.5;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        h1, h2, h3, h4, h5, h6 {
            margin-top: 0;
            font-weight: 600;
            line-height: 1.2;
            color: var(--text-primary);
        }
        
        p {
            margin-top: 0;
            margin-bottom: var(--space-md);
        }
        
        a {
            color: var(--primary-color);
            text-decoration: none;
            transition: color var(--transition-fast);
        }
        
        a:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        /* Header and navigation */
        .header {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
            padding: var(--space-md) var(--space-xl);
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: var(--z-index-sticky);
        }
        
        .logo {
            font-weight: 700;
            font-size: var(--font-size-xl);
            margin-right: var(--space-xl);
            letter-spacing: -0.025em;
            display: flex;
            align-items: center;
        }
        
        .logo::before {
            content: '';
            display: inline-block;
            width: 24px;
            height: 24px;
            background-color: var(--primary-contrast);
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5'/%3E%3C/svg%3E");
            mask-size: contain;
            mask-repeat: no-repeat;
            margin-right: var(--space-sm);
        }
        
        .nav {
            display: flex;
            flex-grow: 1;
            gap: var(--space-sm);
        }
        
        .nav-link {
            color: rgba(255, 255, 255, 0.85);
            text-decoration: none;
            padding: var(--space-sm) var(--space-md);
            border-radius: var(--border-radius);
            transition: all var(--transition-fast);
            font-weight: 500;
            position: relative;
        }
        
        .nav-link:hover {
            color: var(--primary-contrast);
            background-color: rgba(255, 255, 255, 0.1);
            text-decoration: none;
        }
        
        .nav-link.active {
            color: var(--primary-contrast);
            background-color: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }
        
        .nav-link.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: var(--space-md);
            right: var(--space-md);
            height: 2px;
            background-color: var(--primary-contrast);
            border-radius: 2px;
        }
        
        .header-actions {
            display: flex;
            align-items: center;
            gap: var(--space-md);
        }
        
        /* Notifications */
        .notifications-dropdown {
            position: relative;
        }
        
        .notifications-btn {
            background: none;
            border: none;
            color: var(--primary-contrast);
            cursor: pointer;
            position: relative;
            font-size: var(--font-size-xl);
            padding: var(--space-xs);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            transition: background-color var(--transition-fast);
        }
        
        .notifications-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .notification-icon {
            font-style: normal;
        }
        
        .notification-badge {
            position: absolute;
            top: 0;
            right: 0;
            background-color: var(--accent-red);
            color: white;
            border-radius: 50%;
            min-width: 18px;
            height: 18px;
            font-size: var(--font-size-xs);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            border: 2px solid var(--primary-color);
        }
        
        .notifications-dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            top: calc(100% + 8px);
            background-color: var(--card-bg);
            min-width: 350px;
            max-width: 400px;
            box-shadow: var(--shadow-lg);
            z-index: var(--z-index-dropdown);
            border-radius: var(--border-radius);
            overflow: hidden;
            border: 1px solid var(--border-color);
            animation: fadeIn 0.2s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .notifications-dropdown-content.show {
            display: block;
        }
        
        .notifications-dropdown-content::before {
            content: '';
            position: absolute;
            top: -8px;
            right: 16px;
            width: 16px;
            height: 16px;
            background-color: var(--card-bg);
            transform: rotate(45deg);
            border-top: 1px solid var(--border-color);
            border-left: 1px solid var(--border-color);
        }
        
        .notifications-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--space-md) var(--space-lg);
            background-color: var(--light-bg);
            border-bottom: 1px solid var(--border-color);
        }
        
        .notifications-header h3 {
            margin: 0;
            font-size: var(--font-size-base);
            font-weight: 600;
        }
        
        .mark-all-read-btn {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            font-size: var(--font-size-sm);
            padding: var(--space-xs);
            font-weight: 500;
            transition: color var(--transition-fast);
        }
        
        .mark-all-read-btn:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        .notifications-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .notification-item {
            padding: var(--space-md) var(--space-lg);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: flex-start;
            transition: background-color var(--transition-fast);
            cursor: pointer;
        }
        
        .notification-item:hover {
            background-color: var(--light-bg);
        }
        
        .notification-item.unread {
            background-color: rgba(37, 99, 235, 0.05);
        }
        
        .notification-icon-wrapper {
            margin-right: var(--space-md);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: var(--status-info-bg);
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .notification-icon-wrapper.warning {
            background-color: var(--status-warning-bg);
            color: var(--accent-yellow);
        }
        
        .notification-icon-wrapper.danger {
            background-color: var(--status-danger-bg);
            color: var(--accent-red);
        }
        
        .notification-icon-wrapper.success {
            background-color: var(--status-success-bg);
            color: var(--accent-green);
        }
        
        .notification-content {
            flex-grow: 1;
        }
        
        .notification-title {
            font-weight: 600;
            margin-bottom: var(--space-xs);
            font-size: var(--font-size-sm);
            color: var(--text-primary);
        }
        
        .notification-message {
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            margin-bottom: var(--space-xs);
            line-height: 1.4;
        }
        
        .notification-time {
            font-size: var(--font-size-xs);
            color: var(--text-tertiary);
        }
        
        .user-menu {
            color: var(--primary-contrast);
            cursor: pointer;
            padding: var(--space-xs) var(--space-md);
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            font-weight: 500;
            transition: background-color var(--transition-fast);
        }
        
        .user-menu:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .user-menu::before {
            content: '';
            display: inline-block;
            width: 24px;
            height: 24px;
            background-color: var(--primary-contrast);
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='12' cy='7' r='4'/%3E%3C/svg%3E");
            mask-size: contain;
            mask-repeat: no-repeat;
            margin-right: var(--space-sm);
        }
        
        /* Main layout */
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: var(--space-lg);
        }
        
        /* Special container for Kanban page */
        #tasks-page.container {
            max-width: 1400px;
        }
        
        .page-title {
            font-size: var(--font-size-2xl);
            margin: 0 0 var(--space-lg);
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
        }
        
        .page-title::before {
            content: '';
            display: inline-block;
            width: 28px;
            height: 28px;
            background-color: var(--primary-color);
            mask-size: contain;
            mask-repeat: no-repeat;
            margin-right: var(--space-sm);
        }
        
        #dashboard-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='3' width='7' height='7'/%3E%3Crect x='14' y='3' width='7' height='7'/%3E%3Crect x='14' y='14' width='7' height='7'/%3E%3Crect x='3' y='14' width='7' height='7'/%3E%3C/svg%3E");
        }
        
        #suppliers-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2'/%3E%3Crect x='8' y='2' width='8' height='4' rx='1' ry='1'/%3E%3Cpath d='M9 14h6'/%3E%3Cpath d='M9 10h6'/%3E%3Cpath d='M9 18h6'/%3E%3C/svg%3E");
        }
        
        #customers-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='9' cy='7' r='4'/%3E%3Cpath d='M23 21v-2a4 4 0 0 0-3-3.87'/%3E%3Cpath d='M16 3.13a4 4 0 0 1 0 7.75'/%3E%3C/svg%3E");
        }
        
        #tasks-page .page-title::before {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M9 11l3 3L22 4'/%3E%3Cpath d='M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11'/%3E%3C/svg%3E");
        }
        
        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: var(--space-lg);
            margin-bottom: var(--space-xl);
        }
        
        .card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: var(--space-lg);
            transition: transform var(--transition-normal), box-shadow var(--transition-normal);
            border: 1px solid var(--border-color);
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }
        
        .card-title {
            font-size: var(--font-size-lg);
            margin-top: 0;
            margin-bottom: var(--space-md);
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: var(--space-xs);
        }
        
        .card-content {
            margin-bottom: var(--space-md);
            flex-grow: 1;
        }
        
        .card-footer {
            margin-top: auto;
            display: flex;
            justify-content: flex-end;
        }
        
        /* Metrics */
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: var(--space-md);
            margin-bottom: var(--space-lg);
        }
        
        /* Hide metrics on non-dashboard pages */
        .page-content:not(#dashboard-page) .metrics {
            display: none !important;
        }
        
        .metric {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: var(--space-md);
            text-align: center;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            transition: transform var(--transition-fast), box-shadow var(--transition-fast);
        }
        
        .metric:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }
        
        .metric-value {
            font-size: var(--font-size-2xl);
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: var(--space-xs);
            line-height: 1;
        }
        
        .metric-label {
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            font-weight: 500;
        }
        
        .metric-link {
            color: var(--primary-color);
            text-decoration: none;
            cursor: pointer;
            transition: color var(--transition-fast);
        }
        
        .metric-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        .btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            background-color: var(--primary-dark);
        }
        
        .footer {
            text-align: center;
            padding: var(--space-lg);
            background-color: #1e293b;
            color: #f8fafc;
            margin-top: var(--space-2xl);
            font-size: var(--font-size-sm);
        }
        
        .page-content {
            display: none;
        }
        
        .page-content.active {
            display: block;
        }
        
        /* Tables */
        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            overflow: hidden;
        }
        
        table th, table td {
            padding: var(--space-md);
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }
        
        table th {
            background-color: var(--light-bg);
            font-weight: 600;
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        table tr:last-child td {
            border-bottom: none;
        }
        
        table tr:hover td {
            background-color: rgba(0, 0, 0, 0.01);
        }
        
        table td {
            transition: background-color var(--transition-fast);
        }
        
        /* Status badges */
        .status {
            padding: var(--space-xs) var(--space-sm);
            border-radius: 1rem;
            font-size: var(--font-size-xs);
            display: inline-flex;
            align-items: center;
            font-weight: 500;
            line-height: 1;
            gap: 4px;
        }
        
        .status::before {
            content: '';
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        
        .status-active {
            background-color: var(--status-success-bg);
            color: var(--status-success-text);
        }
        
        .status-active::before {
            background-color: var(--accent-green);
        }
        
        .status-pending {
            background-color: var(--status-warning-bg);
            color: var(--status-warning-text);
        }
        
        .status-pending::before {
            background-color: var(--accent-yellow);
        }
        
        .status-completed {
            background-color: var(--status-info-bg);
            color: var(--status-info-text);
        }
        
        .status-completed::before {
            background-color: var(--secondary-color);
        }
        
        .status-inactive {
            background-color: var(--status-danger-bg);
            color: var(--status-danger-text);
        }
        
        .status-inactive::before {
            background-color: var(--accent-red);
        }
        
        /* Modals */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: var(--z-index-modal-backdrop);
            overflow-y: auto;
            backdrop-filter: blur(4px);
            animation: fadeIn 0.2s ease;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            width: 90%;
            max-width: 600px;
            margin: 5vh auto;
            padding: var(--space-xl);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-xl);
            position: relative;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(-30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .report-modal-content {
            max-width: 800px;
        }
        
        .report-content-wrapper {
            max-height: 60vh;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        @media (max-width: 768px) {
            .report-modal-content {
                max-width: 100%;
                padding: 1rem;
            }
            
            .report-content-wrapper {
                max-height: 50vh;
            }
        }
        
        .close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            cursor: pointer;
            font-size: 1.2rem;
            z-index: 10;
        }
        
        /* Form styles */
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .form-actions {
            margin-top: 1.5rem;
            display: flex;
            justify-content: flex-end;
        }
        
        .form-actions .btn {
            margin-left: 0.5rem;
        }
        
        .btn-success {
            background-color: #4caf50;
        }
        
        .btn-success:hover {
            background-color: #45a049;
        }
        
        .btn-danger {
            background-color: #f44336;
        }
        
        .btn-danger:hover {
            background-color: #d32f2f;
        }
        
        /* Relationship graph styles */
        .relationship-container {
            margin-top: 2rem;
            border: 1px solid #ddd;
            padding: 1rem;
            border-radius: var(--border-radius);
            background-color: #fff;
            overflow: auto;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        
        .relationship-node {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            margin: 0.5rem;
            color: white;
            font-weight: bold;
            min-width: 150px;
            text-align: center;
        }
        
        .node-supplier {
            background-color: var(--primary-color);
        }
        
        .node-customer {
            background-color: #4caf50;
        }
        
        .relationship-line {
            display: inline-block;
            width: 50px;
            height: 2px;
            background-color: #666;
            margin: 0 0.5rem;
            vertical-align: middle;
        }
        
        .action-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .search-box {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 250px;
        }
        
        .tab-content {
            margin-top: 1rem;
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 1rem;
            overflow-x: auto; /* Allow horizontal scrolling on small screens */
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
        }
        
        .tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-right: 0.5rem;
            white-space: nowrap; /* Prevent text wrapping */
            transition: background-color 0.2s ease;
        }
        
        .tab:hover {
            background-color: rgba(25, 118, 210, 0.05);
        }
        
        .tab.active {
            border-color: #ddd;
            border-bottom-color: white;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
            margin-bottom: -1px;
            background-color: white;
            position: relative;
        }
        
        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: white;
        }
        
        /* Inspector styles */
        .inspector-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        
        .inspector-card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: transform 0.2s, box-shadow 0.2s;
            position: relative;
        }
        
        .inspector-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .inspector-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .inspector-card:hover .inspector-actions {
            opacity: 1;
        }
        
        .inspector-action-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.2s;
        }
        
        .inspector-action-btn:hover {
            background-color: var(--primary-dark);
        }
        
        .inspector-action-btn.edit {
            background-color: #4caf50;
        }
        
        .inspector-action-btn.edit:hover {
            background-color: #45a049;
        }
        
        .inspector-status-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 15px;
            height: 15px;
            border-radius: 50%;
        }
        
        .inspector-status-indicator.available {
            background-color: #4caf50;
            box-shadow: 0 0 5px #4caf50;
        }
        
        .inspector-status-indicator.assigned {
            background-color: #ff9800;
            box-shadow: 0 0 5px #ff9800;
        }
        
        .inspector-status-indicator.unavailable {
            background-color: #f44336;
            box-shadow: 0 0 5px #f44336;
        }
        
        .inspector-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 1rem;
            border: 3px solid var(--primary-color);
        }
        
        .inspector-name {
            font-size: 1.2rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }
        
        .inspector-title {
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .inspector-stats {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin: 1rem 0;
            padding-top: 1rem;
            border-top: 1px solid #eee;
        }
        
        .inspector-stat {
            text-align: center;
            flex: 1;
        }
        
        .inspector-stat-value {
            font-weight: bold;
            color: var(--primary-color);
        }
        
        .inspector-stat-label {
            font-size: 0.8rem;
            color: #666;
        }
        
        .inspector-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            margin: 0.25rem;
            background-color: #e6f7ed;
            color: #0c6b3d;
        }
        
        .inspector-contact {
            margin-top: 1rem;
            width: 100%;
            display: flex;
            justify-content: space-around;
        }
        
        .inspector-contact a {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 0.9rem;
        }
        
        .inspector-contact a:hover {
            text-decoration: underline;
        }
        
        .specialty-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }
        
        .specialty-tag {
            background-color: #e6f7ed;
            color: #0c6b3d;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 12px;
        }
        
        /* Responsive modal adjustments */
        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 3vh auto;
                padding: 1.5rem;
            }
            
            .scrollable-form {
                max-height: 80vh;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .form-actions .btn {
                margin-left: 0;
                margin-top: 0.5rem;
                width: 100%;
            }
        }
        
        .btn-success {
            background-color: #4caf50;
        }
        
        /* Map styles */
        .filter-container {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
        }
        
        .filter-container label {
            margin-right: 1rem;
            font-weight: bold;
        }
        
        .filter-container select {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-width: 200px;
        }
        
        .map-marker-info {
            padding: 10px;
            max-width: 300px;
        }
        
        .map-marker-info h3 {
            margin-top: 0;
            color: var(--primary-color);
        }
        
        .map-marker-info p {
            margin: 5px 0;
        }
        
        .map-marker-info .status {
            display: inline-block;
            margin-top: 5px;
        }
        
        .map-legend {
            position: absolute;
            bottom: 30px;
            right: 10px;
            background-color: white;
            padding: 10px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            z-index: 5;
            max-width: 200px;
        }
        
        .map-legend h4 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 14px;
            text-align: center;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .legend-marker {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            margin-right: 8px;
            border: 1px solid #fff;
            box-shadow: 0 0 2px rgba(0,0,0,0.3);
        }
        
        .legend-label {
            display: inline-block;
            width: 15px;
            height: 15px;
            background-color: #1976d2;
            color: white;
            text-align: center;
            line-height: 15px;
            font-size: 10px;
            font-weight: bold;
            margin-right: 8px;
            border-radius: 2px;
        }
        
        /* Kanban board styles */
        .kanban-container {
            display: flex;
            gap: 1rem;
            overflow-x: auto;
            padding-bottom: 1rem;
            min-height: 600px;
            height: calc(100vh - 250px);
            width: 100%;
            min-width: 1200px;
        }
        
        .kanban-column {
            flex: 1;
            min-width: 280px;
            background-color: var(--light-bg);
            border-radius: var(--border-radius);
            display: flex;
            flex-direction: column;
            height: 100%;
            max-height: 100%;
        }
        
        .kanban-column-header {
            padding: 1rem;
            background-color: var(--primary-color);
            color: white;
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1;
        }
        
        .kanban-column-header h3 {
            margin: 0;
            font-size: 1rem;
        }
        
        .kanban-column-count {
            background-color: white;
            color: var(--primary-color);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.8rem;
        }
        
        .kanban-column-body {
            padding: 1rem;
            flex: 1;
            overflow-y: auto;
            max-height: calc(100% - 60px);
        }
        
        .kanban-task {
            background-color: white;
            border-radius: var(--border-radius);
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            box-shadow: var(--shadow);
            cursor: grab;
            position: relative;
            border-left: 4px solid;
        }
        
        .kanban-task:active {
            cursor: grabbing;
        }
        
        .kanban-task-title {
            font-weight: bold;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }
        
        .kanban-task-description {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 1rem;
        }
        
        .kanban-task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: #666;
        }
        
        .kanban-task-assignee {
            display: flex;
            align-items: center;
        }
        
        .kanban-task-assignee-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.5rem;
            font-size: 0.8rem;
        }
        
        .kanban-task-due {
            display: flex;
            align-items: center;
        }
        
        .kanban-task-priority {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        
        .priority-high {
            background-color: #f44336;
        }
        
        .priority-medium {
            background-color: #ff9800;
        }
        
        .priority-low {
            background-color: #4caf50;
        }
        
        .kanban-task[data-category="inspection"] {
            border-left-color: #9c27b0;
        }
        
        .kanban-task[data-category="supplier"] {
            border-left-color: #2196f3;
        }
        
        .kanban-task[data-category="customer"] {
            border-left-color: #4caf50;
        }
        
        .kanban-task[data-category="report"] {
            border-left-color: #ff9800;
        }
        
        .kanban-task[data-category="finance"] {
            border-left-color: #607d8b;
        }
        
        .kanban-task[data-category="compliance"] {
            border-left-color: #f44336;
        }
        
        .kanban-add-task {
            background-color: rgba(25, 118, 210, 0.1);
            border: 2px dashed var(--primary-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.2s;
            margin: 1rem;
            position: sticky;
            bottom: 0;
            z-index: 1;
        }
        
        .kanban-add-task:hover {
            background-color: rgba(25, 118, 210, 0.2);
        }
        
        .kanban-filter-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .kanban-filters {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .kanban-filter {
            padding: 0.25rem 0.5rem;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 0.9rem;
            cursor: pointer;
        }
        
        .kanban-filter.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .task-detail-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        @media (max-width: 768px) {
            .task-detail-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .kanban-task-actions {
            position: absolute;
            top: 8px;
            right: 8px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.2s;
        }
        
        .kanban-task:hover .kanban-task-actions {
            opacity: 1;
        }
        
        .kanban-task-action {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.2s;
        }
        
        .kanban-task-action:hover {
            background-color: rgba(0, 0, 0, 0.2);
        }
        
        .kanban-task.highlight {
            animation: highlight-pulse 2s ease-out;
            box-shadow: 0 0 0 2px var(--primary-color);
        }
        
        @keyframes highlight-pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(25, 118, 210, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(25, 118, 210, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(25, 118, 210, 0);
            }
        }
        
        /* Kanban filter styles */
        /* Buttons */
        .btn {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
            border: none;
            padding: var(--space-sm) var(--space-lg);
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: var(--font-size-sm);
            font-weight: 500;
            transition: all var(--transition-fast);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-xs);
            line-height: 1.5;
        }
        
        .btn:hover {
            background-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-sm);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn:disabled {
            background-color: #cbd5e1;
            color: #64748b;
            cursor: not-allowed;
        }
        
        .btn-success {
            background-color: var(--accent-green);
        }
        
        .btn-success:hover {
            background-color: #059669;
        }
        
        .btn-warning {
            background-color: var(--accent-yellow);
        }
        
        .btn-warning:hover {
            background-color: #d97706;
        }
        
        .btn-danger {
            background-color: var(--accent-red);
        }
        
        .btn-danger:hover {
            background-color: #dc2626;
        }
        
        .btn-outline {
            background-color: transparent;
            color: var(--primary-color);
            border: 1px solid var(--primary-color);
        }
        
        .btn-outline:hover {
            background-color: var(--primary-color);
            color: var(--primary-contrast);
        }
        
        .btn-sm {
            padding: var(--space-xs) var(--space-sm);
            font-size: var(--font-size-xs);
        }
        
        .btn-lg {
            padding: var(--space-md) var(--space-xl);
            font-size: var(--font-size-base);
        }
        
        .btn-icon {
            padding: var(--space-xs);
            width: 36px;
            height: 36px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: var(--space-lg);
            overflow-x: auto;
            scrollbar-width: thin;
            gap: var(--space-xs);
        }
        
        .tab {
            padding: var(--space-md) var(--space-lg);
            cursor: pointer;
            border-bottom: 2px solid transparent;
            color: var(--text-secondary);
            font-weight: 500;
            transition: all var(--transition-fast);
            white-space: nowrap;
        }
        
        .tab:hover {
            color: var(--primary-color);
            border-bottom-color: var(--border-color);
        }
        
        .tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Forms */
        .form-group {
            margin-bottom: var(--space-md);
        }
        
        label {
            display: block;
            margin-bottom: var(--space-xs);
            font-weight: 500;
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
        }
        
        input[type="text"],
        input[type="email"],
        input[type="password"],
        input[type="number"],
        input[type="date"],
        input[type="tel"],
        select,
        textarea {
            width: 100%;
            padding: var(--space-sm) var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: var(--font-size-sm);
            line-height: 1.5;
            color: var(--text-primary);
            transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
            background-color: var(--card-bg);
        }
        
        input:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        
        input::placeholder {
            color: var(--text-tertiary);
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: var(--space-md);
            margin-top: var(--space-lg);
        }
        
        /* Search box */
        .search-box {
            padding: var(--space-sm) var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: var(--font-size-sm);
            width: 300px;
            background-color: var(--card-bg);
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'/%3E%3Cline x1='21' y1='21' x2='16.65' y2='16.65'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: 12px center;
            padding-left: 40px;
            transition: all var(--transition-fast);
        }
        
        .search-box:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            width: 350px;
        }
        
        /* Action bar */
        .action-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-lg);
            flex-wrap: wrap;
            gap: var(--space-md);
        }
    </style>
    <!-- Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3qlqoHZJzltrdOrw99Rfa-DV4QWA60O0&callback=initMap" async defer></script>
</head>
<body>
    <div class="header">
        <div class="logo">AeroSuite</div>
        <nav class="nav">
            <a href="#dashboard" class="active nav-link" data-page="dashboard-page">Dashboard</a>
            <a href="#suppliers" class="nav-link" data-page="suppliers-page">Suppliers</a>
            <a href="#customers" class="nav-link" data-page="customers-page">Customers</a>
            <a href="#inspections" class="nav-link" data-page="inspections-page">Inspections</a>
            <a href="#inspectors" class="nav-link" data-page="inspectors-page">Inspectors</a>
            <a href="#relationships" class="nav-link" data-page="relationships-page">Relationships</a>
            <a href="#tasks" class="nav-link" data-page="tasks-page">Tasks</a>
            <a href="#reports" class="nav-link" data-page="reports-page">Reports</a>
        </nav>
        <div class="header-actions">
            <div class="notifications-dropdown">
                <button class="notifications-btn" id="notifications-btn">
                    <i class="notification-icon">🔔</i>
                    <span class="notification-badge" id="notification-count">0</span>
                </button>
                <div class="notifications-dropdown-content" id="notifications-dropdown">
                    <div class="notifications-header">
                        <h3>Notifications</h3>
                        <button class="mark-all-read-btn" id="mark-all-read">Mark all as read</button>
                    </div>
                    <div class="notifications-list" id="notifications-list">
                        <!-- Notifications will be loaded here -->
                    </div>
                </div>
            </div>
            <div class="user-menu">
                <span>Admin</span>
            </div>
        </div>
    </div>
    
    <!-- Dashboard Page -->
    <div class="container page-content active" id="dashboard-page">
        <h1 class="page-title">Dashboard</h1>
        
        <div class="card-grid">
            <div class="card">
                <h2 class="card-title">Supplier Performance</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value" id="supplier-count">-</div>
                            <div class="metric-label">Suppliers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="avg-rating">-</div>
                            <div class="metric-label">Avg Rating</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="active-suppliers">-</div>
                            <div class="metric-label">Active</div>
                        </div>
                    </div>
                    <p>Track and analyze supplier performance metrics.</p>
                </div>
                <button class="btn" id="supplier-details-btn">View Details</button>
            </div>
            
            <div class="card">
                <h2 class="card-title">Inspection Status</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value" id="inspection-count">-</div>
                            <div class="metric-label">Total</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="completed-inspections">-</div>
                            <div class="metric-label">Completed</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value" id="scheduled-inspections">-</div>
                            <div class="metric-label">Scheduled</div>
                        </div>
                    </div>
                    <p>Monitor ongoing and completed inspections.</p>
                </div>
                <button class="btn" id="inspection-details-btn">View Details</button>
            </div>
            
            <div class="card">
                <h2 class="card-title">Customer Orders</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value" id="customer-count">-</div>
                            <div class="metric-label">Customers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#customers" class="metric-link" data-page="customers-page" data-filter="order">2</a>
                            </div>
                            <div class="metric-label">Orders</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#customers" class="metric-link" data-page="customers-page" data-filter="pending">1</a>
                            </div>
                            <div class="metric-label">Pending</div>
                        </div>
                    </div>
                    <p>Track customer orders and delivery status.</p>
                </div>
                <button class="btn" id="customer-details-btn">View Details</button>
            </div>
            
            <div class="card">
                <h2 class="card-title">Quality Metrics</h2>
                <div class="card-content">
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-filter="passed">98%</a>
                            </div>
                            <div class="metric-label">Pass Rate</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="completed-inspections-tab">3</a>
                            </div>
                            <div class="metric-label">Issues</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-filter="critical">1</a>
                            </div>
                            <div class="metric-label">Critical</div>
                        </div>
                    </div>
                    <p>Review quality control metrics and trends.</p>
                </div>
                <button class="btn" id="quality-details-btn">View Details</button>
            </div>
        </div>
    </div>
    
    <!-- Suppliers Page -->
    <div class="container page-content" id="suppliers-page">
        <h1 class="page-title">Suppliers</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="supplier-search" placeholder="Search suppliers...">
            <button class="btn btn-success" id="add-supplier-btn">Add Supplier</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="suppliers-list-tab">Suppliers List</div>
            <div class="tab" data-tab="supplier-relationships-tab">Relationships</div>
            <div class="tab" data-tab="supplier-map-tab">Location Map</div>
        </div>
        
        <div class="tab-content active" id="suppliers-list-tab">
            <div class="card">
                <h2 class="card-title">Supplier List</h2>
                <table id="suppliers-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Rating</th>
                            <th>Location</th>
                            <th>Contact</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Supplier data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="supplier-relationships-tab">
            <div class="card">
                <h2 class="card-title">Supplier-Customer Relationships</h2>
                <div class="relationship-container" id="supplier-relationships">
                    <!-- Relationship visualization will be rendered here -->
                </div>
            </div>
        </div>
        
        <div class="tab-content" id="supplier-map-tab">
            <div class="card">
                <h2 class="card-title">Supplier Locations</h2>
                <div class="filter-container">
                    <label for="customer-filter">Filter by Customer:</label>
                    <select id="customer-filter">
                        <option value="">All Customers</option>
                        <!-- Customer options will be loaded dynamically -->
                    </select>
                </div>
                <div id="supplier-map" style="height: 500px; width: 100%; margin-top: 20px;"></div>
            </div>
        </div>
    </div>
    
    <!-- Customers Page -->
    <div class="container page-content" id="customers-page">
        <h1 class="page-title">Customers</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="customer-search" placeholder="Search customers...">
            <button class="btn btn-success" id="add-customer-btn">Add Customer</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="customers-list-tab">Customers List</div>
            <div class="tab" data-tab="customer-relationships-tab">Relationships</div>
        </div>
        
        <div class="tab-content active" id="customers-list-tab">
            <div class="card">
                <h2 class="card-title">Customer List</h2>
                <table id="customers-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Industry</th>
                            <th>Location</th>
                            <th>Contact</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Customer data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="customer-relationships-tab">
            <div class="card">
                <h2 class="card-title">Customer-Supplier Relationships</h2>
                <div class="relationship-container" id="customer-relationships">
                    <!-- Relationship visualization will be rendered here -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- Inspections Page -->
    <div class="container page-content" id="inspections-page">
        <h1 class="page-title">Inspections</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="inspection-search" placeholder="Search inspections...">
            <button class="btn btn-success" id="add-inspection-btn">Schedule Inspection</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="inspections-list-tab">All Inspections</div>
            <div class="tab" data-tab="scheduled-inspections-tab">Scheduled</div>
            <div class="tab" data-tab="completed-inspections-tab">Completed</div>
        </div>
        
        <div class="tab-content active" id="inspections-list-tab">
            <div class="card">
                <h2 class="card-title">Inspection List</h2>
                <table id="inspections-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Supplier</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Inspector</th>
                            <th>Result</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Inspection data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="scheduled-inspections-tab">
            <div class="card">
                <h2 class="card-title">Scheduled Inspections</h2>
                <table id="scheduled-inspections-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Supplier</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Inspector</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Scheduled inspection data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="completed-inspections-tab">
            <div class="card">
                <h2 class="card-title">Completed Inspections</h2>
                <table id="completed-inspections-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Supplier</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Inspector</th>
                            <th>Result</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Completed inspection data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Reports Page -->
    <div class="container page-content" id="reports-page">
        <h1 class="page-title">Reports</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="report-search" placeholder="Search reports...">
            <button class="btn btn-success" id="add-report-btn">Generate New Report</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="all-reports-tab">All Reports</div>
            <div class="tab" data-tab="supplier-reports-tab">Supplier</div>
            <div class="tab" data-tab="quality-reports-tab">Quality</div>
            <div class="tab" data-tab="inspection-reports-tab">Inspection</div>
            <div class="tab" data-tab="custom-reports-tab">Custom Reports</div>
        </div>
        
        <div class="tab-content active" id="all-reports-tab">
            <div class="card">
                <h2 class="card-title">All Reports</h2>
                <table id="reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Created By</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="supplier-reports-tab">
            <div class="card">
                <h2 class="card-title">Supplier Reports</h2>
                <table id="supplier-reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Supplier report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="quality-reports-tab">
            <div class="card">
                <h2 class="card-title">Quality Reports</h2>
                <table id="quality-reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Quality report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="inspection-reports-tab">
            <div class="card">
                <h2 class="card-title">Inspection Reports</h2>
                <table id="inspection-reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Period</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Inspection report data will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="custom-reports-tab">
            <div class="card">
                <h2 class="card-title">Custom Reports</h2>
                <p>Create custom reports by selecting parameters below:</p>
                
                <form id="custom-report-form">
                    <div class="form-group">
                        <label for="report-type">Report Type</label>
                        <select id="report-type" required>
                            <option value="">-- Select Report Type --</option>
                            <option value="supplier">Supplier Performance</option>
                            <option value="quality">Quality Control</option>
                            <option value="inspection">Inspection Results</option>
                            <option value="customer">Customer Satisfaction</option>
                            <option value="compliance">Compliance Audit</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="report-period-type">Period Type</label>
                        <select id="report-period-type" required>
                            <option value="monthly">Monthly</option>
                            <option value="quarterly">Quarterly</option>
                            <option value="yearly">Yearly</option>
                            <option value="custom">Custom Date Range</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-month-container">
                        <label for="report-period-month">Month</label>
                        <select id="report-period-month">
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                        <select id="report-period-year">
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-quarter-container" style="display: none;">
                        <label for="report-period-quarter">Quarter</label>
                        <select id="report-period-quarter">
                            <option value="Q1">Q1 (Jan-Mar)</option>
                            <option value="Q2">Q2 (Apr-Jun)</option>
                            <option value="Q3">Q3 (Jul-Sep)</option>
                            <option value="Q4">Q4 (Oct-Dec)</option>
                        </select>
                        <select id="report-period-quarter-year">
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-year-container" style="display: none;">
                        <label for="report-period-year-only">Year</label>
                        <select id="report-period-year-only">
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    
                    <div class="form-group" id="period-custom-container" style="display: none;">
                        <label for="report-period-start">Start Date</label>
                        <input type="date" id="report-period-start">
                        
                        <label for="report-period-end">End Date</label>
                        <input type="date" id="report-period-end">
                    </div>
                    
                    <div class="form-group">
                        <label for="report-format">Report Format</label>
                        <select id="report-format" required>
                            <option value="html">HTML (View Online)</option>
                            <option value="pdf">PDF</option>
                            <option value="excel">Excel</option>
                            <option value="csv">CSV</option>
                        </select>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn btn-success">Generate Report</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Inspectors Page -->
    <div class="container page-content" id="inspectors-page">
        <h1 class="page-title">Inspectors</h1>
        
        <div class="action-bar">
            <input type="text" class="search-box" id="inspector-search" placeholder="Search inspectors...">
            <button class="btn btn-success" id="add-inspector-btn">Add Inspector</button>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="all-inspectors-tab">All Inspectors</div>
            <div class="tab" data-tab="available-inspectors-tab">Available</div>
            <div class="tab" data-tab="assigned-inspectors-tab">Assigned</div>
            <div class="tab" data-tab="specialties-tab">Specialties</div>
        </div>
        
        <div class="tab-content active" id="all-inspectors-tab">
            <div class="inspector-grid" id="inspector-grid">
                <!-- Inspector cards will be loaded here -->
            </div>
        </div>
        
        <div class="tab-content" id="available-inspectors-tab">
            <div class="inspector-grid" id="available-inspector-grid">
                <!-- Available inspectors will be loaded here -->
            </div>
        </div>
        
        <div class="tab-content" id="assigned-inspectors-tab">
            <div class="inspector-grid" id="assigned-inspector-grid">
                <!-- Assigned inspectors will be loaded here -->
            </div>
        </div>
        
        <div class="tab-content" id="specialties-tab">
            <div class="card">
                <h2 class="card-title">Inspector Specialties</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Specialty</th>
                            <th>Description</th>
                            <th>Inspectors</th>
                        </tr>
                    </thead>
                    <tbody id="specialties-table-body">
                        <!-- Specialties will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Relationships Page -->
    <div class="container page-content" id="relationships-page">
        <h1 class="page-title">Organizational Relationships</h1>
        
        <div class="card">
            <h2 class="card-title">Customer-Supplier Network</h2>
            <p>This view shows the relationships between customers and suppliers in the AeroSuite ecosystem.</p>
            
            <div class="relationship-container" id="org-relationships">
                <!-- Relationship visualization will be rendered here -->
            </div>
        </div>
        
        <div class="card">
            <h2 class="card-title">Manage Relationships</h2>
            <form id="add-relationship-form">
                <div class="form-group">
                    <label for="relationship-customer">Customer</label>
                    <select id="relationship-customer" required>
                        <!-- Customer options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="relationship-supplier">Supplier</label>
                    <select id="relationship-supplier" required>
                        <!-- Supplier options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="relationship-type">Relationship Type</label>
                    <select id="relationship-type" required>
                        <option value="primary">Primary Supplier</option>
                        <option value="secondary">Secondary Supplier</option>
                        <option value="potential">Potential Supplier</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-success">Add Relationship</button>
                </div>
            </form>
            
            <table id="relationships-table">
                <thead>
                    <tr>
                        <th>Customer</th>
                        <th>Supplier</th>
                        <th>Type</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Relationship data will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Tasks/Kanban Page -->
    <div class="container page-content" id="tasks-page">
        <h1 class="page-title">Task Management</h1>
        
        <div class="kanban-filter-bar">
            <div class="kanban-filters">
                <div class="kanban-filter active" data-filter="all">All</div>
                <div class="kanban-filter" data-filter="inspection">Inspection</div>
                <div class="kanban-filter" data-filter="supplier">Supplier</div>
                <div class="kanban-filter" data-filter="customer">Customer</div>
                <div class="kanban-filter" data-filter="report">Report</div>
                <div class="kanban-filter" data-filter="finance">Finance</div>
                <div class="kanban-filter" data-filter="compliance">Compliance</div>
            </div>
            <button class="btn btn-success" id="add-task-btn">Add Task</button>
        </div>
        
        <div class="kanban-container">
            <div class="kanban-column" id="backlog-column">
                <div class="kanban-column-header">
                    <h3>Backlog</h3>
                    <div class="kanban-column-count" id="backlog-count">0</div>
                </div>
                <div class="kanban-column-body" id="backlog-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="backlog">
                    + Add Task
                </div>
            </div>
            
            <div class="kanban-column" id="in-progress-column">
                <div class="kanban-column-header" style="background-color: #ff9800;">
                    <h3>In Progress</h3>
                    <div class="kanban-column-count" id="in-progress-count" style="color: #ff9800;">0</div>
                </div>
                <div class="kanban-column-body" id="in-progress-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="in-progress">
                    + Add Task
                </div>
            </div>
            
            <div class="kanban-column" id="review-column">
                <div class="kanban-column-header" style="background-color: #9c27b0;">
                    <h3>Review</h3>
                    <div class="kanban-column-count" id="review-count" style="color: #9c27b0;">0</div>
                </div>
                <div class="kanban-column-body" id="review-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="review">
                    + Add Task
                </div>
            </div>
            
            <div class="kanban-column" id="done-column">
                <div class="kanban-column-header" style="background-color: #4caf50;">
                    <h3>Done</h3>
                    <div class="kanban-column-count" id="done-count" style="color: #4caf50;">0</div>
                </div>
                <div class="kanban-column-body" id="done-tasks">
                    <!-- Tasks will be loaded here -->
                </div>
                <div class="kanban-add-task" data-status="done">
                    + Add Task
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal for details -->
    <div class="modal" id="details-modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h2 id="modal-title">Details</h2>
            <div id="modal-content"></div>
        </div>
    </div>
    
    <!-- Enhanced Supplier Modal -->
    <div class="modal" id="add-supplier-modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close-btn" data-modal="add-supplier-modal">&times;</span>
                <h2>Add New Supplier</h2>
            </div>
            <div class="modal-body">
                <form id="add-supplier-form">
                    <!-- Basic Information -->
                    <div class="form-section">
                        <h3>Basic Information</h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-name">Supplier Name *</label>
                                <input type="text" id="supplier-name" required>
                            </div>
                            <div class="form-group">
                                <label for="supplier-status">Status *</label>
                                <select id="supplier-status" required>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="pending">Pending</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-rating">Rating (1-5)</label>
                                <input type="number" id="supplier-rating" min="1" max="5" step="0.1" value="4.0">
                            </div>
                            <div class="form-group">
                                <label for="supplier-email">Contact Email</label>
                                <input type="email" id="supplier-email" required>
                            </div>
                        </div>
                    </div>

                    <!-- Business Identifiers -->
                    <div class="form-section">
                        <h3>Business Identifiers</h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-duns">DUNS Number</label>
                                <input type="text" id="supplier-duns" pattern="[0-9]{9}" placeholder="123456789">
                                <small>9-digit Data Universal Numbering System identifier</small>
                            </div>
                            <div class="form-group">
                                <label for="supplier-tin">TIN/EIN</label>
                                <input type="text" id="supplier-tin" pattern="[0-9]{2}-[0-9]{7}" placeholder="12-3456789">
                                <small>Tax Identification Number</small>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-cage">CAGE Code</label>
                                <input type="text" id="supplier-cage" pattern="[0-9A-Z]{5}" placeholder="1A2B3">
                                <small>Commercial And Government Entity code</small>
                            </div>
                            <div class="form-group">
                                <label for="supplier-naics">NAICS Code</label>
                                <input type="text" id="supplier-naics" pattern="[0-9]{6}" placeholder="336411">
                                <small>Industry Classification Code</small>
                            </div>
                        </div>
                    </div>

                    <!-- Ship-To Address -->
                    <div class="form-section">
                        <h3>Ship-To Address</h3>
                        <div class="form-group">
                            <label for="supplier-ship-address1">Address Line 1</label>
                            <input type="text" id="supplier-ship-address1">
                        </div>
                        <div class="form-group">
                            <label for="supplier-ship-address2">Address Line 2</label>
                            <input type="text" id="supplier-ship-address2">
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-ship-city">City</label>
                                <input type="text" id="supplier-ship-city">
                            </div>
                            <div class="form-group">
                                <label for="supplier-ship-state">State/Province</label>
                                <input type="text" id="supplier-ship-state">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="supplier-ship-zip">ZIP/Postal Code</label>
                                <input type="text" id="supplier-ship-zip">
                            </div>
                            <div class="form-group">
                                <label for="supplier-ship-country">Country</label>
                                <select id="supplier-ship-country">
                                    <option value="US">United States</option>
                                    <option value="CA">Canada</option>
                                    <option value="MX">Mexico</option>
                                    <option value="GB">United Kingdom</option>
                                    <option value="DE">Germany</option>
                                    <option value="FR">France</option>
                                    <option value="JP">Japan</option>
                                    <option value="CN">China</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Bill-To Address -->
                    <div class="form-section">
                        <h3>Bill-To Address</h3>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="supplier-same-address"> Same as Ship-To Address
                            </label>
                        </div>
                        <div id="supplier-bill-address-section">
                            <div class="form-group">
                                <label for="supplier-bill-address1">Address Line 1</label>
                                <input type="text" id="supplier-bill-address1">
                            </div>
                            <div class="form-group">
                                <label for="supplier-bill-address2">Address Line 2</label>
                                <input type="text" id="supplier-bill-address2">
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="supplier-bill-city">City</label>
                                    <input type="text" id="supplier-bill-city">
                                </div>
                                <div class="form-group">
                                    <label for="supplier-bill-state">State/Province</label>
                                    <input type="text" id="supplier-bill-state">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="supplier-bill-zip">ZIP/Postal Code</label>
                                    <input type="text" id="supplier-bill-zip">
                                </div>
                                <div class="form-group">
                                    <label for="supplier-bill-country">Country</label>
                                    <select id="supplier-bill-country">
                                        <option value="US">United States</option>
                                        <option value="CA">Canada</option>
                                        <option value="MX">Mexico</option>
                                        <option value="GB">United Kingdom</option>
                                        <option value="DE">Germany</option>
                                        <option value="FR">France</option>
                                        <option value="JP">Japan</option>
                                        <option value="CN">China</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="btn btn-danger" data-modal="add-supplier-modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Save Supplier</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Add Customer Modal -->
    <div class="modal" id="add-customer-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-customer-modal">&times;</span>
            <h2>Add New Customer</h2>
            <form id="add-customer-form">
                <div class="form-group">
                    <label for="customer-name">Customer Name</label>
                    <input type="text" id="customer-name" required>
                </div>
                <div class="form-group">
                    <label for="customer-status">Status</label>
                    <select id="customer-status" required>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="pending">Pending</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="customer-industry">Industry</label>
                    <input type="text" id="customer-industry" required>
                </div>
                <div class="form-group">
                    <label for="customer-location">Location</label>
                    <input type="text" id="customer-location" required>
                </div>
                <div class="form-group">
                    <label for="customer-email">Contact Email</label>
                    <input type="email" id="customer-email" required>
                </div>
                <div class="form-group">
                    <label for="customer-suppliers">Associated Suppliers</label>
                    <select id="customer-suppliers" multiple>
                        <!-- Supplier options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-customer-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Customer</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add Inspection Modal -->
    <div class="modal" id="add-inspection-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-inspection-modal">&times;</span>
            <h2>Schedule New Inspection</h2>
            <form id="add-inspection-form">
                <div class="form-group">
                    <label for="inspection-supplier">Supplier</label>
                    <select id="inspection-supplier" required>
                        <!-- Supplier options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspection-type">Inspection Type</label>
                    <select id="inspection-type" required>
                        <option value="quality">Quality</option>
                        <option value="safety">Safety</option>
                        <option value="compliance">Compliance</option>
                        <option value="environmental">Environmental</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspection-date">Inspection Date</label>
                    <input type="date" id="inspection-date" required>
                </div>
                <div class="form-group">
                    <label for="inspection-inspector">Inspector</label>
                    <select id="inspection-inspector" required>
                        <!-- Inspector options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspection-notes">Notes</label>
                    <textarea id="inspection-notes" rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-inspection-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Schedule Inspection</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add Inspector Modal -->
    <div class="modal" id="add-inspector-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-inspector-modal">&times;</span>
            <h2>Add New Inspector</h2>
            <form id="add-inspector-form">
                <div class="form-group">
                    <label for="inspector-name">Full Name</label>
                    <input type="text" id="inspector-name" required>
                </div>
                <div class="form-group">
                    <label for="inspector-title">Title/Position</label>
                    <input type="text" id="inspector-title" required>
                </div>
                <div class="form-group">
                    <label for="inspector-email">Email</label>
                    <input type="email" id="inspector-email" required>
                </div>
                <div class="form-group">
                    <label for="inspector-phone">Phone</label>
                    <input type="tel" id="inspector-phone" required>
                </div>
                <div class="form-group">
                    <label for="inspector-status">Status</label>
                    <select id="inspector-status" required>
                        <option value="available">Available</option>
                        <option value="assigned">Assigned</option>
                        <option value="unavailable">Unavailable</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="inspector-specialties">Specialties</label>
                    <select id="inspector-specialties" multiple>
                        <option value="quality">Quality Control</option>
                        <option value="safety">Safety</option>
                        <option value="compliance">Regulatory Compliance</option>
                        <option value="environmental">Environmental</option>
                        <option value="materials">Materials Testing</option>
                        <option value="structural">Structural</option>
                        <option value="electrical">Electrical Systems</option>
                        <option value="mechanical">Mechanical Systems</option>
                    </select>
                    <small>Hold Ctrl/Cmd to select multiple</small>
                    <div class="specialty-preview" id="specialty-preview"></div>
                </div>
                <div class="form-group">
                    <label for="inspector-avatar">Avatar URL</label>
                    <input type="url" id="inspector-avatar" placeholder="https://example.com/avatar.jpg">
                    <small>Leave blank for default avatar</small>
                    <div id="avatar-preview" style="margin-top: 10px; text-align: center; display: none;">
                        <img id="avatar-preview-img" src="" alt="Avatar Preview" style="width: 100px; height: 100px; border-radius: 50%; border: 3px solid var(--primary-color);">
                    </div>
                </div>
                <div class="form-group">
                    <label for="inspector-bio">Bio/Notes</label>
                    <textarea id="inspector-bio" rows="3"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-inspector-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Inspector</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add Report Modal -->
    <div class="modal" id="add-report-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-report-modal">&times;</span>
            <h2>Generate New Report</h2>
            <form id="add-report-form" class="scrollable-form">
                <div class="form-group">
                    <label for="report-title">Report Title</label>
                    <input type="text" id="report-title" required>
                </div>
                <div class="form-group">
                    <label for="modal-report-type">Report Type</label>
                    <select id="modal-report-type" required>
                        <option value="">-- Select Report Type --</option>
                        <option value="supplier">Supplier Performance</option>
                        <option value="quality">Quality Control</option>
                        <option value="inspection">Inspection Results</option>
                        <option value="customer">Customer Satisfaction</option>
                        <option value="compliance">Compliance Audit</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="modal-report-period-type">Period Type</label>
                    <select id="modal-report-period-type" required>
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                        <option value="yearly">Yearly</option>
                        <option value="custom">Custom Date Range</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-month-container">
                    <label for="modal-report-period-month">Month</label>
                    <select id="modal-report-period-month">
                        <option value="1">January</option>
                        <option value="2">February</option>
                        <option value="3">March</option>
                        <option value="4">April</option>
                        <option value="5">May</option>
                        <option value="6">June</option>
                        <option value="7">July</option>
                        <option value="8">August</option>
                        <option value="9">September</option>
                        <option value="10">October</option>
                        <option value="11">November</option>
                        <option value="12">December</option>
                    </select>
                    <select id="modal-report-period-year">
                        <option value="2023">2023</option>
                        <option value="2022">2022</option>
                        <option value="2021">2021</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-quarter-container" style="display: none;">
                    <label for="modal-report-period-quarter">Quarter</label>
                    <select id="modal-report-period-quarter">
                        <option value="Q1">Q1 (Jan-Mar)</option>
                        <option value="Q2">Q2 (Apr-Jun)</option>
                        <option value="Q3">Q3 (Jul-Sep)</option>
                        <option value="Q4">Q4 (Oct-Dec)</option>
                    </select>
                    <select id="modal-report-period-quarter-year">
                        <option value="2023">2023</option>
                        <option value="2022">2022</option>
                        <option value="2021">2021</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-year-container" style="display: none;">
                    <label for="modal-report-period-year-only">Year</label>
                    <select id="modal-report-period-year-only">
                        <option value="2023">2023</option>
                        <option value="2022">2022</option>
                        <option value="2021">2021</option>
                    </select>
                </div>
                
                <div class="form-group" id="modal-period-custom-container" style="display: none;">
                    <label for="modal-report-period-start">Start Date</label>
                    <input type="date" id="modal-report-period-start">
                    
                    <label for="modal-report-period-end">End Date</label>
                    <input type="date" id="modal-report-period-end">
                </div>
                
                <div class="form-group">
                    <label for="report-description">Description</label>
                    <textarea id="report-description" rows="3" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="modal-report-format">Report Format</label>
                    <select id="modal-report-format" required>
                        <option value="html">HTML (View Online)</option>
                        <option value="pdf">PDF</option>
                        <option value="excel">Excel</option>
                        <option value="csv">CSV</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-report-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Generate Report</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- View Report Modal -->
    <div class="modal" id="view-report-modal">
        <div class="modal-content report-modal-content">
            <span class="close-btn" data-modal="view-report-modal">&times;</span>
            <h2 id="view-report-title">Report Details</h2>
            <div class="report-content-wrapper">
                <div id="report-details-container">
                    <!-- Report details will be loaded here -->
                </div>
                <div id="report-metrics-container" style="margin-top: 20px;">
                    <!-- Report metrics will be loaded here -->
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn" id="download-report-btn">Download</button>
                <button type="button" class="btn" id="print-report-btn">Print</button>
                <button type="button" class="btn" id="share-report-btn">Share</button>
                <button type="button" class="btn btn-danger" data-modal="view-report-modal">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Task Detail Modal -->
    <div class="modal" id="task-detail-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="task-detail-modal">&times;</span>
            <h2 id="task-detail-title">Task Details</h2>
            <div id="task-detail-content">
                <div class="task-detail-grid">
                    <div>
                        <h3>Description</h3>
                        <p id="task-detail-description"></p>
                        
                        <h3>Related To</h3>
                        <p id="task-detail-related"></p>
                    </div>
                    <div>
                        <h3>Details</h3>
                        <table>
                            <tr>
                                <td><strong>Status:</strong></td>
                                <td id="task-detail-status"></td>
                            </tr>
                            <tr>
                                <td><strong>Priority:</strong></td>
                                <td id="task-detail-priority"></td>
                            </tr>
                            <tr>
                                <td><strong>Category:</strong></td>
                                <td id="task-detail-category"></td>
                            </tr>
                            <tr>
                                <td><strong>Assignee:</strong></td>
                                <td id="task-detail-assignee"></td>
                            </tr>
                            <tr>
                                <td><strong>Due Date:</strong></td>
                                <td id="task-detail-due-date"></td>
                            </tr>
                            <tr>
                                <td><strong>Created Date:</strong></td>
                                <td id="task-detail-created-date"></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn" id="edit-task-btn">Edit</button>
                <button type="button" class="btn btn-danger" id="delete-task-btn">Delete</button>
                <button type="button" class="btn btn-danger" data-modal="task-detail-modal">Close</button>
            </div>
        </div>
    </div>
    
    <!-- Add/Edit Task Modal -->
    <div class="modal" id="add-task-modal">
        <div class="modal-content">
            <span class="close-btn" data-modal="add-task-modal">&times;</span>
            <h2 id="task-modal-title">Add New Task</h2>
            <form id="task-form">
                <input type="hidden" id="task-id">
                <div class="form-group">
                    <label for="task-title">Title</label>
                    <input type="text" id="task-title" required>
                </div>
                <div class="form-group">
                    <label for="task-description">Description</label>
                    <textarea id="task-description" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="task-status">Status</label>
                    <select id="task-status" required>
                        <option value="backlog">Backlog</option>
                        <option value="in-progress">In Progress</option>
                        <option value="review">Review</option>
                        <option value="done">Done</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-priority">Priority</label>
                    <select id="task-priority" required>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-category">Category</label>
                    <select id="task-category" required>
                        <option value="inspection">Inspection</option>
                        <option value="supplier">Supplier</option>
                        <option value="customer">Customer</option>
                        <option value="report">Report</option>
                        <option value="finance">Finance</option>
                        <option value="compliance">Compliance</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-assignee">Assignee</label>
                    <select id="task-assignee" required>
                        <option value="John Smith">John Smith</option>
                        <option value="Sarah Johnson">Sarah Johnson</option>
                        <option value="Michael Brown">Michael Brown</option>
                        <option value="Emily Wilson">Emily Wilson</option>
                        <option value="Robert Davis">Robert Davis</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-due-date">Due Date</label>
                    <input type="date" id="task-due-date" required>
                </div>
                <div class="form-group">
                    <label for="task-related-type">Related To</label>
                    <select id="task-related-type">
                        <option value="">None</option>
                        <option value="supplier">Supplier</option>
                        <option value="customer">Customer</option>
                        <option value="inspection">Inspection</option>
                        <option value="report">Report</option>
                    </select>
                </div>
                <div class="form-group" id="task-related-id-container" style="display: none;">
                    <label for="task-related-id">Select Related Item</label>
                    <select id="task-related-id">
                        <!-- Options will be loaded dynamically -->
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" data-modal="add-task-modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save Task</button>
                </div>
            </form>
        </div>
    </div>
    
    <div class="footer">
        © 2023 AeroSuite - Advanced Aerospace Supply Chain Management
    </div>

    <script>
        // Global data storage
        const appData = {
            suppliers: [],
            customers: [],
            inspections: [],
            relationships: [],
            inspectors: [],
            reports: [],
            specialties: [
                { id: 'quality', name: 'Quality Control', description: 'Expertise in quality assurance and control processes' },
                { id: 'safety', name: 'Safety', description: 'Specializes in safety regulations and compliance' },
                { id: 'compliance', name: 'Regulatory Compliance', description: 'Expert in aerospace regulatory requirements' },
                { id: 'environmental', name: 'Environmental', description: 'Focuses on environmental impact assessment' },
                { id: 'materials', name: 'Materials Testing', description: 'Specializes in material properties and testing' },
                { id: 'structural', name: 'Structural', description: 'Expert in structural integrity and analysis' },
                { id: 'electrical', name: 'Electrical Systems', description: 'Specializes in electrical systems and components' },
                { id: 'mechanical', name: 'Mechanical Systems', description: 'Expert in mechanical systems and components' }
            ]
        };
        
        // Load data from API
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Check API health
                const healthResponse = await fetch('/api/health');
                const healthData = await healthResponse.json();
                console.log('API Status:', healthData);
                
                // Load all data
                await loadSuppliers();
                await loadCustomers();
                await loadInspections();
                await loadInspectors();
                await loadReports();
                await loadTasks();
                
                // Create sample relationships (since API doesn't have this yet)
                createSampleRelationships();
                
                // Set up navigation first
                setupNavigation();
                
                // Get the current page from hash or default to dashboard
                const currentHash = window.location.hash || '#dashboard';
                const currentPageId = currentHash === '#dashboard' ? 'dashboard-page' : currentHash.substring(1) + '-page';
                
                // Activate the current page
                document.querySelectorAll('.nav-link').forEach(link => {
                    if (link.getAttribute('href') === currentHash) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
                
                document.querySelectorAll('.page-content').forEach(page => {
                    if (page.id === currentPageId) {
                        page.classList.add('active');
                        // Initialize tabs on the active page
                        initializePageTabs(page);
                    } else {
                        page.classList.remove('active');
                    }
                });
                
                // Only update dashboard metrics if we're on the dashboard page
                if (currentPageId === 'dashboard-page') {
                    updateDashboardMetrics();
                }
                
                // Set up tabs
                setupTabs();
                
                // Set up modals
                setupModals();
                
                // Set up modal detail views
                setupModal();
                
                // Set up forms
                setupForms();
                
                // Set up search functionality
                setupSearch();
                
                // Render relationships
                renderRelationships();
                
                // Set up metric links (for static metrics that don't get updated by updateDashboardMetrics)
                setupMetricLinks();
                
                // Notifications functionality
                setupNotifications();
            } catch (error) {
                console.error('Error connecting to API:', error);
            }
        });
        
        async function loadSuppliers() {
            try {
                const response = await fetch('/api/suppliers');
                const data = await response.json();
                appData.suppliers = data.data;
                
                // Update suppliers table
                updateSuppliersTable();
                
                // Update supplier dropdowns
                updateSupplierDropdowns();
            } catch (error) {
                console.error('Error loading suppliers:', error);
            }
        }
        
        function updateSuppliersTable() {
            const tableBody = document.querySelector('#suppliers-table tbody');
            tableBody.innerHTML = '';
            
            appData.suppliers.forEach(supplier => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${supplier.name}</td>
                    <td><span class="status status-${supplier.status}">${supplier.status}</span></td>
                    <td>${supplier.rating}</td>
                    <td>${supplier.location}</td>
                    <td>${supplier.contactEmail}</td>
                    <td>
                        <button class="btn" data-action="view" data-type="supplier" data-id="${supplier.id}">View</button>
                        <button class="btn" data-action="edit" data-type="supplier" data-id="${supplier.id}">Edit</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        function updateSupplierDropdowns() {
            // Update all supplier dropdowns in the application
            const dropdowns = document.querySelectorAll('select[id*="supplier"], #inspection-supplier, #customer-suppliers, #relationship-supplier');
            
            dropdowns.forEach(dropdown => {
                // Save the currently selected value
                const currentValue = dropdown.value;
                
                // Clear existing options except the first one if it's a placeholder
                const firstOption = dropdown.querySelector('option:first-child');
                const hasPlaceholder = firstOption && (!firstOption.value || firstOption.value === '');
                
                dropdown.innerHTML = '';
                
                if (hasPlaceholder) {
                    dropdown.appendChild(firstOption);
                }
                
                // Add supplier options
                appData.suppliers.forEach(supplier => {
                    const option = document.createElement('option');
                    option.value = supplier.id;
                    option.textContent = supplier.name;
                    dropdown.appendChild(option);
                });
                
                // Restore the selected value if it still exists
                if (currentValue) {
                    dropdown.value = currentValue;
                }
            });
        }
        
        async function loadCustomers() {
            try {
                const response = await fetch('/api/customers');
                const data = await response.json();
                appData.customers = data.data;
                
                // Update customers table
                updateCustomersTable();
                
                // Update customer dropdowns
                updateCustomerDropdowns();
            } catch (error) {
                console.error('Error loading customers:', error);
            }
        }
        
        function updateCustomersTable() {
            const tableBody = document.querySelector('#customers-table tbody');
            tableBody.innerHTML = '';
            
            appData.customers.forEach(customer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${customer.name}</td>
                    <td><span class="status status-${customer.status}">${customer.status}</span></td>
                    <td>${customer.industry}</td>
                    <td>${customer.location}</td>
                    <td>${customer.contactEmail}</td>
                    <td>
                        <button class="btn" data-action="view" data-type="customer" data-id="${customer.id}">View</button>
                        <button class="btn" data-action="edit" data-type="customer" data-id="${customer.id}">Edit</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        function updateCustomerDropdowns() {
            // Update all customer dropdowns in the application
            const dropdowns = document.querySelectorAll('select[id*="customer"], #relationship-customer, #customer-filter');
            
            dropdowns.forEach(dropdown => {
                // Save the currently selected value
                const currentValue = dropdown.value;
                
                // Clear existing options except the first one if it's a placeholder
                const firstOption = dropdown.querySelector('option:first-child');
                const hasPlaceholder = firstOption && (!firstOption.value || firstOption.value === '');
                
                dropdown.innerHTML = '';
                
                if (hasPlaceholder) {
                    dropdown.appendChild(firstOption);
                }
                
                // Add customer options
                appData.customers.forEach(customer => {
                    const option = document.createElement('option');
                    option.value = customer.id;
                    option.textContent = customer.name;
                    dropdown.appendChild(option);
                });
                
                // Restore the selected value if it still exists
                if (currentValue) {
                    dropdown.value = currentValue;
                }
            });
        }
        
        async function loadInspections() {
            try {
                const response = await fetch('/api/inspections');
                const data = await response.json();
                appData.inspections = data.data;
                
                // Update inspections tables
                updateInspectionsTables();
            } catch (error) {
                console.error('Error loading inspections:', error);
            }
        }
        
        function updateInspectionsTables() {
            // Update main inspections table
            const mainTableBody = document.querySelector('#inspections-table tbody');
            mainTableBody.innerHTML = '';
            
            // Update scheduled inspections table
            const scheduledTableBody = document.querySelector('#scheduled-inspections-table tbody');
            scheduledTableBody.innerHTML = '';
            
            // Update completed inspections table
            const completedTableBody = document.querySelector('#completed-inspections-table tbody');
            completedTableBody.innerHTML = '';
            
            appData.inspections.forEach(inspection => {
                // Find supplier name
                const supplier = appData.suppliers.find(s => s.id === inspection.supplierId);
                const supplierName = supplier ? supplier.name : 'Unknown';
                
                // Create row for main table
                const mainRow = document.createElement('tr');
                mainRow.innerHTML = `
                    <td>${inspection.id}</td>
                    <td>${supplierName}</td>
                    <td>${inspection.type}</td>
                    <td><span class="status status-${inspection.status}">${inspection.status}</span></td>
                    <td>${new Date(inspection.date).toLocaleDateString()}</td>
                    <td>${inspection.inspector}</td>
                    <td>${inspection.result}</td>
                    <td>
                        <button class="btn" data-action="view" data-type="inspection" data-id="${inspection.id}">View</button>
                        <button class="btn" data-action="edit" data-type="inspection" data-id="${inspection.id}">Edit</button>
                    </td>
                `;
                mainTableBody.appendChild(mainRow);
                
                // Add to appropriate status table
                if (inspection.status === 'scheduled') {
                    const scheduledRow = document.createElement('tr');
                    scheduledRow.innerHTML = `
                        <td>${inspection.id}</td>
                        <td>${supplierName}</td>
                        <td>${inspection.type}</td>
                        <td>${new Date(inspection.date).toLocaleDateString()}</td>
                        <td>${inspection.inspector}</td>
                        <td>
                            <button class="btn" data-action="complete" data-type="inspection" data-id="${inspection.id}">Complete</button>
                            <button class="btn" data-action="cancel" data-type="inspection" data-id="${inspection.id}">Cancel</button>
                        </td>
                    `;
                    scheduledTableBody.appendChild(scheduledRow);
                } else if (inspection.status === 'completed') {
                    const completedRow = document.createElement('tr');
                    completedRow.innerHTML = `
                        <td>${inspection.id}</td>
                        <td>${supplierName}</td>
                        <td>${inspection.type}</td>
                        <td>${new Date(inspection.date).toLocaleDateString()}</td>
                        <td>${inspection.inspector}</td>
                        <td>${inspection.result}</td>
                        <td>
                            <button class="btn" data-action="view" data-type="inspection" data-id="${inspection.id}">View Report</button>
                        </td>
                    `;
                    completedTableBody.appendChild(completedRow);
                }
            });
        }
        
        function createSampleRelationships() {
            try {
                // Try to load relationships from API first
                fetch('/api/relationships')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.data) {
                            appData.relationships = data.data;
                        } else {
                            // Fallback to sample relationships
                            appData.relationships = [
                                { id: '1', customerId: '1', supplierId: '1', type: 'primary' },
                                { id: '2', customerId: '1', supplierId: '2', type: 'secondary' },
                                { id: '3', customerId: '2', supplierId: '1', type: 'secondary' },
                                { id: '4', customerId: '2', supplierId: '2', type: 'primary' }
                            ];
                        }
                        
                        // Update relationships table
                        updateRelationshipsTable();
                        
                        // Render relationship visualizations
                        renderRelationships();
                    })
                    .catch(error => {
                        console.error('Error loading relationships:', error);
                        // Fallback to sample relationships
                        appData.relationships = [
                            { id: '1', customerId: '1', supplierId: '1', type: 'primary' },
                            { id: '2', customerId: '1', supplierId: '2', type: 'secondary' },
                            { id: '3', customerId: '2', supplierId: '1', type: 'secondary' },
                            { id: '4', customerId: '2', supplierId: '2', type: 'primary' }
                        ];
                        
                        // Update relationships table
                        updateRelationshipsTable();
                        
                        // Render relationship visualizations
                        renderRelationships();
                    });
            } catch (error) {
                console.error('Error loading relationships:', error);
                // Fallback to sample relationships
                appData.relationships = [
                    { id: '1', customerId: '1', supplierId: '1', type: 'primary' },
                    { id: '2', customerId: '1', supplierId: '2', type: 'secondary' },
                    { id: '3', customerId: '2', supplierId: '1', type: 'secondary' },
                    { id: '4', customerId: '2', supplierId: '2', type: 'primary' }
                ];
                
                // Update relationships table
                updateRelationshipsTable();
                
                // Render relationship visualizations
                renderRelationships();
            }
        }
        
        function updateRelationshipsTable() {
            const tableBody = document.querySelector('#relationships-table tbody');
            tableBody.innerHTML = '';
            
            appData.relationships.forEach(relationship => {
                const customer = appData.customers.find(c => c.id === relationship.customerId);
                const supplier = appData.suppliers.find(s => s.id === relationship.supplierId);
                
                if (customer && supplier) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${customer.name}</td>
                        <td>${supplier.name}</td>
                        <td>${relationship.type}</td>
                        <td>
                            <button class="btn btn-danger" data-action="delete" data-type="relationship" data-id="${relationship.id}">Remove</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                }
            });
        }
        
        function renderRelationships() {
            // Render relationships in the relationships page
            const container = document.getElementById('org-relationships');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (appData.relationships.length === 0) {
                container.innerHTML = '<p>No relationships defined yet. Use the form below to add relationships between customers and suppliers.</p>';
                return;
            }
            
            // Group by customer
            const customerGroups = {};
            
            appData.relationships.forEach(rel => {
                if (!customerGroups[rel.customerId]) {
                    customerGroups[rel.customerId] = [];
                }
                customerGroups[rel.customerId].push(rel);
            });
            
            // Create visualization
            for (const customerId in customerGroups) {
                const customer = appData.customers.find(c => c.id === customerId);
                if (customer) {
                    const relationshipGroup = document.createElement('div');
                    relationshipGroup.style.display = 'flex';
                    relationshipGroup.style.flexDirection = 'column';
                    relationshipGroup.style.marginBottom = '20px';
                    relationshipGroup.style.width = '100%';
                    
                    const customerNode = document.createElement('div');
                    customerNode.classList.add('relationship-node', 'node-customer');
                    customerNode.textContent = customer.name;
                    relationshipGroup.appendChild(customerNode);
                    
                    const suppliersContainer = document.createElement('div');
                    suppliersContainer.style.display = 'flex';
                    suppliersContainer.style.flexWrap = 'wrap';
                    suppliersContainer.style.marginTop = '10px';
                    suppliersContainer.style.marginLeft = '30px';
                    
                    customerGroups[customerId].forEach(rel => {
                        const supplier = appData.suppliers.find(s => s.id === rel.supplierId);
                        if (supplier) {
                            const supplierGroup = document.createElement('div');
                            supplierGroup.style.display = 'flex';
                            supplierGroup.style.alignItems = 'center';
                            supplierGroup.style.margin = '5px 10px';
                            
                            const line = document.createElement('div');
                            line.classList.add('relationship-line');
                            supplierGroup.appendChild(line);
                            
                            const supplierNode = document.createElement('div');
                            supplierNode.classList.add('relationship-node', 'node-supplier');
                            supplierNode.textContent = supplier.name;
                            supplierGroup.appendChild(supplierNode);
                            
                            // Add relationship type indicator
                            const relationshipType = document.createElement('div');
                            relationshipType.style.fontSize = '0.8rem';
                            relationshipType.style.fontStyle = 'italic';
                            relationshipType.style.marginLeft = '10px';
                            relationshipType.textContent = `(${rel.type})`;
                            supplierGroup.appendChild(relationshipType);
                            
                            suppliersContainer.appendChild(supplierGroup);
                        }
                    });
                    
                    relationshipGroup.appendChild(suppliersContainer);
                    container.appendChild(relationshipGroup);
                    
                    container.appendChild(document.createElement('hr'));
                }
            }
            
            // Also render in supplier and customer relationship tabs
            renderSupplierRelationships();
            renderCustomerRelationships();
        }
        
        function renderSupplierRelationships() {
            const container = document.getElementById('supplier-relationships');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (appData.relationships.length === 0) {
                container.innerHTML = '<p>No supplier relationships defined yet.</p>';
                return;
            }
            
            // Group by supplier
            const supplierGroups = {};
            
            appData.relationships.forEach(rel => {
                if (!supplierGroups[rel.supplierId]) {
                    supplierGroups[rel.supplierId] = [];
                }
                supplierGroups[rel.supplierId].push(rel);
            });
            
            // Create visualization
            for (const supplierId in supplierGroups) {
                const supplier = appData.suppliers.find(s => s.id === supplierId);
                if (supplier) {
                    const relationshipGroup = document.createElement('div');
                    relationshipGroup.style.display = 'flex';
                    relationshipGroup.style.flexDirection = 'column';
                    relationshipGroup.style.marginBottom = '20px';
                    relationshipGroup.style.width = '100%';
                    
                    const supplierNode = document.createElement('div');
                    supplierNode.classList.add('relationship-node', 'node-supplier');
                    supplierNode.textContent = supplier.name;
                    relationshipGroup.appendChild(supplierNode);
                    
                    const customersContainer = document.createElement('div');
                    customersContainer.style.display = 'flex';
                    customersContainer.style.flexWrap = 'wrap';
                    customersContainer.style.marginTop = '10px';
                    customersContainer.style.marginLeft = '30px';
                    
                    supplierGroups[supplierId].forEach(rel => {
                        const customer = appData.customers.find(c => c.id === rel.customerId);
                        if (customer) {
                            const customerGroup = document.createElement('div');
                            customerGroup.style.display = 'flex';
                            customerGroup.style.alignItems = 'center';
                            customerGroup.style.margin = '5px 10px';
                            
                            const line = document.createElement('div');
                            line.classList.add('relationship-line');
                            customerGroup.appendChild(line);
                            
                            const customerNode = document.createElement('div');
                            customerNode.classList.add('relationship-node', 'node-customer');
                            customerNode.textContent = customer.name;
                            customerGroup.appendChild(customerNode);
                            
                            // Add relationship type indicator
                            const relationshipType = document.createElement('div');
                            relationshipType.style.fontSize = '0.8rem';
                            relationshipType.style.fontStyle = 'italic';
                            relationshipType.style.marginLeft = '10px';
                            relationshipType.textContent = `(${rel.type})`;
                            customerGroup.appendChild(relationshipType);
                            
                            customersContainer.appendChild(customerGroup);
                        }
                    });
                    
                    relationshipGroup.appendChild(customersContainer);
                    container.appendChild(relationshipGroup);
                    
                    container.appendChild(document.createElement('hr'));
                }
            }
        }
        
        function renderCustomerRelationships() {
            const container = document.getElementById('customer-relationships');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (appData.relationships.length === 0) {
                container.innerHTML = '<p>No customer relationships defined yet.</p>';
                return;
            }
            
            // Group by customer
            const customerGroups = {};
            
            appData.relationships.forEach(rel => {
                if (!customerGroups[rel.customerId]) {
                    customerGroups[rel.customerId] = [];
                }
                customerGroups[rel.customerId].push(rel);
            });
            
            // Create visualization
            for (const customerId in customerGroups) {
                const customer = appData.customers.find(c => c.id === customerId);
                if (customer) {
                    const relationshipGroup = document.createElement('div');
                    relationshipGroup.style.display = 'flex';
                    relationshipGroup.style.flexDirection = 'column';
                    relationshipGroup.style.marginBottom = '20px';
                    relationshipGroup.style.width = '100%';
                    
                    const customerNode = document.createElement('div');
                    customerNode.classList.add('relationship-node', 'node-customer');
                    customerNode.textContent = customer.name;
                    relationshipGroup.appendChild(customerNode);
                    
                    const suppliersContainer = document.createElement('div');
                    suppliersContainer.style.display = 'flex';
                    suppliersContainer.style.flexWrap = 'wrap';
                    suppliersContainer.style.marginTop = '10px';
                    suppliersContainer.style.marginLeft = '30px';
                    
                    customerGroups[customerId].forEach(rel => {
                        const supplier = appData.suppliers.find(s => s.id === rel.supplierId);
                        if (supplier) {
                            const supplierGroup = document.createElement('div');
                            supplierGroup.style.display = 'flex';
                            supplierGroup.style.alignItems = 'center';
                            supplierGroup.style.margin = '5px 10px';
                            
                            const line = document.createElement('div');
                            line.classList.add('relationship-line');
                            supplierGroup.appendChild(line);
                            
                            const supplierNode = document.createElement('div');
                            supplierNode.classList.add('relationship-node', 'node-supplier');
                            supplierNode.textContent = supplier.name;
                            supplierGroup.appendChild(supplierNode);
                            
                            // Add relationship type indicator
                            const relationshipType = document.createElement('div');
                            relationshipType.style.fontSize = '0.8rem';
                            relationshipType.style.fontStyle = 'italic';
                            relationshipType.style.marginLeft = '10px';
                            relationshipType.textContent = `(${rel.type})`;
                            supplierGroup.appendChild(relationshipType);
                            
                            suppliersContainer.appendChild(supplierGroup);
                        }
                    });
                    
                    relationshipGroup.appendChild(suppliersContainer);
                    container.appendChild(relationshipGroup);
                    
                    container.appendChild(document.createElement('hr'));
                }
            }
        }
        
        function updateDashboardMetrics() {
            // Supplier metrics
            document.getElementById('supplier-count').innerHTML = `<a href="#suppliers" class="metric-link" data-page="suppliers-page">${appData.suppliers.length}</a>`;
            
            const avgRating = appData.suppliers.reduce((sum, s) => sum + s.rating, 0) / appData.suppliers.length;
            document.getElementById('avg-rating').innerHTML = `<a href="#suppliers" class="metric-link" data-page="suppliers-page">${avgRating.toFixed(1)}</a>`;
            
            const activeSuppliers = appData.suppliers.filter(s => s.status === 'active').length;
            document.getElementById('active-suppliers').innerHTML = `<a href="#suppliers" class="metric-link" data-page="suppliers-page" data-filter="active">${activeSuppliers}</a>`;
            
            // Inspection metrics
            document.getElementById('inspection-count').innerHTML = `<a href="#inspections" class="metric-link" data-page="inspections-page">${appData.inspections.length}</a>`;
            
            const completedInspections = appData.inspections.filter(i => i.status === 'completed').length;
            document.getElementById('completed-inspections').innerHTML = `<a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="completed-inspections-tab">${completedInspections}</a>`;
            
            const scheduledInspections = appData.inspections.filter(i => i.status === 'scheduled').length;
            document.getElementById('scheduled-inspections').innerHTML = `<a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="scheduled-inspections-tab">${scheduledInspections}</a>`;
            
            // Customer metrics
            document.getElementById('customer-count').innerHTML = `<a href="#customers" class="metric-link" data-page="customers-page">${appData.customers.length}</a>`;
            
            // Set up event listeners for metric links
            setupMetricLinks();
        }
        
        function setupMetricLinks() {
            const metricLinks = document.querySelectorAll('.metric-link');
            
            metricLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    
                    // Store current page state before navigation
                    const currentPageId = document.querySelector('.page-content.active').id;
                    const currentHash = window.location.hash;
                    
                    // Navigate to the specified page
                    const pageId = link.getAttribute('data-page');
                    if (pageId) {
                        // Find the nav link for this page and click it
                        const navLink = document.querySelector(`.nav-link[data-page="${pageId}"]`);
                        if (navLink) {
                            // Get the href for the history state
                            const href = navLink.getAttribute('href');
                            
                            // Manually update the URL hash without using pushState
                            // This ensures the browser history works correctly
                            window.location.hash = href.substring(1);
                            
                            // Activate the target page
                            document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                            document.querySelectorAll('.page-content').forEach(p => p.classList.remove('active'));
                            navLink.classList.add('active');
                            document.getElementById(pageId).classList.add('active');
                            
                            // If there's a tab to select, do that after a short delay to let the page load
                            const tabId = link.getAttribute('data-tab');
                            if (tabId) {
                                setTimeout(() => {
                                    const tab = document.querySelector(`.tab[data-tab="${tabId}"]`);
                                    if (tab) {
                                        tab.click();
                                    }
                                }, 100);
                            }
                            
                            // If there's a filter to apply, do that after a short delay
                            const filter = link.getAttribute('data-filter');
                            if (filter) {
                                setTimeout(() => {
                                    if (pageId === 'suppliers-page') {
                                        const searchBox = document.getElementById('supplier-search');
                                        if (searchBox) {
                                            searchBox.value = filter;
                                            // Trigger the input event to filter the table
                                            searchBox.dispatchEvent(new Event('input'));
                                        }
                                    } else if (pageId === 'customers-page') {
                                        const searchBox = document.getElementById('customer-search');
                                        if (searchBox) {
                                            searchBox.value = filter;
                                            searchBox.dispatchEvent(new Event('input'));
                                        }
                                    } else if (pageId === 'inspections-page') {
                                        const searchBox = document.getElementById('inspection-search');
                                        if (searchBox) {
                                            searchBox.value = filter;
                                            searchBox.dispatchEvent(new Event('input'));
                                        }
                                    }
                                }, 200);
                            }
                        }
                    }
                });
            });
        }
        
        function setupNavigation() {
            const navLinks = document.querySelectorAll('.nav-link');
            const pages = document.querySelectorAll('.page-content');
            
            // Set initial state based on URL hash or default to dashboard
            const initialHash = window.location.hash || '#dashboard';
            
            // Activate the initial page and nav link
            navLinks.forEach(link => {
                if (link.getAttribute('href') === initialHash) {
                    link.classList.add('active');
                    const pageId = link.getAttribute('data-page');
                    if (pageId) {
                        const page = document.getElementById(pageId);
                        if (page) {
                            page.classList.add('active');
                            
                            // Initialize tabs on the active page
                            initializePageTabs(page);
                        }
                    }
                } else {
                    link.classList.remove('active');
                }
            });
            
            // Set up click handlers for navigation
            navLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    
                    // Get the target page ID
                    const pageId = link.getAttribute('data-page');
                    if (!pageId) return;
                    
                    // Update URL hash directly to ensure browser history works correctly
                    const href = link.getAttribute('href');
                    if (href) {
                        window.location.hash = href.substring(1);
                    }
                    
                    // Remove active class from all links and pages
                    navLinks.forEach(l => l.classList.remove('active'));
                    pages.forEach(p => p.classList.remove('active'));
                    
                    // Add active class to clicked link
                    link.classList.add('active');
                    
                    // Show the corresponding page
                    const page = document.getElementById(pageId);
                    if (page) {
                        page.classList.add('active');
                        
                        // Initialize tabs on the active page
                        initializePageTabs(page);
                        
                        // If navigating to the dashboard, update metrics
                        if (pageId === 'dashboard-page') {
                            updateDashboardMetrics();
                        } else {
                            // Hide any dashboard metrics that might be showing on non-dashboard pages
                            const metricContainers = page.querySelectorAll('.metrics');
                            metricContainers.forEach(container => {
                                if (!container.closest('#dashboard-page')) {
                                    container.style.display = 'none';
                                }
                            });
                        }
                    }
                });
            });
            
            // Handle browser back/forward buttons
            window.addEventListener('hashchange', () => {
                const hash = window.location.hash || '#dashboard';
                
                // Find the corresponding nav link
                navLinks.forEach(link => {
                    const linkHash = link.getAttribute('href');
                    if (linkHash === hash) {
                        // Remove active class from all links and pages
                        navLinks.forEach(l => l.classList.remove('active'));
                        pages.forEach(p => p.classList.remove('active'));
                        
                        // Add active class to this link
                        link.classList.add('active');
                        
                        // Show the corresponding page
                        const pageId = link.getAttribute('data-page');
                        if (pageId) {
                            const page = document.getElementById(pageId);
                            if (page) {
                                page.classList.add('active');
                                
                                // Initialize tabs on the active page
                                initializePageTabs(page);
                                
                                // If navigating to the dashboard, update metrics
                                if (pageId === 'dashboard-page') {
                                    updateDashboardMetrics();
                                } else {
                                    // Hide any dashboard metrics that might be showing on non-dashboard pages
                                    const metricContainers = page.querySelectorAll('.metrics');
                                    metricContainers.forEach(container => {
                                        if (!container.closest('#dashboard-page')) {
                                            container.style.display = 'none';
                                        }
                                    });
                                }
                            }
                        }
                    }
                });
            });
        }
        
        // Helper function to initialize tabs on a page
        function initializePageTabs(pageElement) {
            if (!pageElement) return;
            
            const tabContainer = pageElement.querySelector('.tabs');
            if (!tabContainer) return;
            
            const pageId = pageElement.id;
            const savedTabId = sessionStorage.getItem(`${pageId}-activeTab`);
            
            // If there's a saved tab, activate it
            if (savedTabId) {
                const savedTab = tabContainer.querySelector(`[data-tab="${savedTabId}"]`);
                if (savedTab) {
                    // Deactivate all tabs
                    tabContainer.querySelectorAll('.tab').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    
                    // Activate the saved tab
                    savedTab.classList.add('active');
                    
                    // Deactivate all tab contents
                    const tabContents = pageElement.querySelectorAll('.tab-content');
                    tabContents.forEach(content => {
                        content.classList.remove('active');
                    });
                    
                    // Activate the saved tab content
                    const savedTabContent = document.getElementById(savedTabId);
                    if (savedTabContent) {
                        savedTabContent.classList.add('active');
                        
                        // Special handling for specific tabs
                        if (savedTabId === 'supplier-relationships-tab') {
                            renderSupplierRelationships();
                        } else if (savedTabId === 'customer-relationships-tab') {
                            renderCustomerRelationships();
                        } else if (savedTabId === 'supplier-map-tab') {
                            setTimeout(initMap, 100);
                        }
                    }
                }
            } else {
                // If there's no saved tab, activate the first tab
                const firstTab = tabContainer.querySelector('.tab');
                if (firstTab) {
                    firstTab.classList.add('active');
                    
                    const firstTabId = firstTab.getAttribute('data-tab');
                    if (firstTabId) {
                        const firstTabContent = document.getElementById(firstTabId);
                        if (firstTabContent) {
                            firstTabContent.classList.add('active');
                            
                            // Special handling for specific tabs
                            if (firstTabId === 'supplier-relationships-tab') {
                                renderSupplierRelationships();
                            } else if (firstTabId === 'customer-relationships-tab') {
                                renderCustomerRelationships();
                            } else if (firstTabId === 'supplier-map-tab') {
                                setTimeout(initMap, 100);
                            }
                        }
                    }
                }
            }
        }
        
        function setupTabs() {
            document.querySelectorAll('.tabs').forEach(tabContainer => {
                tabContainer.querySelectorAll('.tab').forEach(tab => {
                    tab.addEventListener('click', () => {
                        // Deactivate all tabs in this container
                        tabContainer.querySelectorAll('.tab').forEach(t => {
                            t.classList.remove('active');
                        });
                        
                        // Activate the clicked tab
                        tab.classList.add('active');
                        
                        // Get the tab content id
                        const tabContentId = tab.getAttribute('data-tab');
                        
                        // Deactivate all tab contents for this tab container
                        const tabContents = tabContainer.parentElement.querySelectorAll('.tab-content');
                        tabContents.forEach(content => {
                            content.classList.remove('active');
                        });
                        
                        // Activate the corresponding tab content
                        const activeTabContent = document.getElementById(tabContentId);
                        if (activeTabContent) {
                            activeTabContent.classList.add('active');
                            
                            // Special handling for specific tabs
                            if (tabContentId === 'supplier-relationships-tab') {
                                renderSupplierRelationships();
                            } else if (tabContentId === 'customer-relationships-tab') {
                                renderCustomerRelationships();
                            } else if (tabContentId === 'supplier-map-tab') {
                                // Initialize map when switching to map tab
                                setTimeout(initMap, 100);
                            }
                        }
                    });
                });
            });
        }
        
        function setupModals() {
            // Show modal buttons
            document.getElementById('add-supplier-btn').addEventListener('click', () => {
                document.getElementById('add-supplier-modal').style.display = 'block';
                // Reset form in case it was used for editing
                document.getElementById('add-supplier-form').reset();
                document.getElementById('add-supplier-form').removeAttribute('data-edit-id');
                document.querySelector('#add-supplier-modal h2').textContent = 'Add New Supplier';
                document.querySelector('#add-supplier-form .btn-success').textContent = 'Save Supplier';
            });
            
            document.getElementById('add-customer-btn').addEventListener('click', () => {
                document.getElementById('add-customer-modal').style.display = 'block';
                // Reset form in case it was used for editing
                document.getElementById('add-customer-form').reset();
                document.getElementById('add-customer-form').removeAttribute('data-edit-id');
                document.querySelector('#add-customer-modal h2').textContent = 'Add New Customer';
                document.querySelector('#add-customer-form .btn-success').textContent = 'Save Customer';
            });
            
            document.getElementById('add-inspection-btn').addEventListener('click', () => {
                document.getElementById('add-inspection-modal').style.display = 'block';
                // Reset form in case it was used for editing
                document.getElementById('add-inspection-form').reset();
                document.getElementById('add-inspection-form').removeAttribute('data-edit-id');
                document.querySelector('#add-inspection-modal h2').textContent = 'Schedule New Inspection';
                document.querySelector('#add-inspection-form .btn-success').textContent = 'Schedule Inspection';
                
                // Set default date to today
                const today = new Date().toISOString().split('T')[0];
                document.getElementById('inspection-date').value = today;
            });
            
            document.getElementById('add-inspector-btn').addEventListener('click', () => {
                document.getElementById('add-inspector-modal').style.display = 'block';
                // Reset form in case it was used for editing
                document.getElementById('add-inspector-form').reset();
                document.getElementById('add-inspector-form').removeAttribute('data-edit-id');
                document.querySelector('#add-inspector-modal h2').textContent = 'Add New Inspector';
                document.querySelector('#add-inspector-form .btn-success').textContent = 'Save Inspector';
                
                // Hide avatar preview
                document.getElementById('avatar-preview').style.display = 'none';
                
                // Clear specialty preview
                document.getElementById('specialty-preview').innerHTML = '';
            });
            
            document.getElementById('add-report-btn').addEventListener('click', () => {
                document.getElementById('add-report-modal').style.display = 'block';
                // Reset form in case it was used for editing
                document.getElementById('add-report-form').reset();
                
                // Set current month and year
                const now = new Date();
                document.getElementById('modal-report-period-month').value = now.getMonth() + 1;
                document.getElementById('modal-report-period-year').value = now.getFullYear();
                document.getElementById('modal-report-period-quarter-year').value = now.getFullYear();
                document.getElementById('modal-report-period-year-only').value = now.getFullYear();
                
                // Set default dates for custom range
                const today = now.toISOString().split('T')[0];
                const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0];
                document.getElementById('modal-report-period-start').value = firstDayOfMonth;
                document.getElementById('modal-report-period-end').value = today;
            });
            
            // Setup avatar preview
            const avatarInput = document.getElementById('inspector-avatar');
            const avatarPreview = document.getElementById('avatar-preview');
            const avatarPreviewImg = document.getElementById('avatar-preview-img');
            
            if (avatarInput && avatarPreview && avatarPreviewImg) {
                avatarInput.addEventListener('input', () => {
                    const url = avatarInput.value.trim();
                    if (url) {
                        avatarPreviewImg.src = url;
                        avatarPreview.style.display = 'block';
                        
                        // Handle image load error
                        avatarPreviewImg.onerror = () => {
                            avatarPreviewImg.src = 'https://via.placeholder.com/100?text=Error';
                        };
                    } else {
                        avatarPreview.style.display = 'none';
                    }
                });
            }
            
            // Close modal buttons
            const closeButtons = document.querySelectorAll('.close-btn, [data-modal]');
            closeButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const modalId = button.getAttribute('data-modal');
                    if (modalId) {
                        document.getElementById(modalId).style.display = 'none';
                    } else {
                        // Close parent modal
                        const modal = button.closest('.modal');
                        if (modal) {
                            modal.style.display = 'none';
                        }
                    }
                });
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target.classList.contains('modal')) {
                    e.target.style.display = 'none';
                }
            });
            
            // Set up action buttons (view, edit, etc.)
            document.addEventListener('click', (e) => {
                // Check if the clicked element is a button with data-action attribute
                if (e.target.matches('button[data-action]')) {
                    const action = e.target.getAttribute('data-action');
                    const type = e.target.getAttribute('data-type');
                    const id = e.target.getAttribute('data-id');
                    
                    // Handle different actions
                    if (action === 'view') {
                        viewItem(type, id);
                    } else if (action === 'edit') {
                        editItem(type, id);
                    } else if (action === 'delete') {
                        deleteItem(type, id);
                    } else if (action === 'complete') {
                        completeInspection(id);
                    } else if (action === 'cancel') {
                        cancelInspection(id);
                    }
                }
                
                // Handle clicks on inspector links in specialties table
                if (e.target.matches('#specialties-table-body a[data-action="view"]')) {
                    e.preventDefault();
                    const type = e.target.getAttribute('data-type');
                    const id = e.target.getAttribute('data-id');
                    if (type && id) {
                        viewItem(type, id);
                    }
                }
            });
        }
        
        // View item details in modal
        function viewItem(type, id) {
            const modal = document.getElementById('details-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalContent = document.getElementById('modal-content');
            
            if (type === 'supplier') {
                const supplier = appData.suppliers.find(s => s.id === id);
                if (supplier) {
                    modalTitle.textContent = `Supplier: ${supplier.name}`;
                    
                    // Get related inspections
                    const relatedInspections = appData.inspections.filter(i => i.supplierId === id);
                    
                    // Get related customers
                    const relatedRelationships = appData.relationships.filter(r => r.supplierId === id);
                    const relatedCustomers = relatedRelationships.map(r => {
                        const customer = appData.customers.find(c => c.id === r.customerId);
                        return {
                            ...customer,
                            relationshipType: r.type
                        };
                    });
                    
                    modalContent.innerHTML = `
                        <div class="form-group">
                            <label>Name:</label>
                            <div>${supplier.name}</div>
                        </div>
                        <div class="form-group">
                            <label>Status:</label>
                            <div><span class="status status-${supplier.status}">${supplier.status}</span></div>
                        </div>
                        <div class="form-group">
                            <label>Rating:</label>
                            <div>${supplier.rating}</div>
                        </div>
                        <div class="form-group">
                            <label>Location:</label>
                            <div>${supplier.location}</div>
                        </div>
                        <div class="form-group">
                            <label>Contact Email:</label>
                            <div>${supplier.contactEmail}</div>
                        </div>
                        
                        <h3>Related Customers (${relatedCustomers.length})</h3>
                        ${relatedCustomers.length > 0 ? `
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Industry</th>
                                        <th>Relationship</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${relatedCustomers.map(c => `
                                        <tr>
                                            <td>${c.name}</td>
                                            <td>${c.industry}</td>
                                            <td>${c.relationshipType}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : '<p>No related customers</p>'}
                        
                        <h3>Inspections (${relatedInspections.length})</h3>
                        ${relatedInspections.length > 0 ? `
                            <table>
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th>Result</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${relatedInspections.map(i => `
                                        <tr>
                                            <td>${new Date(i.date).toLocaleDateString()}</td>
                                            <td>${i.type}</td>
                                            <td>${i.status}</td>
                                            <td>${i.result}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : '<p>No inspections</p>'}
                    `;
                }
            } else if (type === 'customer') {
                const customer = appData.customers.find(c => c.id === id);
                if (customer) {
                    modalTitle.textContent = `Customer: ${customer.name}`;
                    
                    // Get related suppliers
                    const relatedRelationships = appData.relationships.filter(r => r.customerId === id);
                    const relatedSuppliers = relatedRelationships.map(r => {
                        const supplier = appData.suppliers.find(s => s.id === r.supplierId);
                        return {
                            ...supplier,
                            relationshipType: r.type
                        };
                    });
                    
                    modalContent.innerHTML = `
                        <div class="form-group">
                            <label>Name:</label>
                            <div>${customer.name}</div>
                        </div>
                        <div class="form-group">
                            <label>Status:</label>
                            <div><span class="status status-${customer.status}">${customer.status}</span></div>
                        </div>
                        <div class="form-group">
                            <label>Industry:</label>
                            <div>${customer.industry}</div>
                        </div>
                        <div class="form-group">
                            <label>Location:</label>
                            <div>${customer.location}</div>
                        </div>
                        <div class="form-group">
                            <label>Contact Email:</label>
                            <div>${customer.contactEmail}</div>
                        </div>
                        
                        <h3>Suppliers (${relatedSuppliers.length})</h3>
                        ${relatedSuppliers.length > 0 ? `
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Rating</th>
                                        <th>Relationship</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${relatedSuppliers.map(s => `
                                        <tr>
                                            <td>${s.name}</td>
                                            <td>${s.rating}</td>
                                            <td>${s.relationshipType}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : '<p>No related suppliers</p>'}
                    `;
                }
            } else if (type === 'inspection') {
                const inspection = appData.inspections.find(i => i.id === id);
                if (inspection) {
                    const supplier = appData.suppliers.find(s => s.id === inspection.supplierId);
                    const supplierName = supplier ? supplier.name : 'Unknown';
                    
                    modalTitle.textContent = `Inspection: ${inspection.type} - ${supplierName}`;
                    
                    modalContent.innerHTML = `
                        <div class="form-group">
                            <label>Supplier:</label>
                            <div>${supplierName}</div>
                        </div>
                        <div class="form-group">
                            <label>Type:</label>
                            <div>${inspection.type}</div>
                        </div>
                        <div class="form-group">
                            <label>Status:</label>
                            <div><span class="status status-${inspection.status}">${inspection.status}</span></div>
                        </div>
                        <div class="form-group">
                            <label>Date:</label>
                            <div>${new Date(inspection.date).toLocaleDateString()}</div>
                        </div>
                        <div class="form-group">
                            <label>Inspector:</label>
                            <div>${inspection.inspector}</div>
                        </div>
                        <div class="form-group">
                            <label>Result:</label>
                            <div>${inspection.result}</div>
                        </div>
                        ${inspection.notes ? `
                            <div class="form-group">
                                <label>Notes:</label>
                                <div>${inspection.notes}</div>
                            </div>
                        ` : ''}
                    `;
                }
            } else if (type === 'inspector') {
                const inspector = appData.inspectors.find(i => i.id === id);
                if (inspector) {
                    modalTitle.textContent = `Inspector: ${inspector.name}`;
                    
                    // Get related inspections
                    const relatedInspections = appData.inspections.filter(i => i.inspector === inspector.name);
                    
                    // Get specialty names
                    const specialtyNames = inspector.specialties.map(specialtyId => {
                        const specialty = appData.specialties.find(s => s.id === specialtyId);
                        return specialty ? specialty.name : specialtyId;
                    }).join(', ');
                    
                    // Default avatar if none provided
                    const avatarUrl = inspector.avatar || 'https://via.placeholder.com/100?text=' + inspector.name.charAt(0);
                    
                    modalContent.innerHTML = `
                        <div style="display: flex; align-items: center; margin-bottom: 20px;">
                            <img src="${avatarUrl}" alt="${inspector.name}" style="width: 100px; height: 100px; border-radius: 50%; margin-right: 20px; border: 3px solid var(--primary-color);">
                            <div>
                                <h2>${inspector.name}</h2>
                                <div>${inspector.title}</div>
                                <div><span class="status status-${inspector.status}">${inspector.status}</span></div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>Email:</label>
                            <div><a href="mailto:${inspector.email}">${inspector.email}</a></div>
                        </div>
                        <div class="form-group">
                            <label>Phone:</label>
                            <div><a href="tel:${inspector.phone}">${inspector.phone}</a></div>
                        </div>
                        <div class="form-group">
                            <label>Specialties:</label>
                            <div>${specialtyNames}</div>
                        </div>
                        <div class="form-group">
                            <label>Bio:</label>
                            <div>${inspector.bio}</div>
                        </div>
                        
                        <div class="metrics" style="margin: 20px 0;">
                            <div class="metric">
                                <div class="metric-value">${inspector.completedInspections}</div>
                                <div class="metric-label">Completed Inspections</div>
                            </div>
                            <div class="metric">
                                <div class="metric-value">${inspector.scheduledInspections}</div>
                                <div class="metric-label">Scheduled Inspections</div>
                            </div>
                        </div>
                        
                        <h3>Recent Inspections</h3>
                        ${relatedInspections.length > 0 ? `
                            <table>
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Supplier</th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th>Result</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${relatedInspections.map(i => {
                                        const supplier = appData.suppliers.find(s => s.id === i.supplierId);
                                        const supplierName = supplier ? supplier.name : 'Unknown';
                                        return `
                                            <tr>
                                                <td>${new Date(i.date).toLocaleDateString()}</td>
                                                <td>${supplierName}</td>
                                                <td>${i.type}</td>
                                                <td>${i.status}</td>
                                                <td>${i.result}</td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        ` : '<p>No inspections assigned</p>'}
                        
                        <div class="form-actions">
                            <button class="btn" data-action="edit" data-type="inspector" data-id="${inspector.id}">Edit Inspector</button>
                        </div>
                    `;
                }
            } else if (type === 'report') {
                // For reports, use the dedicated report viewer
                viewReport(id);
                return;
            }
            
            modal.style.display = 'block';
        }
        
        function viewReport(id) {
            const report = appData.reports.find(r => r.id === id);
            if (!report) return;
            
            const modal = document.getElementById('view-report-modal');
            const reportTitle = document.getElementById('view-report-title');
            const reportDetails = document.getElementById('report-details-container');
            const reportMetrics = document.getElementById('report-metrics-container');
            
            reportTitle.textContent = report.title;
            
            // Display report details
            reportDetails.innerHTML = `
                <div style="margin-bottom: 20px; padding-bottom: 10px; border-bottom: 1px solid #eee;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <div>
                            <strong>Type:</strong> ${capitalizeFirstLetter(report.type)}
                        </div>
                        <div>
                            <strong>Period:</strong> ${report.period}
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <div>
                            <strong>Created:</strong> ${new Date(report.createdDate).toLocaleDateString()} by ${report.createdBy}
                        </div>
                        <div>
                            <strong>Status:</strong> <span class="status status-${report.status}">${report.status}</span>
                        </div>
                    </div>
                </div>
                <div>
                    <strong>Description:</strong>
                    <p>${report.description}</p>
                </div>
            `;
            
            // Display report metrics based on type
            reportMetrics.innerHTML = '';
            
            if (report.type === 'supplier') {
                reportMetrics.innerHTML = `
                    <h3>Supplier Performance Metrics</h3>
                    <div class="metrics" style="margin: 20px 0;">
                        <div class="metric">
                            <div class="metric-value">${report.metrics.averageRating}</div>
                            <div class="metric-label">Average Rating</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.onTimeDelivery}%</div>
                            <div class="metric-label">On-Time Delivery</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.qualityScore}%</div>
                            <div class="metric-label">Quality Score</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.costEfficiency}%</div>
                            <div class="metric-label">Cost Efficiency</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Supplier Performance Chart</h4>
                        <div style="background-color: #f9f9f9; border: 1px solid #eee; height: 300px; display: flex; align-items: center; justify-content: center;">
                            <p>Chart visualization would be displayed here</p>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Top Performing Suppliers</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Supplier</th>
                                    <th>Rating</th>
                                    <th>On-Time</th>
                                    <th>Quality</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${appData.suppliers
                                    .sort((a, b) => b.rating - a.rating)
                                    .slice(0, 5)
                                    .map(s => `
                                        <tr>
                                            <td>${s.name}</td>
                                            <td>${s.rating}</td>
                                            <td>${Math.floor(Math.random() * 10) + 90}%</td>
                                            <td>${Math.floor(Math.random() * 10) + 90}%</td>
                                        </tr>
                                    `).join('')}
                            </tbody>
                        </table>
                    </div>
                `;
            } else if (report.type === 'quality') {
                reportMetrics.innerHTML = `
                    <h3>Quality Control Metrics</h3>
                    <div class="metrics" style="margin: 20px 0;">
                        <div class="metric">
                            <div class="metric-value">${report.metrics.totalInspections}</div>
                            <div class="metric-label">Total Inspections</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.passRate}%</div>
                            <div class="metric-label">Pass Rate</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.criticalIssues}</div>
                            <div class="metric-label">Critical Issues</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.minorIssues}</div>
                            <div class="metric-label">Minor Issues</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Quality Issues by Category</h4>
                        <div style="background-color: #f9f9f9; border: 1px solid #eee; height: 300px; display: flex; align-items: center; justify-content: center;">
                            <p>Chart visualization would be displayed here</p>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Recent Quality Issues</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Supplier</th>
                                    <th>Issue Type</th>
                                    <th>Severity</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>${new Date().toLocaleDateString()}</td>
                                    <td>Aerospace Components Inc.</td>
                                    <td>Surface Finish</td>
                                    <td>Minor</td>
                                    <td><span class="status status-active">Open</span></td>
                                </tr>
                                <tr>
                                    <td>${new Date(Date.now() - 86400000).toLocaleDateString()}</td>
                                    <td>Precision Parts Ltd.</td>
                                    <td>Dimensional Tolerance</td>
                                    <td>Moderate</td>
                                    <td><span class="status status-active">Open</span></td>
                                </tr>
                                <tr>
                                    <td>${new Date(Date.now() - 172800000).toLocaleDateString()}</td>
                                    <td>Aerospace Components Inc.</td>
                                    <td>Structural Integrity</td>
                                    <td>Critical</td>
                                    <td><span class="status status-completed">Resolved</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                `;
            } else if (report.type === 'inspection') {
                reportMetrics.innerHTML = `
                    <h3>Inspection Metrics</h3>
                    <div class="metrics" style="margin: 20px 0;">
                        <div class="metric">
                            <div class="metric-value">${report.metrics.completed}</div>
                            <div class="metric-label">Completed</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.scheduled}</div>
                            <div class="metric-label">Scheduled</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.cancelled}</div>
                            <div class="metric-label">Cancelled</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.completed + report.metrics.scheduled + report.metrics.cancelled}</div>
                            <div class="metric-label">Total</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Inspections by Type</h4>
                        <div style="display: flex; margin-top: 20px;">
                            <div style="flex: 1; text-align: center; padding: 10px; background-color: #e3f2fd; margin: 0 5px; border-radius: 5px;">
                                <h5>Quality</h5>
                                <div style="font-size: 24px; font-weight: bold;">${report.metrics.byType.quality}</div>
                            </div>
                            <div style="flex: 1; text-align: center; padding: 10px; background-color: #fff8e1; margin: 0 5px; border-radius: 5px;">
                                <h5>Safety</h5>
                                <div style="font-size: 24px; font-weight: bold;">${report.metrics.byType.safety}</div>
                            </div>
                            <div style="flex: 1; text-align: center; padding: 10px; background-color: #e8f5e9; margin: 0 5px; border-radius: 5px;">
                                <h5>Compliance</h5>
                                <div style="font-size: 24px; font-weight: bold;">${report.metrics.byType.compliance}</div>
                            </div>
                            <div style="flex: 1; text-align: center; padding: 10px; background-color: #f3e5f5; margin: 0 5px; border-radius: 5px;">
                                <h5>Environmental</h5>
                                <div style="font-size: 24px; font-weight: bold;">${report.metrics.byType.environmental}</div>
                            </div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Inspections Timeline</h4>
                        <div style="background-color: #f9f9f9; border: 1px solid #eee; height: 300px; display: flex; align-items: center; justify-content: center;">
                            <p>Timeline visualization would be displayed here</p>
                        </div>
                    </div>
                `;
            } else if (report.type === 'customer') {
                reportMetrics.innerHTML = `
                    <h3>Customer Satisfaction Metrics</h3>
                    <div class="metrics" style="margin: 20px 0;">
                        <div class="metric">
                            <div class="metric-value">${report.metrics.overallSatisfaction}</div>
                            <div class="metric-label">Overall Satisfaction</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.responseRate}%</div>
                            <div class="metric-label">Response Rate</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.npsScore}</div>
                            <div class="metric-label">NPS Score</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Top Issues Reported</h4>
                        <ol>
                            ${report.metrics.topIssues.map(issue => `<li>${issue}</li>`).join('')}
                        </ol>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Satisfaction Trend</h4>
                        <div style="background-color: #f9f9f9; border: 1px solid #eee; height: 300px; display: flex; align-items: center; justify-content: center;">
                            <p>Trend visualization would be displayed here</p>
                        </div>
                    </div>
                `;
            } else if (report.type === 'compliance') {
                reportMetrics.innerHTML = `
                    <h3>Compliance Audit Metrics</h3>
                    <div class="metrics" style="margin: 20px 0;">
                        <div class="metric">
                            <div class="metric-value">${report.metrics.complianceScore}%</div>
                            <div class="metric-label">Compliance Score</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.findings}</div>
                            <div class="metric-label">Findings</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.criticalFindings}</div>
                            <div class="metric-label">Critical Findings</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">${report.metrics.recommendedActions}</div>
                            <div class="metric-label">Recommended Actions</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Compliance by Category</h4>
                        <div style="background-color: #f9f9f9; border: 1px solid #eee; height: 300px; display: flex; align-items: center; justify-content: center;">
                            <p>Chart visualization would be displayed here</p>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4>Recommended Actions</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Action</th>
                                    <th>Priority</th>
                                    <th>Responsible</th>
                                    <th>Due Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Update safety procedures documentation</td>
                                    <td>High</td>
                                    <td>Safety Team</td>
                                    <td>${new Date(Date.now() + 14 * 86400000).toLocaleDateString()}</td>
                                </tr>
                                <tr>
                                    <td>Conduct staff training on new regulations</td>
                                    <td>Medium</td>
                                    <td>HR Department</td>
                                    <td>${new Date(Date.now() + 30 * 86400000).toLocaleDateString()}</td>
                                </tr>
                                <tr>
                                    <td>Implement new quality control checkpoints</td>
                                    <td>High</td>
                                    <td>QA Team</td>
                                    <td>${new Date(Date.now() + 21 * 86400000).toLocaleDateString()}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                `;
            }
            
            // Setup download button
            document.getElementById('download-report-btn').onclick = () => {
                alert(`Downloading ${report.title} in ${document.getElementById('modal-report-format').value || 'PDF'} format...`);
            };
            
            // Setup print button
            document.getElementById('print-report-btn').onclick = () => {
                alert('Preparing report for printing...');
            };
            
            // Setup share button
            document.getElementById('share-report-btn').onclick = () => {
                alert('Share options would appear here');
            };
            
            modal.style.display = 'block';
        }
        
        // Edit item in modal
        function editItem(type, id) {
            if (type === 'supplier') {
                const supplier = appData.suppliers.find(s => s.id === id);
                if (supplier) {
                    // Fill the form with supplier data
                    document.getElementById('supplier-name').value = supplier.name;
                    document.getElementById('supplier-status').value = supplier.status;
                    document.getElementById('supplier-rating').value = supplier.rating;
                    document.getElementById('supplier-location').value = supplier.location;
                    document.getElementById('supplier-email').value = supplier.contactEmail;
                    
                    // Store the ID for update
                    document.getElementById('add-supplier-form').setAttribute('data-edit-id', id);
                    
                    // Change form title and button text
                    document.querySelector('#add-supplier-modal h2').textContent = 'Edit Supplier';
                    document.querySelector('#add-supplier-form .btn-success').textContent = 'Update Supplier';
                    
                    // Show the modal
                    document.getElementById('add-supplier-modal').style.display = 'block';
                }
            } else if (type === 'customer') {
                const customer = appData.customers.find(c => c.id === id);
                if (customer) {
                    // Fill the form with customer data
                    document.getElementById('customer-name').value = customer.name;
                    document.getElementById('customer-status').value = customer.status;
                    document.getElementById('customer-industry').value = customer.industry;
                    document.getElementById('customer-location').value = customer.location;
                    document.getElementById('customer-email').value = customer.contactEmail;
                    
                    // Store the ID for update
                    document.getElementById('add-customer-form').setAttribute('data-edit-id', id);
                    
                    // Change form title and button text
                    document.querySelector('#add-customer-modal h2').textContent = 'Edit Customer';
                    document.querySelector('#add-customer-form .btn-success').textContent = 'Update Customer';
                    
                    // Show the modal
                    document.getElementById('add-customer-modal').style.display = 'block';
                }
            } else if (type === 'inspection') {
                const inspection = appData.inspections.find(i => i.id === id);
                if (inspection) {
                    // Fill the form with inspection data
                    document.getElementById('inspection-supplier').value = inspection.supplierId;
                    document.getElementById('inspection-type').value = inspection.type;
                    document.getElementById('inspection-date').value = new Date(inspection.date).toISOString().split('T')[0];
                    document.getElementById('inspection-inspector').value = inspection.inspector;
                    document.getElementById('inspection-notes').value = inspection.notes || '';
                    
                    // Store the ID for update
                    document.getElementById('add-inspection-form').setAttribute('data-edit-id', id);
                    
                    // Change form title and button text
                    document.querySelector('#add-inspection-modal h2').textContent = 'Edit Inspection';
                    document.querySelector('#add-inspection-form .btn-success').textContent = 'Update Inspection';
                    
                    // Show the modal
                    document.getElementById('add-inspection-modal').style.display = 'block';
                }
            } else if (type === 'inspector') {
                const inspector = appData.inspectors.find(i => i.id === id);
                if (inspector) {
                    // Fill the form with inspector data
                    document.getElementById('inspector-name').value = inspector.name;
                    document.getElementById('inspector-title').value = inspector.title;
                    document.getElementById('inspector-email').value = inspector.email;
                    document.getElementById('inspector-phone').value = inspector.phone;
                    document.getElementById('inspector-status').value = inspector.status;
                    document.getElementById('inspector-avatar').value = inspector.avatar || '';
                    document.getElementById('inspector-bio').value = inspector.bio || '';
                    
                    // Set specialties
                    const specialtiesSelect = document.getElementById('inspector-specialties');
                    Array.from(specialtiesSelect.options).forEach(option => {
                        option.selected = inspector.specialties.includes(option.value);
                    });
                    
                    // Trigger change event to update specialty preview
                    specialtiesSelect.dispatchEvent(new Event('change'));
                    
                    // Update avatar preview
                    const avatarInput = document.getElementById('inspector-avatar');
                    const avatarPreview = document.getElementById('avatar-preview');
                    const avatarPreviewImg = document.getElementById('avatar-preview-img');
                    
                    if (inspector.avatar && avatarPreview && avatarPreviewImg) {
                        avatarPreviewImg.src = inspector.avatar;
                        avatarPreview.style.display = 'block';
                        
                        // Handle image load error
                        avatarPreviewImg.onerror = () => {
                            avatarPreviewImg.src = 'https://via.placeholder.com/100?text=Error';
                        };
                    } else {
                        avatarPreview.style.display = 'none';
                    }
                    
                    // Store the ID for update
                    document.getElementById('add-inspector-form').setAttribute('data-edit-id', id);
                    
                    // Change form title and button text
                    document.querySelector('#add-inspector-modal h2').textContent = 'Edit Inspector';
                    document.querySelector('#add-inspector-form .btn-success').textContent = 'Update Inspector';
                    
                    // Show the modal
                    document.getElementById('add-inspector-modal').style.display = 'block';
                }
            }
        }
        
        // Delete item
        function deleteItem(type, id) {
            if (type === 'relationship') {
                // Confirm deletion
                if (confirm('Are you sure you want to remove this relationship?')) {
                    // Find the index of the relationship to delete
                    const index = appData.relationships.findIndex(r => r.id === id);
                    if (index !== -1) {
                        // Remove the relationship
                        appData.relationships.splice(index, 1);
                        
                        // Update UI
                        updateRelationshipsTable();
                        renderRelationships();
                    }
                }
            } else if (type === 'inspector') {
                // Confirm deletion
                if (confirm('Are you sure you want to remove this inspector?')) {
                    // Check if inspector has assigned inspections
                    const inspector = appData.inspectors.find(i => i.id === id);
                    if (inspector) {
                        const assignedInspections = appData.inspections.filter(i => i.inspector === inspector.name);
                        
                        if (assignedInspections.length > 0) {
                            if (!confirm(`This inspector has ${assignedInspections.length} assigned inspections. Deleting will remove the inspector from these inspections. Continue?`)) {
                                return;
                            }
                            
                            // Update inspections to remove this inspector
                            assignedInspections.forEach(inspection => {
                                inspection.inspector = 'Unassigned';
                            });
                            
                            // Update inspection tables
                            updateInspectionsTables();
                        }
                        
                        // Find the index of the inspector to delete
                        const index = appData.inspectors.findIndex(i => i.id === id);
                        if (index !== -1) {
                            // Remove the inspector
                            appData.inspectors.splice(index, 1);
                            
                            // Update UI
                            updateInspectorsUI();
                            updateSpecialtiesTable();
                            updateInspectorDropdowns();
                            
                            alert('Inspector deleted successfully!');
                        }
                    }
                }
            }
        }
        
        // Complete inspection
        function completeInspection(id) {
            const inspection = appData.inspections.find(i => i.id === id);
            if (inspection) {
                // Ask for result
                const result = prompt('Enter inspection result (passed/failed/conditional):', 'passed');
                if (result) {
                    // Update inspection
                    inspection.status = 'completed';
                    inspection.result = result;
                    
                    // Update UI
                    updateInspectionsTables();
                    updateDashboardMetrics();
                }
            }
        }
        
        // Cancel inspection
        function cancelInspection(id) {
            if (confirm('Are you sure you want to cancel this inspection?')) {
                const inspection = appData.inspections.find(i => i.id === id);
                if (inspection) {
                    // Update inspection
                    inspection.status = 'cancelled';
                    inspection.result = 'cancelled';
                    
                    // Update UI
                    updateInspectionsTables();
                    updateDashboardMetrics();
                }
            }
        }
        
        // Set up detail modal for dashboard tiles
        function setupModal() {
            // Set up detail buttons on dashboard
            document.getElementById('supplier-details-btn').addEventListener('click', () => {
                // Show supplier performance dashboard
                document.getElementById('modal-title').textContent = 'Supplier Performance Details';
                
                // Calculate supplier metrics
                const totalSuppliers = appData.suppliers.length;
                const avgRating = appData.suppliers.reduce((sum, s) => sum + s.rating, 0) / totalSuppliers;
                const activeSuppliers = appData.suppliers.filter(s => s.status === 'active').length;
                const topSuppliers = [...appData.suppliers].sort((a, b) => b.rating - a.rating).slice(0, 3);
                
                document.getElementById('modal-content').innerHTML = `
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#suppliers" class="metric-link" data-page="suppliers-page">${totalSuppliers}</a>
                            </div>
                            <div class="metric-label">Total Suppliers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#suppliers" class="metric-link" data-page="suppliers-page">${avgRating.toFixed(1)}</a>
                            </div>
                            <div class="metric-label">Average Rating</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#suppliers" class="metric-link" data-page="suppliers-page" data-filter="active">${activeSuppliers}</a>
                            </div>
                            <div class="metric-label">Active Suppliers</div>
                        </div>
                    </div>
                    
                    <h3>Top Rated Suppliers</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Rating</th>
                                <th>Location</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${topSuppliers.map(s => `
                                <tr>
                                    <td>${s.name}</td>
                                    <td>${s.rating}</td>
                                    <td>${s.location}</td>
                                    <td>
                                        <button class="btn" data-action="view" data-type="supplier" data-id="${s.id}">View</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    
                    <div class="form-actions">
                        <button class="btn" onclick="document.querySelector('.nav-link[data-page=\\'suppliers-page\\']').click()">View All Suppliers</button>
                    </div>
                `;
                
                document.getElementById('details-modal').style.display = 'block';
                
                // Set up metric links in the modal
                setupMetricLinks();
            });
            
            document.getElementById('inspection-details-btn').addEventListener('click', () => {
                // Show inspection status dashboard
                document.getElementById('modal-title').textContent = 'Inspection Status Details';
                
                // Calculate inspection metrics
                const totalInspections = appData.inspections.length;
                const completedInspections = appData.inspections.filter(i => i.status === 'completed').length;
                const scheduledInspections = appData.inspections.filter(i => i.status === 'scheduled').length;
                const recentInspections = [...appData.inspections].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);
                
                document.getElementById('modal-content').innerHTML = `
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page">${totalInspections}</a>
                            </div>
                            <div class="metric-label">Total Inspections</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="completed-inspections-tab">${completedInspections}</a>
                            </div>
                            <div class="metric-label">Completed</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="scheduled-inspections-tab">${scheduledInspections}</a>
                            </div>
                            <div class="metric-label">Scheduled</div>
                        </div>
                    </div>
                    
                    <h3>Recent Inspections</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Supplier</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${recentInspections.map(i => {
                                const supplier = appData.suppliers.find(s => s.id === i.supplierId);
                                const supplierName = supplier ? supplier.name : 'Unknown';
                                return `
                                    <tr>
                                        <td>${new Date(i.date).toLocaleDateString()}</td>
                                        <td>${supplierName}</td>
                                        <td>${i.type}</td>
                                        <td><span class="status status-${i.status}">${i.status}</span></td>
                                        <td>
                                            <button class="btn" data-action="view" data-type="inspection" data-id="${i.id}">View</button>
                                        </td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                    
                    <div class="form-actions">
                        <button class="btn" onclick="document.querySelector('.nav-link[data-page=\\'inspections-page\\']').click()">View All Inspections</button>
                    </div>
                `;
                
                document.getElementById('details-modal').style.display = 'block';
                
                // Set up metric links in the modal
                setupMetricLinks();
            });
            
            document.getElementById('customer-details-btn').addEventListener('click', () => {
                // Show customer orders dashboard
                document.getElementById('modal-title').textContent = 'Customer Orders Details';
                
                // Calculate customer metrics
                const totalCustomers = appData.customers.length;
                const activeCustomers = appData.customers.filter(c => c.status === 'active').length;
                
                document.getElementById('modal-content').innerHTML = `
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#customers" class="metric-link" data-page="customers-page">${totalCustomers}</a>
                            </div>
                            <div class="metric-label">Total Customers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#customers" class="metric-link" data-page="customers-page" data-filter="active">${activeCustomers}</a>
                            </div>
                            <div class="metric-label">Active Customers</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">2</div>
                            <div class="metric-label">Active Orders</div>
                        </div>
                    </div>
                    
                    <h3>Customers</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Industry</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${appData.customers.map(c => `
                                <tr>
                                    <td>${c.name}</td>
                                    <td>${c.industry}</td>
                                    <td><span class="status status-${c.status}">${c.status}</span></td>
                                    <td>
                                        <button class="btn" data-action="view" data-type="customer" data-id="${c.id}">View</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    
                    <div class="form-actions">
                        <button class="btn" onclick="document.querySelector('.nav-link[data-page=\\'customers-page\\']').click()">View All Customers</button>
                    </div>
                `;
                
                document.getElementById('details-modal').style.display = 'block';
                
                // Set up metric links in the modal
                setupMetricLinks();
            });
            
            document.getElementById('quality-details-btn').addEventListener('click', () => {
                // Show quality metrics dashboard
                document.getElementById('modal-title').textContent = 'Quality Metrics Details';
                
                document.getElementById('modal-content').innerHTML = `
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-filter="passed">98%</a>
                            </div>
                            <div class="metric-label">Pass Rate</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-tab="completed-inspections-tab">3</a>
                            </div>
                            <div class="metric-label">Quality Issues</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">
                                <a href="#inspections" class="metric-link" data-page="inspections-page" data-filter="critical">1</a>
                            </div>
                            <div class="metric-label">Critical Issues</div>
                        </div>
                    </div>
                    
                    <h3>Recent Quality Reports</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Supplier</th>
                                <th>Issue Type</th>
                                <th>Severity</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>${new Date().toLocaleDateString()}</td>
                                <td>Aerospace Components Inc.</td>
                                <td>Surface Finish</td>
                                <td>Minor</td>
                                <td><span class="status status-active">Open</span></td>
                            </tr>
                            <tr>
                                <td>${new Date(Date.now() - 86400000).toLocaleDateString()}</td>
                                <td>Precision Parts Ltd.</td>
                                <td>Dimensional Tolerance</td>
                                <td>Moderate</td>
                                <td><span class="status status-active">Open</span></td>
                            </tr>
                            <tr>
                                <td>${new Date(Date.now() - 172800000).toLocaleDateString()}</td>
                                <td>Aerospace Components Inc.</td>
                                <td>Structural Integrity</td>
                                <td>Critical</td>
                                <td><span class="status status-completed">Resolved</span></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <div class="form-actions">
                        <button class="btn" onclick="document.querySelector('.nav-link[data-page=\\'reports-page\\']').click()">View All Reports</button>
                    </div>
                `;
                
                document.getElementById('details-modal').style.display = 'block';
                
                // Set up metric links in the modal
                setupMetricLinks();
            });
        }
        
        function setupForms() {
            // Add Supplier Form
            document.getElementById('add-supplier-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const supplierId = e.target.getAttribute('data-edit-id');
                const isEdit = !!supplierId;
                
                const supplierData = {
                    name: document.getElementById('supplier-name').value,
                    status: document.getElementById('supplier-status').value,
                    rating: parseFloat(document.getElementById('supplier-rating').value),
                    location: document.getElementById('supplier-location').value,
                    contactEmail: document.getElementById('supplier-email').value
                };
                
                try {
                    let url = '/api/suppliers';
                    let method = 'POST';
                    
                    if (isEdit) {
                        url += `/${supplierId}`;
                        method = 'PUT';
                    }
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(supplierData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (isEdit) {
                            // Update supplier in appData
                            const index = appData.suppliers.findIndex(s => s.id === supplierId);
                            if (index !== -1) {
                                appData.suppliers[index] = data.data;
                            }
                        } else {
                            // Add new supplier to appData
                            appData.suppliers.push(data.data);
                        }
                        
                        // Close the modal
                        document.getElementById('add-supplier-modal').style.display = 'none';
                        
                        // Update suppliers table
                        updateSuppliersTable();
                        
                        // Update supplier dropdowns
                        updateSupplierDropdowns();
                        
                        // Update dashboard metrics
                        updateDashboardMetrics();
                        
                        alert(`Supplier ${isEdit ? 'updated' : 'added'} successfully!`);
                    } else {
                        console.error('Failed to save supplier:', data.message);
                        alert('Failed to save supplier. Please try again.');
                    }
                } catch (error) {
                    console.error('Error saving supplier:', error);
                    alert('Error saving supplier. Please check your connection and try again.');
                }
            });
            
            // Add Customer Form
            document.getElementById('add-customer-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const customerId = e.target.getAttribute('data-edit-id');
                const isEdit = !!customerId;
                
                const customerData = {
                    name: document.getElementById('customer-name').value,
                    status: document.getElementById('customer-status').value,
                    industry: document.getElementById('customer-industry').value,
                    location: document.getElementById('customer-location').value,
                    contactEmail: document.getElementById('customer-email').value
                };
                
                try {
                    let url = '/api/customers';
                    let method = 'POST';
                    
                    if (isEdit) {
                        url += `/${customerId}`;
                        method = 'PUT';
                    }
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(customerData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (isEdit) {
                            // Update customer in appData
                            const index = appData.customers.findIndex(c => c.id === customerId);
                            if (index !== -1) {
                                appData.customers[index] = data.data;
                            }
                        } else {
                            // Add new customer to appData
                            appData.customers.push(data.data);
                        }
                        
                        // Close the modal
                        document.getElementById('add-customer-modal').style.display = 'none';
                        
                        // Update customers table
                        updateCustomersTable();
                        
                        // Update customer dropdowns
                        updateCustomerDropdowns();
                        
                        // Update dashboard metrics
                        updateDashboardMetrics();
                        
                        alert(`Customer ${isEdit ? 'updated' : 'added'} successfully!`);
                    } else {
                        console.error('Failed to save customer:', data.message);
                        alert('Failed to save customer. Please try again.');
                    }
                } catch (error) {
                    console.error('Error saving customer:', error);
                    alert('Error saving customer. Please check your connection and try again.');
                }
            });
            
            // Add Inspection Form
            document.getElementById('add-inspection-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const inspectionId = e.target.getAttribute('data-edit-id');
                const isEdit = !!inspectionId;
                
                const inspectionData = {
                    supplierId: document.getElementById('inspection-supplier').value,
                    type: document.getElementById('inspection-type').value,
                    date: document.getElementById('inspection-date').value,
                    inspector: document.getElementById('inspection-inspector').value,
                    notes: document.getElementById('inspection-notes').value,
                    status: 'scheduled',
                    result: 'pending'
                };
                
                try {
                    let url = '/api/inspections';
                    let method = 'POST';
                    
                    if (isEdit) {
                        url += `/${inspectionId}`;
                        method = 'PUT';
                    }
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(inspectionData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (isEdit) {
                            // Update inspection in appData
                            const index = appData.inspections.findIndex(i => i.id === inspectionId);
                            if (index !== -1) {
                                appData.inspections[index] = data.data;
                            }
                        } else {
                            // Add new inspection to appData
                            appData.inspections.push(data.data);
                        }
                        
                        // Close the modal
                        document.getElementById('add-inspection-modal').style.display = 'none';
                        
                        // Update inspections tables
                        updateInspectionsTables();
                        
                        // Update dashboard metrics
                        updateDashboardMetrics();
                        
                        alert(`Inspection ${isEdit ? 'updated' : 'scheduled'} successfully!`);
                    } else {
                        console.error('Failed to save inspection:', data.message);
                        alert('Failed to save inspection. Please try again.');
                    }
                } catch (error) {
                    console.error('Error saving inspection:', error);
                    alert('Error saving inspection. Please check your connection and try again.');
                }
            });
            
            // Add Relationship Form
            document.getElementById('add-relationship-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const relationshipData = {
                    customerId: document.getElementById('relationship-customer').value,
                    supplierId: document.getElementById('relationship-supplier').value,
                    type: document.getElementById('relationship-type').value
                };
                
                try {
                    const response = await fetch('/api/relationships', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(relationshipData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Add new relationship to appData
                        appData.relationships.push(data.data);
                        
                        // Reset form
                        e.target.reset();
                        
                        // Update relationships table
                        updateRelationshipsTable();
                        
                        // Render relationships
                        renderRelationships();
                        
                        alert('Relationship added successfully!');
                    } else {
                        console.error('Failed to save relationship:', data.message);
                        alert('Failed to save relationship. Please try again.');
                    }
                } catch (error) {
                    console.error('Error saving relationship:', error);
                    alert('Error saving relationship. Please check your connection and try again.');
                }
            });
            
            // Add Inspector Form
            document.getElementById('add-inspector-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const inspectorId = e.target.getAttribute('data-edit-id');
                const isEdit = !!inspectorId;
                
                // Get selected specialties
                const specialtiesSelect = document.getElementById('inspector-specialties');
                const selectedSpecialties = Array.from(specialtiesSelect.selectedOptions).map(option => option.value);
                
                const inspectorData = {
                    name: document.getElementById('inspector-name').value,
                    title: document.getElementById('inspector-title').value,
                    email: document.getElementById('inspector-email').value,
                    phone: document.getElementById('inspector-phone').value,
                    status: document.getElementById('inspector-status').value,
                    specialties: selectedSpecialties,
                    avatar: document.getElementById('inspector-avatar').value || null,
                    bio: document.getElementById('inspector-bio').value || null,
                    completedInspections: isEdit ? appData.inspectors.find(i => i.id === inspectorId).completedInspections : 0,
                    scheduledInspections: isEdit ? appData.inspectors.find(i => i.id === inspectorId).scheduledInspections : 0
                };
                
                try {
                    let url = '/api/inspectors';
                    let method = 'POST';
                    
                    if (isEdit) {
                        url += `/${inspectorId}`;
                        method = 'PUT';
                    }
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(inspectorData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (isEdit) {
                            // Update inspector in appData
                            const index = appData.inspectors.findIndex(i => i.id === inspectorId);
                            if (index !== -1) {
                                appData.inspectors[index] = data.data;
                            }
                        } else {
                            // Add new inspector to appData
                            appData.inspectors.push(data.data);
                        }
                        
                        // Close the modal
                        document.getElementById('add-inspector-modal').style.display = 'none';
                        
                        // Update inspector grid
                        loadInspectors();
                        
                        // Update inspector dropdowns
                        updateInspectorDropdowns();
                        
                        alert(`Inspector ${isEdit ? 'updated' : 'added'} successfully!`);
                    } else {
                        console.error('Failed to save inspector:', data.message);
                        alert('Failed to save inspector. Please try again.');
                    }
                } catch (error) {
                    console.error('Error saving inspector:', error);
                    alert('Error saving inspector. Please check your connection and try again.');
                }
            });
            
            // Add Report Form
            document.getElementById('add-report-form').addEventListener('submit', (e) => {
                e.preventDefault();
                
                // Get form data
                const reportTitle = document.getElementById('report-title').value;
                const reportType = document.getElementById('modal-report-type').value;
                const reportDescription = document.getElementById('report-description').value;
                const reportFormat = document.getElementById('modal-report-format').value;
                
                // Get period based on selected period type
                const periodType = document.getElementById('modal-report-period-type').value;
                let period = '';
                
                if (periodType === 'monthly') {
                    const month = document.getElementById('modal-report-period-month').value;
                    const year = document.getElementById('modal-report-period-year').value;
                    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                    period = `${monthNames[month - 1]} ${year}`;
                } else if (periodType === 'quarterly') {
                    const quarter = document.getElementById('modal-report-period-quarter').value;
                    const year = document.getElementById('modal-report-period-quarter-year').value;
                    period = `${quarter} ${year}`;
                } else if (periodType === 'yearly') {
                    period = document.getElementById('modal-report-period-year-only').value;
                } else if (periodType === 'custom') {
                    const startDate = document.getElementById('modal-report-period-start').value;
                    const endDate = document.getElementById('modal-report-period-end').value;
                    period = `${startDate} to ${endDate}`;
                }
                
                // Generate a new report
                const newReport = {
                    id: (appData.reports.length + 1).toString(),
                    title: reportTitle,
                    type: reportType,
                    period: period,
                    createdDate: new Date().toISOString().split('T')[0],
                    createdBy: 'Current User',
                    status: 'draft',
                    description: reportDescription,
                    metrics: generateSampleMetrics(reportType)
                };
                
                // Add to appData
                appData.reports.push(newReport);
                
                // Close the modal
                document.getElementById('add-report-modal').style.display = 'none';
                
                // Update reports UI
                updateReportsUI();
                
                alert('Report generated successfully!');
            });
            
            // Period type change handler for report forms
            const setupPeriodTypeHandlers = (prefix) => {
                const periodTypeSelect = document.getElementById(`${prefix}-report-period-type`);
                const monthContainer = document.getElementById(`${prefix}-period-month-container`);
                const quarterContainer = document.getElementById(`${prefix}-period-quarter-container`);
                const yearContainer = document.getElementById(`${prefix}-period-year-container`);
                const customContainer = document.getElementById(`${prefix}-period-custom-container`);
                
                if (periodTypeSelect) {
                    periodTypeSelect.addEventListener('change', () => {
                        const selectedType = periodTypeSelect.value;
                        
                        // Hide all containers first
                        monthContainer.style.display = 'none';
                        quarterContainer.style.display = 'none';
                        yearContainer.style.display = 'none';
                        customContainer.style.display = 'none';
                        
                        // Show the appropriate container
                        if (selectedType === 'monthly') {
                            monthContainer.style.display = 'block';
                        } else if (selectedType === 'quarterly') {
                            quarterContainer.style.display = 'block';
                        } else if (selectedType === 'yearly') {
                            yearContainer.style.display = 'block';
                        } else if (selectedType === 'custom') {
                            customContainer.style.display = 'block';
                        }
                    });
                }
            };
            
            // Set up period type handlers for both report forms
            setupPeriodTypeHandlers('modal');
            setupPeriodTypeHandlers('');
        }
        
        // Helper function to generate sample metrics for reports
        function generateSampleMetrics(reportType) {
            switch (reportType) {
                case 'supplier':
                    return {
                        averageRating: (Math.random() * 2 + 3).toFixed(1),
                        onTimeDelivery: Math.floor(Math.random() * 20 + 80),
                        qualityScore: Math.floor(Math.random() * 20 + 80),
                        costEfficiency: Math.floor(Math.random() * 30 + 70)
                    };
                case 'quality':
                    return {
                        totalInspections: Math.floor(Math.random() * 30 + 20),
                        passRate: Math.floor(Math.random() * 10 + 90),
                        criticalIssues: Math.floor(Math.random() * 3),
                        minorIssues: Math.floor(Math.random() * 15 + 5)
                    };
                case 'inspection':
                    return {
                        completed: Math.floor(Math.random() * 30 + 20),
                        scheduled: Math.floor(Math.random() * 15 + 5),
                        cancelled: Math.floor(Math.random() * 5),
                        byType: {
                            quality: Math.floor(Math.random() * 15 + 10),
                            safety: Math.floor(Math.random() * 10 + 5),
                            compliance: Math.floor(Math.random() * 8 + 3),
                            environmental: Math.floor(Math.random() * 5)
                        }
                    };
                case 'customer':
                    return {
                        overallSatisfaction: (Math.random() * 1 + 4).toFixed(1),
                        responseRate: Math.floor(Math.random() * 30 + 60),
                        npsScore: Math.floor(Math.random() * 30 + 60),
                        topIssues: ['Delivery Time', 'Communication', 'Documentation']
                    };
                case 'compliance':
                    return {
                        complianceScore: Math.floor(Math.random() * 10 + 90),
                        findings: Math.floor(Math.random() * 10 + 3),
                        criticalFindings: Math.floor(Math.random() * 2),
                        recommendedActions: Math.floor(Math.random() * 7 + 3)
                    };
                default:
                    return {};
            }
        }
        
        // Load tasks when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize appData.tasks if it doesn't exist
            if (!appData.tasks) {
                appData.tasks = [];
            }
            
            // Set up Kanban board
            setupKanbanBoard();
            
            // Load tasks from API
            loadTasks();
        });
        
        async function loadInspectors() {
            try {
                const response = await fetch('/api/inspectors');
                const data = await response.json();
                
                if (data.success && Array.isArray(data.data)) {
                    appData.inspectors = data.data;
                } else {
                    // If API doesn't return inspectors or fails, create sample data
                    createSampleInspectors();
                }
                
                // Update inspectors UI
                updateInspectorsUI();
                updateSpecialtiesTable();
                
                // Update inspector dropdowns
                updateInspectorDropdowns();
                
                // Ensure tabs are properly initialized
                const inspectorsPage = document.getElementById('inspectors-page');
                if (inspectorsPage && inspectorsPage.classList.contains('active')) {
                    const activeTabId = sessionStorage.getItem('inspectors-page-activeTab');
                    if (activeTabId) {
                        const tab = inspectorsPage.querySelector(`.tab[data-tab="${activeTabId}"]`);
                        if (tab) {
                            tab.click();
                        }
                    } else {
                        // Default to first tab
                        const firstTab = inspectorsPage.querySelector('.tab');
                        if (firstTab) {
                            firstTab.click();
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading inspectors:', error);
                // Create sample data if API fails
                createSampleInspectors();
                updateInspectorsUI();
                updateSpecialtiesTable();
                updateInspectorDropdowns();
            }
        }
        
        async function loadReports() {
            try {
                const response = await fetch('/api/reports');
                const data = await response.json();
                
                if (data.success && Array.isArray(data.data)) {
                    appData.reports = data.data;
                } else {
                    // If API doesn't return reports or fails, create sample data
                    createSampleReports();
                }
                
                // Update reports UI
                updateReportsUI();
                
                // Ensure tabs are properly initialized
                const reportsPage = document.getElementById('reports-page');
                if (reportsPage && reportsPage.classList.contains('active')) {
                    const activeTabId = sessionStorage.getItem('reports-page-activeTab');
                    if (activeTabId) {
                        const tab = reportsPage.querySelector(`.tab[data-tab="${activeTabId}"]`);
                        if (tab) {
                            tab.click();
                        }
                    } else {
                        // Default to first tab
                        const firstTab = reportsPage.querySelector('.tab');
                        if (firstTab) {
                            firstTab.click();
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading reports:', error);
                // Create sample data if API fails
                createSampleReports();
                updateReportsUI();
            }
        }
        
        function createSampleInspectors() {
            appData.inspectors = [
                {
                    id: '1',
                    name: 'John Smith',
                    title: 'Senior Quality Inspector',
                    email: 'john.smith@aerosuite.com',
                    phone: '(555) 123-4567',
                    status: 'available',
                    specialties: ['quality', 'materials'],
                    avatar: 'https://randomuser.me/api/portraits/men/32.jpg',
                    bio: 'Over 15 years of experience in aerospace quality control.',
                    completedInspections: 124,
                    scheduledInspections: 2
                },
                {
                    id: '2',
                    name: 'Maria Rodriguez',
                    title: 'Safety Compliance Specialist',
                    email: 'maria.rodriguez@aerosuite.com',
                    phone: '(555) 234-5678',
                    status: 'assigned',
                    specialties: ['safety', 'compliance'],
                    avatar: 'https://randomuser.me/api/portraits/women/44.jpg',
                    bio: 'Certified safety professional with expertise in regulatory compliance.',
                    completedInspections: 87,
                    scheduledInspections: 3
                },
                {
                    id: '3',
                    name: 'Robert Johnson',
                    title: 'Environmental Compliance Inspector',
                    email: 'robert.johnson@aerosuite.com',
                    phone: '(555) 345-6789',
                    status: 'available',
                    specialties: ['environmental', 'compliance'],
                    avatar: 'https://randomuser.me/api/portraits/men/67.jpg',
                    bio: 'Specializes in environmental impact assessments for aerospace facilities.',
                    completedInspections: 56,
                    scheduledInspections: 1
                },
                {
                    id: '4',
                    name: 'Sarah Williams',
                    title: 'Materials Testing Specialist',
                    email: 'sarah.williams@aerosuite.com',
                    phone: '(555) 456-7890',
                    status: 'unavailable',
                    specialties: ['materials', 'quality'],
                    avatar: 'https://randomuser.me/api/portraits/women/22.jpg',
                    bio: 'PhD in Materials Science with focus on aerospace materials.',
                    completedInspections: 103,
                    scheduledInspections: 0
                },
                {
                    id: '5',
                    name: 'David Lee',
                    title: 'Structural Inspector',
                    email: 'david.lee@aerosuite.com',
                    phone: '(555) 567-8901',
                    status: 'assigned',
                    specialties: ['structural', 'mechanical'],
                    avatar: 'https://randomuser.me/api/portraits/men/45.jpg',
                    bio: 'Former aircraft engineer with expertise in structural integrity.',
                    completedInspections: 78,
                    scheduledInspections: 2
                },
                {
                    id: '6',
                    name: 'Jennifer Chen',
                    title: 'Electrical Systems Inspector',
                    email: 'jennifer.chen@aerosuite.com',
                    phone: '(555) 678-9012',
                    status: 'available',
                    specialties: ['electrical', 'mechanical'],
                    avatar: 'https://randomuser.me/api/portraits/women/63.jpg',
                    bio: 'Electrical engineer specializing in aircraft systems.',
                    completedInspections: 92,
                    scheduledInspections: 1
                }
            ];
        }
        
        function updateInspectorsUI() {
            // Update all inspectors grid
            const allInspectorsGrid = document.getElementById('inspector-grid');
            if (allInspectorsGrid) {
                allInspectorsGrid.innerHTML = '';
                
                if (appData.inspectors.length === 0) {
                    allInspectorsGrid.innerHTML = '<p>No inspectors found. Add an inspector to get started.</p>';
                } else {
                    appData.inspectors.forEach(inspector => {
                        allInspectorsGrid.appendChild(createInspectorCard(inspector));
                    });
                }
            }
            
            // Update available inspectors grid
            const availableInspectorsGrid = document.getElementById('available-inspector-grid');
            if (availableInspectorsGrid) {
                availableInspectorsGrid.innerHTML = '';
                
                const availableInspectors = appData.inspectors.filter(i => i.status === 'available');
                
                if (availableInspectors.length === 0) {
                    availableInspectorsGrid.innerHTML = '<p>No available inspectors found.</p>';
                } else {
                    availableInspectors.forEach(inspector => {
                        availableInspectorsGrid.appendChild(createInspectorCard(inspector));
                    });
                }
            }
            
            // Update assigned inspectors grid
            const assignedInspectorsGrid = document.getElementById('assigned-inspector-grid');
            if (assignedInspectorsGrid) {
                assignedInspectorsGrid.innerHTML = '';
                
                const assignedInspectors = appData.inspectors.filter(i => i.status === 'assigned');
                
                if (assignedInspectors.length === 0) {
                    assignedInspectorsGrid.innerHTML = '<p>No assigned inspectors found.</p>';
                } else {
                    assignedInspectors.forEach(inspector => {
                        assignedInspectorsGrid.appendChild(createInspectorCard(inspector));
                    });
                }
            }
        }
        
        function createInspectorCard(inspector) {
            const card = document.createElement('div');
            card.className = 'inspector-card';
            
            // Default avatar if none provided
            const avatarUrl = inspector.avatar || 'https://via.placeholder.com/100?text=' + inspector.name.charAt(0);
            
            // Create specialties badges
            const specialtiesBadges = inspector.specialties.map(specialtyId => {
                const specialty = appData.specialties.find(s => s.id === specialtyId);
                return specialty ? `<span class="inspector-badge">${specialty.name}</span>` : '';
            }).join('');
            
            card.innerHTML = `
                <div class="inspector-status-indicator ${inspector.status}"></div>
                <img src="${avatarUrl}" alt="${inspector.name}" class="inspector-avatar">
                <div class="inspector-name">${inspector.name}</div>
                <div class="inspector-title">${inspector.title}</div>
                <div>
                    ${specialtiesBadges}
                </div>
                <div class="inspector-stats">
                    <div class="inspector-stat">
                        <div class="inspector-stat-value">${inspector.completedInspections}</div>
                        <div class="inspector-stat-label">Completed</div>
                    </div>
                    <div class="inspector-stat">
                        <div class="inspector-stat-value">${inspector.scheduledInspections}</div>
                        <div class="inspector-stat-label">Scheduled</div>
                    </div>
                    <div class="inspector-stat">
                        <div class="inspector-stat-value">
                            <span class="status status-${inspector.status}">${inspector.status}</span>
                        </div>
                        <div class="inspector-stat-label">Status</div>
                    </div>
                </div>
                <div class="inspector-contact">
                    <a href="mailto:${inspector.email}">Email</a>
                    <a href="tel:${inspector.phone}">Call</a>
                    <button class="btn" data-action="view" data-type="inspector" data-id="${inspector.id}">View</button>
                </div>
                <div class="inspector-actions">
                    <button class="inspector-action-btn edit" data-action="edit" data-type="inspector" data-id="${inspector.id}">✎</button>
                    <button class="inspector-action-btn" data-action="delete" data-type="inspector" data-id="${inspector.id}">✕</button>
                </div>
            `;
            
            return card;
        }
        
        function updateSpecialtiesTable() {
            const tableBody = document.getElementById('specialties-table-body');
            if (!tableBody) return;
            
            tableBody.innerHTML = '';
            
            appData.specialties.forEach(specialty => {
                const row = document.createElement('tr');
                
                // Count inspectors with this specialty
                const inspectorsWithSpecialty = appData.inspectors.filter(
                    inspector => inspector.specialties.includes(specialty.id)
                );
                
                // Create inspector links
                const inspectorLinks = inspectorsWithSpecialty.map(
                    inspector => `<a href="#" data-action="view" data-type="inspector" data-id="${inspector.id}">${inspector.name}</a>`
                ).join(', ');
                
                row.innerHTML = `
                    <td>${specialty.name}</td>
                    <td>${specialty.description}</td>
                    <td>${inspectorLinks || 'None'}</td>
                `;
                
                tableBody.appendChild(row);
            });
        }
        
        function updateInspectorDropdowns() {
            // Update inspector dropdown in inspection form
            const inspectionInspectorDropdown = document.getElementById('inspection-inspector');
            if (inspectionInspectorDropdown) {
                // Get the current value
                const currentValue = inspectionInspectorDropdown.value;
                
                // Clear and rebuild the dropdown as a select element
                inspectionInspectorDropdown.innerHTML = '';
                
                // Add an empty option
                const emptyOption = document.createElement('option');
                emptyOption.value = '';
                emptyOption.textContent = '-- Select Inspector --';
                inspectionInspectorDropdown.appendChild(emptyOption);
                
                // Add all available inspectors
                const availableInspectors = appData.inspectors.filter(i => i.status === 'available');
                availableInspectors.forEach(inspector => {
                    const option = document.createElement('option');
                    option.value = inspector.name;
                    option.textContent = `${inspector.name} (${inspector.title})`;
                    inspectionInspectorDropdown.appendChild(option);
                });
                
                // Restore the previous value if it exists
                if (currentValue) {
                    inspectionInspectorDropdown.value = currentValue;
                }
            }
        }
        
        function createSampleReports() {
            appData.reports = [
                {
                    id: '1',
                    title: 'Supplier Performance Report',
                    type: 'supplier',
                    period: 'Q2 2023',
                    createdDate: '2023-07-01',
                    createdBy: 'System',
                    status: 'completed',
                    description: 'Quarterly performance analysis of all active suppliers',
                    metrics: {
                        averageRating: 4.3,
                        onTimeDelivery: 92,
                        qualityScore: 89,
                        costEfficiency: 78
                    }
                },
                {
                    id: '2',
                    title: 'Quality Control Summary',
                    type: 'quality',
                    period: 'June 2023',
                    createdDate: '2023-07-03',
                    createdBy: 'John Smith',
                    status: 'completed',
                    description: 'Monthly summary of quality control inspections and findings',
                    metrics: {
                        totalInspections: 45,
                        passRate: 98,
                        criticalIssues: 1,
                        minorIssues: 12
                    }
                },
                {
                    id: '3',
                    title: 'Inspection Results (Monthly)',
                    type: 'inspection',
                    period: 'June 2023',
                    createdDate: '2023-07-02',
                    createdBy: 'System',
                    status: 'completed',
                    description: 'Detailed breakdown of all inspections conducted in June',
                    metrics: {
                        completed: 45,
                        scheduled: 12,
                        cancelled: 3,
                        byType: {
                            quality: 22,
                            safety: 13,
                            compliance: 8,
                            environmental: 2
                        }
                    }
                },
                {
                    id: '4',
                    title: 'Customer Satisfaction Survey',
                    type: 'customer',
                    period: 'H1 2023',
                    createdDate: '2023-07-15',
                    createdBy: 'Marketing Team',
                    status: 'draft',
                    description: 'Semi-annual customer satisfaction survey results',
                    metrics: {
                        overallSatisfaction: 4.7,
                        responseRate: 68,
                        npsScore: 72,
                        topIssues: ['Delivery Time', 'Communication', 'Documentation']
                    }
                },
                {
                    id: '5',
                    title: 'Compliance Audit Report',
                    type: 'compliance',
                    period: 'Q2 2023',
                    createdDate: '2023-07-10',
                    createdBy: 'Compliance Team',
                    status: 'review',
                    description: 'Quarterly compliance audit findings and recommendations',
                    metrics: {
                        complianceScore: 96,
                        findings: 7,
                        criticalFindings: 0,
                        recommendedActions: 5
                    }
                }
            ];
        }
        
        function updateReportsUI() {
            // Update all reports table
            const allReportsTable = document.querySelector('#reports-table tbody');
            if (allReportsTable) {
                allReportsTable.innerHTML = '';
                
                appData.reports.forEach(report => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${report.title}</td>
                        <td>${capitalizeFirstLetter(report.type)}</td>
                        <td>${report.period}</td>
                        <td>${new Date(report.createdDate).toLocaleDateString()}</td>
                        <td>${report.createdBy}</td>
                        <td><span class="status status-${report.status}">${report.status}</span></td>
                        <td>
                            <button class="btn" data-action="view" data-type="report" data-id="${report.id}">View</button>
                            <button class="btn" data-action="download" data-type="report" data-id="${report.id}">Download</button>
                        </td>
                    `;
                    allReportsTable.appendChild(row);
                });
            }
            
            // Update supplier reports table
            const supplierReportsTable = document.querySelector('#supplier-reports-table tbody');
            if (supplierReportsTable) {
                supplierReportsTable.innerHTML = '';
                
                const supplierReports = appData.reports.filter(report => report.type === 'supplier');
                
                supplierReports.forEach(report => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${report.title}</td>
                        <td>${report.period}</td>
                        <td>${new Date(report.createdDate).toLocaleDateString()}</td>
                        <td><span class="status status-${report.status}">${report.status}</span></td>
                        <td>
                            <button class="btn" data-action="view" data-type="report" data-id="${report.id}">View</button>
                            <button class="btn" data-action="download" data-type="report" data-id="${report.id}">Download</button>
                        </td>
                    `;
                    supplierReportsTable.appendChild(row);
                });
            }
            
            // Update quality reports table
            const qualityReportsTable = document.querySelector('#quality-reports-table tbody');
            if (qualityReportsTable) {
                qualityReportsTable.innerHTML = '';
                
                const qualityReports = appData.reports.filter(report => report.type === 'quality');
                
                qualityReports.forEach(report => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${report.title}</td>
                        <td>${report.period}</td>
                        <td>${new Date(report.createdDate).toLocaleDateString()}</td>
                        <td><span class="status status-${report.status}">${report.status}</span></td>
                        <td>
                            <button class="btn" data-action="view" data-type="report" data-id="${report.id}">View</button>
                            <button class="btn" data-action="download" data-type="report" data-id="${report.id}">Download</button>
                        </td>
                    `;
                    qualityReportsTable.appendChild(row);
                });
            }
            
            // Update inspection reports table
            const inspectionReportsTable = document.querySelector('#inspection-reports-table tbody');
            if (inspectionReportsTable) {
                inspectionReportsTable.innerHTML = '';
                
                const inspectionReports = appData.reports.filter(report => report.type === 'inspection');
                
                inspectionReports.forEach(report => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${report.title}</td>
                        <td>${report.period}</td>
                        <td>${new Date(report.createdDate).toLocaleDateString()}</td>
                        <td><span class="status status-${report.status}">${report.status}</span></td>
                        <td>
                            <button class="btn" data-action="view" data-type="report" data-id="${report.id}">View</button>
                            <button class="btn" data-action="download" data-type="report" data-id="${report.id}">Download</button>
                        </td>
                    `;
                    inspectionReportsTable.appendChild(row);
                });
            }
        }
        
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        // Google Maps Integration
        let map;
        let markers = [];
        let infoWindow;
        
        // Initialize the map
        function initMap() {
            // Only initialize if we're on the suppliers page and the map tab is active
            const mapContainer = document.getElementById('supplier-map');
            if (!mapContainer || !mapContainer.offsetParent) return;
            
            // Define custom map style
            const mapStyles = [
                {
                    featureType: "administrative",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#444444" }]
                },
                {
                    featureType: "landscape",
                    elementType: "all",
                    stylers: [{ color: "#f2f2f2" }]
                },
                {
                    featureType: "poi",
                    elementType: "all",
                    stylers: [{ visibility: "off" }]
                },
                {
                    featureType: "road",
                    elementType: "all",
                    stylers: [{ saturation: -100 }, { lightness: 45 }]
                },
                {
                    featureType: "road.highway",
                    elementType: "all",
                    stylers: [{ visibility: "simplified" }]
                },
                {
                    featureType: "road.arterial",
                    elementType: "labels.icon",
                    stylers: [{ visibility: "off" }]
                },
                {
                    featureType: "transit",
                    elementType: "all",
                    stylers: [{ visibility: "off" }]
                },
                {
                    featureType: "water",
                    elementType: "all",
                    stylers: [{ color: "#b3d1ff" }, { visibility: "on" }]
                }
            ];
            
            // Create a new map centered on a default location (United States)
            map = new google.maps.Map(mapContainer, {
                center: { lat: 37.0902, lng: -95.7129 },
                zoom: 4,
                mapTypeControl: true,
                streetViewControl: false,
                fullscreenControl: true,
                styles: mapStyles,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
                }
            });
            
            // Create a single info window to be reused for each marker
            infoWindow = new google.maps.InfoWindow();
            
            // Load supplier locations onto the map
            loadSupplierLocations();
            
            // Set up the customer filter
            setupCustomerFilter();
        }
        
        // Load supplier locations onto the map
        function loadSupplierLocations(filteredCustomerId = '') {
            // Clear existing markers
            clearMarkers();
            
            // If we have no suppliers, exit
            if (!appData.suppliers || appData.suppliers.length === 0) return;
            
            // Filter suppliers by customer if needed
            let suppliersToShow = appData.suppliers;
            let customerRelationships = [];
            
            if (filteredCustomerId) {
                // Find all relationships for this customer
                customerRelationships = appData.relationships.filter(rel => rel.customerId === filteredCustomerId);
                
                // Get the supplier IDs from these relationships
                const supplierIds = customerRelationships.map(rel => rel.supplierId);
                
                // Filter suppliers to only those in the relationship
                suppliersToShow = appData.suppliers.filter(supplier => supplierIds.includes(supplier.id));
            }
            
            // Add markers for each supplier
            suppliersToShow.forEach(supplier => {
                // Get coordinates for this supplier
                let coordinates;
                
                // Use the coordinates directly from the supplier data if available
                if (supplier.coordinates) {
                    coordinates = supplier.coordinates;
                } else {
                    // Otherwise, get coordinates from the location string
                    coordinates = getCoordinatesFromLocation(supplier.location);
                }
                
                // Check if we're filtering by customer and get relationship type
                let relationshipType = null;
                if (filteredCustomerId) {
                    const relationship = customerRelationships.find(rel => rel.supplierId === supplier.id);
                    if (relationship) {
                        relationshipType = relationship.type;
                    }
                }
                
                // Define custom marker icon based on supplier status
                const markerIcon = {
                    path: google.maps.SymbolPath.CIRCLE,
                    fillColor: getSupplierStatusColor(supplier.status),
                    fillOpacity: 0.9,
                    scale: 10,
                    strokeColor: '#ffffff',
                    strokeWeight: 2
                };
                
                // If we have a relationship type, add a label to the marker
                let markerLabel = null;
                if (relationshipType) {
                    markerLabel = {
                        text: relationshipType.charAt(0).toUpperCase(),
                        color: '#ffffff',
                        fontSize: '10px',
                        fontWeight: 'bold'
                    };
                }
                
                // Create a marker for this supplier
                const marker = new google.maps.Marker({
                    position: coordinates,
                    map: map,
                    title: supplier.name,
                    animation: google.maps.Animation.DROP,
                    icon: markerIcon,
                    label: markerLabel
                });
                
                // Store the marker
                markers.push(marker);
                
                // Add click listener to show info window
                marker.addListener('click', () => {
                    showSupplierInfo(supplier, marker);
                });
            });
            
            // If we have markers, fit the map to show all of them
            if (markers.length > 0) {
                const bounds = new google.maps.LatLngBounds();
                markers.forEach(marker => bounds.extend(marker.getPosition()));
                map.fitBounds(bounds);
                
                // Don't zoom in too far on only one marker
                if (map.getZoom() > 15) {
                    map.setZoom(15);
                }
            }
            
            // Update legend to show relationship types if filtering by customer
            updateLegend(filteredCustomerId);
        }
        
        // Update the legend based on whether we're filtering by customer
        function updateLegend(filteredCustomerId) {
            const mapContainer = document.getElementById('supplier-map');
            if (!mapContainer) return;
            
            // Remove existing legend
            const existingLegend = mapContainer.querySelector('.map-legend');
            if (existingLegend) {
                existingLegend.remove();
            }
            
            // Create a new legend
            const legend = document.createElement('div');
            legend.className = 'map-legend';
            
            if (filteredCustomerId) {
                // Get customer name
                const customer = appData.customers.find(c => c.id === filteredCustomerId);
                const customerName = customer ? customer.name : 'Selected Customer';
                
                legend.innerHTML = `
                    <h4>Suppliers for ${customerName}</h4>
                    <div class="legend-item">
                        <span class="legend-marker" style="background-color: #4caf50;"></span>
                        <span>Active</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-marker" style="background-color: #ff9800;"></span>
                        <span>Pending</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-marker" style="background-color: #f44336;"></span>
                        <span>Inactive</span>
                    </div>
                    <div style="margin-top: 10px; border-top: 1px solid #eee; padding-top: 5px;">
                        <h4>Relationship Type</h4>
                        <div class="legend-item">
                            <span class="legend-label">P</span>
                            <span>Primary</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-label">S</span>
                            <span>Secondary</span>
                        </div>
                    </div>
                `;
            } else {
                legend.innerHTML = `
                    <h4>Supplier Status</h4>
                    <div class="legend-item">
                        <span class="legend-marker" style="background-color: #4caf50;"></span>
                        <span>Active</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-marker" style="background-color: #ff9800;"></span>
                        <span>Pending</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-marker" style="background-color: #f44336;"></span>
                        <span>Inactive</span>
                    </div>
                `;
            }
            
            // Add the legend to the map container
            mapContainer.appendChild(legend);
        }
        
        // Clear all markers from the map
        function clearMarkers() {
            markers.forEach(marker => marker.setMap(null));
            markers = [];
        }
        
        // Show supplier info in an info window
        function showSupplierInfo(supplier, marker) {
            // Find relationships for this supplier
            const supplierRelationships = appData.relationships.filter(rel => rel.supplierId === supplier.id);
            
            // Get customer names and relationship types
            const customerInfo = supplierRelationships.map(rel => {
                const customer = appData.customers.find(c => c.id === rel.customerId);
                if (customer) {
                    return `<li><strong>${customer.name}</strong> (${capitalizeFirstLetter(rel.type)})</li>`;
                }
                return '';
            }).join('');
            
            // Create the content for the info window
            const content = `
                <div class="map-marker-info">
                    <h3>${supplier.name}</h3>
                    <p><strong>Location:</strong> ${supplier.location}</p>
                    <p><strong>Rating:</strong> ${supplier.rating} / 5</p>
                    <p><strong>Contact:</strong> ${supplier.contactEmail}</p>
                    <p><strong>Status:</strong> <span class="status status-${supplier.status}">${supplier.status}</span></p>
                    
                    ${customerInfo ? `
                    <p><strong>Customers:</strong></p>
                    <ul style="padding-left: 20px; margin-top: 5px;">
                        ${customerInfo}
                    </ul>
                    ` : ''}
                    
                    <div style="margin-top: 10px;">
                        <button class="btn" onclick="viewSupplierDetails('${supplier.id}')">View Details</button>
                    </div>
                </div>
            `;
            
            // Set the content and open the info window
            infoWindow.setContent(content);
            infoWindow.open(map, marker);
        }
        
        // View supplier details from the map
        function viewSupplierDetails(supplierId) {
            // Find the supplier view button and trigger a click
            const viewButton = document.querySelector(`button[data-action="view"][data-type="supplier"][data-id="${supplierId}"]`);
            if (viewButton) {
                viewButton.click();
            }
        }
        
        // Set up the customer filter
        function setupCustomerFilter() {
            const customerFilter = document.getElementById('customer-filter');
            if (!customerFilter) return;
            
            // Clear existing options
            customerFilter.innerHTML = '<option value="">All Customers</option>';
            
            // Add options for each customer
            appData.customers.forEach(customer => {
                const option = document.createElement('option');
                option.value = customer.id;
                option.textContent = customer.name;
                customerFilter.appendChild(option);
            });
            
            // Add change event listener
            customerFilter.addEventListener('change', () => {
                const selectedCustomerId = customerFilter.value;
                loadSupplierLocations(selectedCustomerId);
            });
        }
        
        // Helper function to get coordinates from a location string
        // In a real app, you would use geocoding for this
        function getCoordinatesFromLocation(locationString) {
            // Check if the supplier has coordinates in our data
            const supplier = appData.suppliers.find(s => s.location === locationString);
            if (supplier && supplier.coordinates) {
                return supplier.coordinates;
            }
            
            // Fallback to a default location with a random offset if coordinates aren't found
            // For demo purposes, generate random coordinates around the US
            const baseCoordinates = { lat: 37.0902, lng: -95.7129 }; // Center of US
            
            // Generate a random offset (up to ~500 miles)
            const latOffset = (Math.random() - 0.5) * 10;
            const lngOffset = (Math.random() - 0.5) * 20;
            
            return {
                lat: baseCoordinates.lat + latOffset,
                lng: baseCoordinates.lng + lngOffset
            };
        }
        
        // Get color based on supplier status
        function getSupplierStatusColor(status) {
            switch (status) {
                case 'active':
                    return '#4caf50'; // Green
                case 'pending':
                    return '#ff9800'; // Orange
                case 'inactive':
                    return '#f44336'; // Red
                default:
                    return '#2196f3'; // Blue
            }
        }
        
        // Make sure the map is initialized when the tab is clicked
        document.addEventListener('click', (e) => {
            if (e.target.matches('.tab[data-tab="supplier-map-tab"]')) {
                // Wait a moment for the tab content to become visible
                setTimeout(initMap, 100);
            }
        });
        
        // Kanban Board Functionality
        let currentFilter = 'all';
        
        // Load tasks from API and render the Kanban board
        async function loadTasks() {
            try {
                const response = await fetch('/api/tasks');
                const data = await response.json();
                
                if (data.success) {
                    // Store tasks in appData
                    appData.tasks = data.data;
                    
                    // Render tasks on the board
                    renderKanbanBoard();
                } else {
                    console.error('Failed to load tasks:', data.message);
                }
            } catch (error) {
                console.error('Error loading tasks:', error);
            }
        }
        
        // Render the Kanban board with tasks
        function renderKanbanBoard() {
            // Clear all columns
            document.getElementById('backlog-tasks').innerHTML = '';
            document.getElementById('in-progress-tasks').innerHTML = '';
            document.getElementById('review-tasks').innerHTML = '';
            document.getElementById('done-tasks').innerHTML = '';
            
            // Filter tasks based on current filter
            const filteredTasks = currentFilter === 'all' 
                ? appData.tasks 
                : appData.tasks.filter(task => task.category === currentFilter);
            
            // Group tasks by status
            const backlogTasks = filteredTasks.filter(task => task.status === 'backlog');
            const inProgressTasks = filteredTasks.filter(task => task.status === 'in-progress');
            const reviewTasks = filteredTasks.filter(task => task.status === 'review');
            const doneTasks = filteredTasks.filter(task => task.status === 'done');
            
            // Update counts
            document.getElementById('backlog-count').textContent = backlogTasks.length;
            document.getElementById('in-progress-count').textContent = inProgressTasks.length;
            document.getElementById('review-count').textContent = reviewTasks.length;
            document.getElementById('done-count').textContent = doneTasks.length;
            
            // Render tasks in each column
            backlogTasks.forEach(task => renderTask(task, 'backlog-tasks'));
            inProgressTasks.forEach(task => renderTask(task, 'in-progress-tasks'));
            reviewTasks.forEach(task => renderTask(task, 'review-tasks'));
            doneTasks.forEach(task => renderTask(task, 'done-tasks'));
            
            // Set up drag and drop
            setupDragAndDrop();
        }
        
        // Render a single task card
        function renderTask(task, containerId) {
            const container = document.getElementById(containerId);
            
            const taskElement = document.createElement('div');
            taskElement.className = 'kanban-task';
            taskElement.setAttribute('data-id', task.id);
            taskElement.setAttribute('data-category', task.category);
            taskElement.setAttribute('draggable', 'true');
            
            // Get initials for avatar
            const initials = task.assignee.split(' ').map(name => name[0]).join('');
            
            taskElement.innerHTML = `
                <div class="kanban-task-priority priority-${task.priority}"></div>
                <div class="kanban-task-title">${task.title}</div>
                <div class="kanban-task-description">${truncateText(task.description, 80)}</div>
                <div class="kanban-task-meta">
                    <div class="kanban-task-assignee">
                        <div class="kanban-task-assignee-avatar">${initials}</div>
                        <span>${task.assignee}</span>
                    </div>
                    <div class="kanban-task-due">
                        <span>${formatDate(task.dueDate)}</span>
                    </div>
                </div>
            `;
            
            // Add click event to view task details
            taskElement.addEventListener('click', () => {
                viewTaskDetails(task.id);
            });
            
            container.appendChild(taskElement);
        }
        
        // View task details
        function viewTaskDetails(taskId) {
            const task = appData.tasks.find(t => t.id === taskId);
            if (!task) return;
            
            // Set task details in the modal
            document.getElementById('task-detail-title').textContent = task.title;
            document.getElementById('task-detail-description').textContent = task.description;
            document.getElementById('task-detail-status').textContent = formatStatus(task.status);
            document.getElementById('task-detail-priority').textContent = capitalizeFirstLetter(task.priority);
            document.getElementById('task-detail-category').textContent = capitalizeFirstLetter(task.category);
            document.getElementById('task-detail-assignee').textContent = task.assignee;
            document.getElementById('task-detail-due-date').textContent = formatDate(task.dueDate);
            document.getElementById('task-detail-created-date').textContent = formatDate(task.createdDate);
            
            // Set related item info
            if (task.relatedTo && task.relatedTo.type && task.relatedTo.id) {
                let relatedItemName = '';
                
                if (task.relatedTo.type === 'supplier') {
                    const supplier = appData.suppliers.find(s => s.id === task.relatedTo.id);
                    relatedItemName = supplier ? supplier.name : 'Unknown Supplier';
                } else if (task.relatedTo.type === 'customer') {
                    const customer = appData.customers.find(c => c.id === task.relatedTo.id);
                    relatedItemName = customer ? customer.name : 'Unknown Customer';
                } else if (task.relatedTo.type === 'inspection') {
                    const inspection = appData.inspections.find(i => i.id === task.relatedTo.id);
                    relatedItemName = inspection ? `Inspection #${inspection.id}` : 'Unknown Inspection';
                }
                
                document.getElementById('task-detail-related').textContent = `${capitalizeFirstLetter(task.relatedTo.type)}: ${relatedItemName}`;
            } else {
                document.getElementById('task-detail-related').textContent = 'None';
            }
            
            // Set up edit button
            document.getElementById('edit-task-btn').onclick = () => {
                closeModal('task-detail-modal');
                editTask(task.id);
            };
            
            // Set up delete button
            document.getElementById('delete-task-btn').onclick = () => {
                if (confirm('Are you sure you want to delete this task?')) {
                    deleteTask(task.id);
                }
            };
            
            // Show the modal
            document.getElementById('task-detail-modal').style.display = 'block';
        }
        
        // Add a new task
        function addTask(status = 'backlog') {
            // Reset the form
            document.getElementById('task-form').reset();
            document.getElementById('task-id').value = '';
            document.getElementById('task-modal-title').textContent = 'Add New Task';
            
            // Set the selected status
            document.getElementById('task-status').value = status;
            
            // Set default due date to tomorrow
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            document.getElementById('task-due-date').value = tomorrow.toISOString().split('T')[0];
            
            // Show the modal
            document.getElementById('add-task-modal').style.display = 'block';
        }
        
        // Edit an existing task
        function editTask(taskId) {
            const task = appData.tasks.find(t => t.id === taskId);
            if (!task) return;
            
            // Set form title
            document.getElementById('task-modal-title').textContent = 'Edit Task';
            
            // Fill the form with task data
            document.getElementById('task-id').value = task.id;
            document.getElementById('task-title').value = task.title;
            document.getElementById('task-description').value = task.description;
            document.getElementById('task-status').value = task.status;
            document.getElementById('task-priority').value = task.priority;
            document.getElementById('task-category').value = task.category;
            document.getElementById('task-assignee').value = task.assignee;
            document.getElementById('task-due-date').value = task.dueDate;
            
            // Set related item if exists
            if (task.relatedTo && task.relatedTo.type) {
                document.getElementById('task-related-type').value = task.relatedTo.type;
                
                // Show the related ID container
                document.getElementById('task-related-id-container').style.display = 'block';
                
                // Load related items and select the current one
                loadRelatedItems(task.relatedTo.type, task.relatedTo.id);
            } else {
                document.getElementById('task-related-type').value = '';
                document.getElementById('task-related-id-container').style.display = 'none';
            }
            
            // Show the modal
            document.getElementById('add-task-modal').style.display = 'block';
        }
        
        // Delete a task
        async function deleteTask(taskId) {
            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Remove task from appData
                    appData.tasks = appData.tasks.filter(task => task.id !== taskId);
                    
                    // Close the modal
                    closeModal('task-detail-modal');
                    
                    // Re-render the board
                    renderKanbanBoard();
                    
                    // Show success message
                    alert('Task deleted successfully!');
                } else {
                    console.error('Failed to delete task:', data.message);
                    alert('Failed to delete task. Please try again.');
                }
            } catch (error) {
                console.error('Error deleting task:', error);
                alert('Error deleting task. Please check your connection and try again.');
            }
        }
        
        // Load related items for task form
        function loadRelatedItems(type, selectedId = null) {
            const container = document.getElementById('task-related-id');
            container.innerHTML = '';
            
            let items = [];
            
            if (type === 'supplier') {
                items = appData.suppliers;
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item.name;
                    container.appendChild(option);
                });
            } else if (type === 'customer') {
                items = appData.customers;
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item.name;
                    container.appendChild(option);
                });
            } else if (type === 'inspection') {
                items = appData.inspections;
                items.forEach(item => {
                    const supplier = appData.suppliers.find(s => s.id === item.supplierId);
                    const supplierName = supplier ? supplier.name : 'Unknown';
                    
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = `#${item.id} - ${supplierName} (${item.type})`;
                    container.appendChild(option);
                });
            }
            
            // Select the item if provided
            if (selectedId) {
                container.value = selectedId;
            }
        }
        
        // Set up drag and drop functionality
        function setupDragAndDrop() {
            const taskElements = document.querySelectorAll('.kanban-task');
            const dropZones = document.querySelectorAll('.kanban-column-body');
            
            taskElements.forEach(task => {
                task.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', task.getAttribute('data-id'));
                    task.classList.add('dragging');
                });
                
                task.addEventListener('dragend', () => {
                    task.classList.remove('dragging');
                });
            });
            
            dropZones.forEach(zone => {
                zone.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    zone.classList.add('drag-over');
                });
                
                zone.addEventListener('dragleave', () => {
                    zone.classList.remove('drag-over');
                });
                
                zone.addEventListener('drop', async (e) => {
                    e.preventDefault();
                    zone.classList.remove('drag-over');
                    
                    const taskId = e.dataTransfer.getData('text/plain');
                    const newStatus = zone.id.replace('-tasks', '');
                    
                    // Find the task
                    const task = appData.tasks.find(t => t.id === taskId);
                    if (!task || task.status === newStatus) return;
                    
                    // Update task status
                    task.status = newStatus;
                    
                    try {
                        // Update on the server
                        const response = await fetch(`/api/tasks/${taskId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ status: newStatus })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            // Re-render the board
                            renderKanbanBoard();
                        } else {
                            console.error('Failed to update task status:', data.message);
                        }
                    } catch (error) {
                        console.error('Error updating task status:', error);
                    }
                });
            });
        }
        
        // Helper function to truncate text
        function truncateText(text, maxLength) {
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }
        
        // Helper function to format date
        function formatDate(dateString) {
            const options = { month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }
        
        // Helper function to format status
        function formatStatus(status) {
            switch (status) {
                case 'backlog':
                    return 'Backlog';
                case 'in-progress':
                    return 'In Progress';
                case 'review':
                    return 'Review';
                case 'done':
                    return 'Done';
                default:
                    return capitalizeFirstLetter(status);
            }
        }
        
        // Helper function to close a modal
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        
        // Set up Kanban board event listeners
        function setupKanbanBoard() {
            // Add task button
            document.getElementById('add-task-btn').addEventListener('click', () => {
                addTask();
            });
            
            // Add task from column
            document.querySelectorAll('.kanban-add-task').forEach(element => {
                element.addEventListener('click', () => {
                    const status = element.getAttribute('data-status');
                    addTask(status);
                });
            });
            
            // Filter buttons
            document.querySelectorAll('.kanban-filter').forEach(filter => {
                filter.addEventListener('click', () => {
                    // Remove active class from all filters
                    document.querySelectorAll('.kanban-filter').forEach(f => {
                        f.classList.remove('active');
                    });
                    
                    // Add active class to clicked filter
                    filter.classList.add('active');
                    
                    // Set current filter
                    currentFilter = filter.getAttribute('data-filter');
                    
                    // Re-render the board
                    renderKanbanBoard();
                });
            });
            
            // Task form submission
            document.getElementById('task-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const taskId = document.getElementById('task-id').value;
                const isNewTask = !taskId;
                
                // Gather form data
                const taskData = {
                    title: document.getElementById('task-title').value,
                    description: document.getElementById('task-description').value,
                    status: document.getElementById('task-status').value,
                    priority: document.getElementById('task-priority').value,
                    category: document.getElementById('task-category').value,
                    assignee: document.getElementById('task-assignee').value,
                    dueDate: document.getElementById('task-due-date').value
                };
                
                // Add related item if selected
                const relatedType = document.getElementById('task-related-type').value;
                if (relatedType) {
                    const relatedId = document.getElementById('task-related-id').value;
                    taskData.relatedTo = {
                        type: relatedType,
                        id: relatedId || null
                    };
                } else {
                    taskData.relatedTo = { type: null, id: null };
                }
                
                try {
                    let response;
                    
                    if (isNewTask) {
                        // Create new task
                        response = await fetch('/api/tasks', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(taskData)
                        });
                    } else {
                        // Update existing task
                        response = await fetch(`/api/tasks/${taskId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(taskData)
                        });
                    }
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (isNewTask) {
                            // Add new task to appData
                            appData.tasks.push(data.data);
                        } else {
                            // Update task in appData
                            const index = appData.tasks.findIndex(t => t.id === taskId);
                            if (index !== -1) {
                                appData.tasks[index] = data.data;
                            }
                        }
                        
                        // Close the modal
                        closeModal('add-task-modal');
                        
                        // Re-render the board
                        renderKanbanBoard();
                        
                        // Show success message
                        alert(`Task ${isNewTask ? 'created' : 'updated'} successfully!`);
                    } else {
                        console.error('Failed to save task:', data.message);
                        alert('Failed to save task. Please try again.');
                    }
                } catch (error) {
                    console.error('Error saving task:', error);
                    alert('Error saving task. Please check your connection and try again.');
                }
            });
            
            // Related type change
            document.getElementById('task-related-type').addEventListener('change', (e) => {
                const relatedType = e.target.value;
                const relatedIdContainer = document.getElementById('task-related-id-container');
                
                if (relatedType) {
                    // Show related ID container
                    relatedIdContainer.style.display = 'block';
                    
                    // Load related items
                    loadRelatedItems(relatedType);
                } else {
                    // Hide related ID container
                    relatedIdContainer.style.display = 'none';
                }
            });
        }
        
        // Notifications functionality
        function setupNotifications() {
            // Get DOM elements
            const notificationsBtn = document.getElementById('notifications-btn');
            const notificationsDropdown = document.getElementById('notifications-dropdown');
            const notificationsList = document.getElementById('notifications-list');
            const notificationCount = document.getElementById('notification-count');
            const markAllReadBtn = document.getElementById('mark-all-read');
            
            // Initialize notifications array
            const notifications = [];
            
            // Generate notifications based on data
            generateNotifications(notifications);
            
            // Update notification count badge
            updateNotificationCount(notifications, notificationCount);
            
            // Render notifications in the dropdown
            renderNotifications(notifications, notificationsList);
            
            // Toggle dropdown when clicking the notification button
            notificationsBtn.addEventListener('click', () => {
                notificationsDropdown.classList.toggle('show');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (!notificationsBtn.contains(e.target) && !notificationsDropdown.contains(e.target)) {
                    notificationsDropdown.classList.remove('show');
                }
            });
            
            // Mark all notifications as read
            markAllReadBtn.addEventListener('click', () => {
                notifications.forEach(notification => {
                    notification.read = true;
                });
                
                updateNotificationCount(notifications, notificationCount);
                renderNotifications(notifications, notificationsList);
            });
            
            // Set up click handler for individual notifications
            notificationsList.addEventListener('click', (e) => {
                const notificationItem = e.target.closest('.notification-item');
                if (notificationItem) {
                    const notificationId = notificationItem.getAttribute('data-id');
                    const notification = notifications.find(n => n.id === notificationId);
                    
                    if (notification) {
                        // Mark as read
                        notification.read = true;
                        updateNotificationCount(notifications, notificationCount);
                        renderNotifications(notifications, notificationsList);
                        
                        // Handle notification action based on type
                        handleNotificationAction(notification);
                    }
                }
            });
        }
        
        function generateNotifications(notifications) {
            // Clear existing notifications
            notifications.length = 0;
            
            // Check for past due tasks
            const today = new Date();
            const pastDueTasks = appData.tasks.filter(task => {
                const dueDate = new Date(task.dueDate);
                return dueDate < today && task.status !== 'done';
            });
            
            pastDueTasks.forEach(task => {
                notifications.push({
                    id: `task-${task.id}`,
                    type: 'danger',
                    icon: '⚠️',
                    title: 'Past Due Task',
                    message: `"${task.title}" was due on ${new Date(task.dueDate).toLocaleDateString()}`,
                    time: getTimeAgo(new Date(task.dueDate)),
                    read: false,
                    actionType: 'task',
                    actionId: task.id
                });
            });
            
            // Check for upcoming inspections
            const nextWeek = new Date();
            nextWeek.setDate(today.getDate() + 7);
            
            const upcomingInspections = appData.inspections.filter(inspection => {
                const inspectionDate = new Date(inspection.date);
                return inspectionDate > today && inspectionDate <= nextWeek && inspection.status === 'scheduled';
            });
            
            upcomingInspections.forEach(inspection => {
                const supplier = appData.suppliers.find(s => s.id === inspection.supplierId);
                const supplierName = supplier ? supplier.name : 'Unknown Supplier';
                
                notifications.push({
                    id: `inspection-${inspection.id}`,
                    type: 'warning',
                    icon: '🔍',
                    title: 'Upcoming Inspection',
                    message: `${inspection.type} inspection for ${supplierName} scheduled on ${new Date(inspection.date).toLocaleDateString()}`,
                    time: getTimeAgo(new Date()),
                    read: false,
                    actionType: 'inspection',
                    actionId: inspection.id
                });
            });
            
            // Check for suppliers with low ratings
            const lowRatedSuppliers = appData.suppliers.filter(supplier => supplier.rating < 3.5 && supplier.status === 'active');
            
            lowRatedSuppliers.forEach(supplier => {
                notifications.push({
                    id: `supplier-${supplier.id}`,
                    type: 'warning',
                    icon: '⭐',
                    title: 'Low Supplier Rating',
                    message: `${supplier.name} has a low rating of ${supplier.rating}`,
                    time: getTimeAgo(new Date()),
                    read: false,
                    actionType: 'supplier',
                    actionId: supplier.id
                });
            });
            
            // Add a few sample notifications for demonstration
            if (notifications.length < 3) {
                notifications.push({
                    id: 'sample-1',
                    type: 'success',
                    icon: '✅',
                    title: 'System Update',
                    message: 'AeroSuite was updated to version 2.5',
                    time: '2 days ago',
                    read: false,
                    actionType: 'none',
                    actionId: null
                });
                
                notifications.push({
                    id: 'sample-2',
                    type: 'info',
                    icon: '📊',
                    title: 'New Report Available',
                    message: 'Monthly quality report for June 2023 is ready',
                    time: '3 days ago',
                    read: true,
                    actionType: 'report',
                    actionId: '3'
                });
            }
            
            // Sort notifications by read status and then by time
            notifications.sort((a, b) => {
                if (a.read !== b.read) return a.read ? 1 : -1;
                return 0; // Preserve the order for now
            });
        }
        
        function updateNotificationCount(notifications, countElement) {
            const unreadCount = notifications.filter(n => !n.read).length;
            countElement.textContent = unreadCount;
            
            if (unreadCount === 0) {
                countElement.style.display = 'none';
            } else {
                countElement.style.display = 'flex';
            }
        }
        
        function renderNotifications(notifications, containerElement) {
            containerElement.innerHTML = '';
            
            if (notifications.length === 0) {
                containerElement.innerHTML = '<div class="notification-item"><div class="notification-content"><div class="notification-message">No notifications</div></div></div>';
                return;
            }
            
            notifications.forEach(notification => {
                const notificationElement = document.createElement('div');
                notificationElement.classList.add('notification-item');
                notificationElement.setAttribute('data-id', notification.id);
                
                if (!notification.read) {
                    notificationElement.classList.add('unread');
                }
                
                notificationElement.innerHTML = `
                    <div class="notification-icon-wrapper ${notification.type}">
                        <span>${notification.icon}</span>
                    </div>
                    <div class="notification-content">
                        <div class="notification-title">${notification.title}</div>
                        <div class="notification-message">${notification.message}</div>
                        <div class="notification-time">${notification.time}</div>
                    </div>
                `;
                
                containerElement.appendChild(notificationElement);
            });
        }
        
        function handleNotificationAction(notification) {
            // Close the dropdown
            document.getElementById('notifications-dropdown').classList.remove('show');
            
            // Handle different notification types
            switch (notification.actionType) {
                case 'task':
                    // Navigate to tasks page and open task details
                    navigateToPage('tasks-page');
                    setTimeout(() => {
                        const taskElement = document.querySelector(`.kanban-task[data-id="${notification.actionId}"]`);
                        if (taskElement) {
                            taskElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            taskElement.classList.add('highlight');
                            setTimeout(() => {
                                taskElement.classList.remove('highlight');
                            }, 2000);
                        }
                    }, 300);
                    break;
                    
                case 'inspection':
                    // Navigate to inspections page and show inspection details
                    navigateToPage('inspections-page');
                    setTimeout(() => {
                        viewDetails('inspection', notification.actionId);
                    }, 300);
                    break;
                    
                case 'supplier':
                    // Navigate to suppliers page and show supplier details
                    navigateToPage('suppliers-page');
                    setTimeout(() => {
                        viewDetails('supplier', notification.actionId);
                    }, 300);
                    break;
                    
                case 'report':
                    // Navigate to reports page and show report details
                    navigateToPage('reports-page');
                    setTimeout(() => {
                        viewReport(notification.actionId);
                    }, 300);
                    break;
            }
        }
        
        function navigateToPage(pageId) {
            // Get the hash from pageId
            const hash = '#' + pageId.replace('-page', '');
            
            // Update the URL hash
            window.location.hash = hash;
        }
        
        function getTimeAgo(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) {
                return 'Just now';
            }
            
            const diffInMinutes = Math.floor(diffInSeconds / 60);
            if (diffInMinutes < 60) {
                return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;
            }
            
            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 24) {
                return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
            }
            
            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays < 30) {
                return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
            }
            
            const diffInMonths = Math.floor(diffInDays / 30);
            if (diffInMonths < 12) {
                return `${diffInMonths} month${diffInMonths > 1 ? 's' : ''} ago`;
            }
            
            const diffInYears = Math.floor(diffInMonths / 12);
            return `${diffInYears} year${diffInYears > 1 ? 's' : ''} ago`;
        }
    </script>
</body>
</html> 