<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AeroSuite API Demo</title>
    <style>
        :root {
            /* Apple-inspired color palette */
            --blue: #0A84FF;
            --green: #30D158;
            --indigo: #5E5CE6;
            --orange: #FF9F0A;
            --pink: #FF375F;
            --purple: #BF5AF2;
            --red: #FF453A;
            --teal: #64D2FF;
            --yellow: #FFD60A;
            
            /* Neutral colors */
            --text-primary: #1D1D1F;
            --text-secondary: #515154;
            --text-tertiary: #86868B;
            --background: #F5F5F7;
            --card-bg: #FFFFFF;
            --border-color: #D2D2D7;
            
            /* Status colors */
            --success: var(--green);
            --warning: var(--orange);
            --error: var(--red);
            --info: var(--blue);
            
            /* Spacing */
            --space-xs: 4px;
            --space-sm: 8px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
        }
        
        @font-face {
            font-family: 'SF Pro Display';
            src: local('SF Pro Display'), 
                 local('SFProDisplay'),
                 url('https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-regular-webfont.woff') format('woff');
            font-weight: 400;
            font-style: normal;
        }
        
        @font-face {
            font-family: 'SF Pro Display';
            src: local('SF Pro Display Medium'), 
                 local('SFProDisplay-Medium'),
                 url('https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-medium-webfont.woff') format('woff');
            font-weight: 500;
            font-style: normal;
        }
        
        @font-face {
            font-family: 'SF Pro Display';
            src: local('SF Pro Display Semibold'), 
                 local('SFProDisplay-Semibold'),
                 url('https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-semibold-webfont.woff') format('woff');
            font-weight: 600;
            font-style: normal;
        }
        
        body {
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--background);
            color: var(--text-primary);
            line-height: 1.5;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            position: relative;
        }
        
        /* Demo Watermark Styles */
        .demo-watermark {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, var(--orange), var(--red));
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 12px;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            z-index: 1000;
            box-shadow: 0 4px 12px rgba(255, 159, 10, 0.3);
            animation: pulse 2s infinite;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .demo-watermark::before {
            content: "ðŸŽ¬";
            margin-right: 6px;
        }
        
        @keyframes pulse {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 4px 12px rgba(255, 159, 10, 0.3);
            }
            50% { 
                transform: scale(1.05);
                box-shadow: 0 6px 16px rgba(255, 159, 10, 0.4);
            }
        }
        
        /* Background watermark for large screens */
        .demo-background-watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 120px;
            font-weight: 900;
            color: rgba(255, 159, 10, 0.03);
            z-index: -1;
            pointer-events: none;
            user-select: none;
            letter-spacing: 10px;
        }
        
        h1 {
            color: var(--text-primary);
            text-align: center;
            font-weight: 600;
            font-size: 32px;
            letter-spacing: -0.01em;
            margin-bottom: 32px;
        }
        
        h2 {
            font-weight: 500;
            font-size: 20px;
            margin-bottom: 16px;
            color: var(--text-primary);
        }
        
        .api-section {
            background: var(--card-bg);
            padding: 24px;
            margin: 24px 0;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
            transition: transform 0.2s cubic-bezier(0.4, 0.0, 0.2, 1), 
                        box-shadow 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
        }
        
        .api-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
        }
        
        button {
            background: var(--blue);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            margin: 5px;
            font-family: inherit;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
            box-shadow: 0 2px 4px rgba(10, 132, 255, 0.3);
        }
        
        button:hover {
            background: #0071E3;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(10, 132, 255, 0.4);
        }
        
        button:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(10, 132, 255, 0.3);
        }
        
        input {
            padding: 10px 16px;
            border-radius: 10px;
            border: 1px solid var(--border-color);
            margin: 5px;
            font-family: inherit;
            font-size: 14px;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        
        input:focus {
            outline: none;
            border-color: var(--blue);
            box-shadow: 0 0 0 3px rgba(10, 132, 255, 0.2);
        }
        
        pre {
            background: #F6F6F6;
            padding: 16px;
            border-radius: 10px;
            overflow-x: auto;
            font-family: 'SF Mono', SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 13px;
            line-height: 1.6;
            color: var(--text-primary);
        }
        
        .error {
            color: var(--red);
            font-weight: 500;
        }
        
        .success {
            color: var(--green);
            font-weight: 500;
        }
        
        /* Apple-inspired animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .api-section {
            animation: fadeIn 0.3s ease-out forwards;
            animation-fill-mode: both;
        }
        
        .api-section:nth-child(1) { animation-delay: 0.1s; }
        .api-section:nth-child(2) { animation-delay: 0.2s; }
        .api-section:nth-child(3) { animation-delay: 0.3s; }
        .api-section:nth-child(4) { animation-delay: 0.4s; }
        .api-section:nth-child(5) { animation-delay: 0.5s; }
    </style>
</head>
<body>
    <!-- Demo Watermarks -->
    <div class="demo-watermark">Demo Mode</div>
    <div class="demo-background-watermark">DEMO</div>
    
    <h1>AeroSuite API Demo</h1>
    
    <div class="api-section">
        <h2>Server Status</h2>
        <button onclick="checkHealth()">Check Health</button>
        <pre id="health-result">Click button to check server health...</pre>
    </div>

    <div class="api-section">
        <h2>Authentication</h2>
        <input type="email" id="email" placeholder="Email" value="test@example.com">
        <input type="password" id="password" placeholder="Password" value="password">
        <button onclick="login()">Login</button>
        <pre id="auth-result">Enter credentials and click login...</pre>
    </div>

    <div class="api-section">
        <h2>Suppliers</h2>
        <button onclick="getSuppliers()">Get Suppliers</button>
        <pre id="suppliers-result">Click button to load suppliers...</pre>
    </div>

    <div class="api-section">
        <h2>Customers</h2>
        <button onclick="getCustomers()">Get Customers</button>
        <pre id="customers-result">Click button to load customers...</pre>
    </div>

    <div class="api-section">
        <h2>Inspections</h2>
        <button onclick="getInspections()">Get Inspections</button>
        <pre id="inspections-result">Click button to load inspections...</pre>
    </div>

    <script>
        const API_BASE = '/api';
        let authToken = null;

        async function checkHealth() {
            try {
                const response = await fetch(`${API_BASE}/health`);
                const data = await response.json();
                document.getElementById('health-result').innerHTML = `<span class="success">âœ“ Server is running</span>\n${JSON.stringify(data, null, 2)}`;
            } catch (error) {
                document.getElementById('health-result').innerHTML = `<span class="error">âœ— Error: ${error.message}</span>`;
            }
        }

        async function login() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            try {
                const response = await fetch(`${API_BASE}/auth/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, password })
                });
                const data = await response.json();
                
                if (data.success && data.data.token) {
                    authToken = data.data.token;
                    document.getElementById('auth-result').innerHTML = `<span class="success">âœ“ Login successful</span>\n${JSON.stringify(data, null, 2)}`;
                } else {
                    document.getElementById('auth-result').innerHTML = `<span class="error">âœ— Login failed</span>\n${JSON.stringify(data, null, 2)}`;
                }
            } catch (error) {
                document.getElementById('auth-result').innerHTML = `<span class="error">âœ— Error: ${error.message}</span>`;
            }
        }

        async function getSuppliers() {
            try {
                const headers = {};
                if (authToken) headers['Authorization'] = `Bearer ${authToken}`;
                
                const response = await fetch(`${API_BASE}/suppliers`, { headers });
                const data = await response.json();
                if (data.success && Array.isArray(data.data)) {
                    document.getElementById('suppliers-result').innerHTML =
                        data.data.map(supplier => `
                            <div style="margin-bottom: 18px; padding-bottom: 12px; border-bottom: 1px solid #eee;">
                                <strong>${supplier.name}</strong> <span style="color: var(--text-tertiary);">(${supplier.status})</span><br>
                                <span style="color: var(--text-secondary);">DUNS:</span> ${supplier.duns || '-'}<br>
                                <span style="color: var(--text-secondary);">TIN:</span> ${supplier.tin || '-'}<br>
                                <span style="color: var(--text-secondary);">CAGE:</span> ${supplier.cage || '-'}<br>
                                <span style="color: var(--text-secondary);">Type:</span> ${supplier.supplierType || '-'}<br>
                                <span style="color: var(--text-secondary);">Certifications:</span> ${(supplier.certifications || []).join(', ') || '-'}<br>
                                <span style="color: var(--text-secondary);">Ship To:</span> ${supplier.shipTo || '-'}<br>
                                <span style="color: var(--text-secondary);">Bill To:</span> ${supplier.billTo || '-'}<br>
                                <span style="color: var(--text-secondary);">Phone:</span> ${supplier.phone || '-'}<br>
                                <span style="color: var(--text-secondary);">Fax:</span> ${supplier.fax || '-'}<br>
                                <span style="color: var(--text-secondary);">Website:</span> <a href="${supplier.website}" target="_blank">${supplier.website}</a><br>
                                <span style="color: var(--text-secondary);">Contact:</span> ${supplier.primaryContact ? supplier.primaryContact.name + ' (' + supplier.primaryContact.email + ')' : '-'}<br>
                                <span style="color: var(--text-secondary);">Bank Terms:</span> ${supplier.bankTerms || '-'}<br>
                                <span style="color: var(--text-secondary);">Location:</span> ${supplier.location || '-'}<br>
                                <span style="color: var(--text-secondary);">Email:</span> ${supplier.contactEmail || '-'}<br>
                                <span style="color: var(--text-secondary);">Rating:</span> ${supplier.rating || '-'}
                            </div>
                        `).join('');
                } else {
                    document.getElementById('suppliers-result').innerHTML = `<span class="error">âœ— No suppliers found</span>`;
                }
            } catch (error) {
                document.getElementById('suppliers-result').innerHTML = `<span class="error">âœ— Error: ${error.message}</span>`;
            }
        }

        async function getCustomers() {
            try {
                const headers = {};
                if (authToken) headers['Authorization'] = `Bearer ${authToken}`;
                
                const response = await fetch(`${API_BASE}/customers`, { headers });
                const data = await response.json();
                if (data.success && Array.isArray(data.data)) {
                    document.getElementById('customers-result').innerHTML =
                        data.data.map(customer => `
                            <div style="margin-bottom: 18px; padding-bottom: 12px; border-bottom: 1px solid #eee;">
                                <strong>${customer.name}</strong> <span style="color: var(--text-tertiary);">(${customer.status})</span><br>
                                <span style="color: var(--text-secondary);">Industry:</span> ${customer.industry || '-'}<br>
                                <span style="color: var(--text-secondary);">DUNS:</span> ${customer.duns || '-'}<br>
                                <span style="color: var(--text-secondary);">TIN:</span> ${customer.tin || '-'}<br>
                                <span style="color: var(--text-secondary);">CAGE:</span> ${customer.cage || '-'}<br>
                                <span style="color: var(--text-secondary);">Ship To:</span> ${customer.shipTo || '-'}<br>
                                <span style="color: var(--text-secondary);">Bill To:</span> ${customer.billTo || '-'}<br>
                                <span style="color: var(--text-secondary);">Phone:</span> ${customer.phone || '-'}<br>
                                <span style="color: var(--text-secondary);">Fax:</span> ${customer.fax || '-'}<br>
                                <span style="color: var(--text-secondary);">Website:</span> <a href="${customer.website}" target="_blank">${customer.website}</a><br>
                                <span style="color: var(--text-secondary);">Contact:</span> ${customer.primaryContact ? customer.primaryContact.name + ' (' + customer.primaryContact.email + ')' : '-'}<br>
                                <span style="color: var(--text-secondary);">Location:</span> ${customer.location || '-'}<br>
                                <span style="color: var(--text-secondary);">Email:</span> ${customer.contactEmail || '-'}
                            </div>
                        `).join('');
                } else {
                    document.getElementById('customers-result').innerHTML = `<span class="error">âœ— No customers found</span>`;
                }
            } catch (error) {
                document.getElementById('customers-result').innerHTML = `<span class="error">âœ— Error: ${error.message}</span>`;
            }
        }

        async function getInspections() {
            try {
                const headers = {};
                if (authToken) headers['Authorization'] = `Bearer ${authToken}`;
                
                const response = await fetch(`${API_BASE}/inspections`, { headers });
                const data = await response.json();
                if (data.success && Array.isArray(data.data)) {
                    document.getElementById('inspections-result').innerHTML =
                        data.data.map(inspection => `
                            <div style="margin-bottom: 18px; padding-bottom: 12px; border-bottom: 1px solid #eee;">
                                <strong>Inspection #${inspection.id}</strong> <span style="color: var(--text-tertiary);">(${inspection.status})</span><br>
                                <span style="color: var(--text-secondary);">Supplier ID:</span> ${inspection.supplierId || '-'}<br>
                                <span style="color: var(--text-secondary);">Type:</span> ${inspection.type || '-'}<br>
                                <span style="color: var(--text-secondary);">Date:</span> ${inspection.date || '-'}<br>
                                <span style="color: var(--text-secondary);">Inspector:</span> ${inspection.inspector || '-'}<br>
                                <span style="color: var(--text-secondary);">Result:</span> ${inspection.result || '-'}<br>
                                <span style="color: var(--text-secondary);">PO Number:</span> ${inspection.poNumber || '-'}<br>
                                <span style="color: var(--text-secondary);">Part Number:</span> ${inspection.partNumber || '-'}<br>
                                <span style="color: var(--text-secondary);">Lot Number:</span> ${inspection.lotNumber || '-'}<br>
                                <span style="color: var(--text-secondary);">Certificate of Conformity:</span> ${inspection.certificateOfConformity ? `<a href="/uploads/${inspection.certificateOfConformity}" target="_blank">${inspection.certificateOfConformity}</a>` : '-'}<br>
                                <span style="color: var(--text-secondary);">Country of Origin:</span> ${inspection.countryOfOrigin || '-'}<br>
                                <span style="color: var(--text-secondary);">Material Properties:</span> ${inspection.materialProperties ? Object.entries(inspection.materialProperties).map(([k,v]) => `${k}: ${v}`).join(', ') : '-'}<br>
                                <span style="color: var(--text-secondary);">Documents:</span> ${inspection.documents && inspection.documents.length ? inspection.documents.map(doc => `<a href="/uploads/${doc.file}" target="_blank">${doc.name}</a>`).join(', ') : '-'}
                            </div>
                        `).join('');
                } else {
                    document.getElementById('inspections-result').innerHTML = `<span class="error">âœ— No inspections found</span>`;
                }
            } catch (error) {
                document.getElementById('inspections-result').innerHTML = `<span class="error">âœ— Error: ${error.message}</span>`;
            }
        }

        // Check server health on load with a slight delay for animation
        window.onload = () => {
            setTimeout(() => {
            checkHealth();
            }, 600);
        };
    </script>
</body>
</html> 