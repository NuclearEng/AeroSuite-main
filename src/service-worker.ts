/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute, RouteHandler } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');

const handler: RouteHandler = async ({ request, url }) => {
  // If this isn't a navigation, skip.
  if (request.mode !== 'navigate') {
    return undefined;
  }

  // If this is a URL that starts with /_, skip.
  if (url.pathname.startsWith('/_')) {
    return undefined;
  }

  // If this looks like a URL for a resource, because it contains
  // a file extension, skip.
  if (url.pathname.match(fileExtensionRegexp)) {
    return undefined;
  }

  // Return the navigation preload response if available
  const preloadResponse = await request.preloadResponse;
  if (preloadResponse) {
    return preloadResponse;
  }

  // This is a navigation request, so try to serve index.html
  const indexUrl = createHandlerBoundToURL('/index.html');
  const indexResponse = await fetch(indexUrl);
  return indexResponse;
};

registerRoute(handler);

// Set up background sync
const bgSyncPlugin = new BackgroundSyncPlugin('apiQueue', {
  maxRetentionTime: 24 * 60 // Retry for max of 24 Hours (specified in minutes)
});

// Register route for API calls that should be synced
registerRoute(
  /\/api\/.*/,
  async (options) => {
    try {
      const response = await fetch(options.request);
      return response;
    } catch (error) {
      await bgSyncPlugin.fetchDidFail({
        request: options.request.clone(),
        error,
        event: options.event,
        originalRequest: options.request
      });
      throw error;
    }
  },
  'POST'
);