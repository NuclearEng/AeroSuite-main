# React Router Testing Quick Start Guide

This guide provides a quick overview of how to test React components that use React Router hooks in 
the AeroSuite application.

## The Problem

When testing components that use React Router hooks like `useNavigate`, `useParams`, etc., you'll 
encounter errors like:

```bash
Error: useNavigate() may be used only in the context of a <Router> component.
```bash

This happens because React Router hooks need to be used within a Router context.

## The Solution

We've created several testing utilities to make it easy to test components that use React Router 
hooks:

1. __For components that only use React Router hooks__:
   ```jsx
   import { renderWithRouter } from '../../test-utils/router-wrapper';

   // In your test
   renderWithRouter(<YourComponent />, {
     path: '/your-path/:id',
     route: '/your-path/123',
     initialEntries: ['/your-path/123']
   });
   ```

2. __For components that use Material-UI Theme__:
   ```jsx
   import { renderWithTheme } from '../../test-utils/theme-wrapper';

   // In your test
   renderWithTheme(<YourComponent />);
   ```

3. __For components that use both React Router and Material-UI Theme__:
   ```jsx
   import { renderWithRouterAndTheme } from '../../test-utils/combined-wrapper';

   // In your test
   renderWithRouterAndTheme(<YourComponent />, {
     path: '/your-path/:id',
     route: '/your-path/123',
     initialEntries: ['/your-path/123']
   });
   ```

## Automated Fixes

We've created scripts to help automate the process of fixing tests:

```bash
cd client
./scripts/fix-router-tests.sh
```bash

This script will:
1. Scan your test files for React Router hooks
2. Add the appropriate imports
3. Replace `render` calls with the appropriate wrapper function
4. Add a task reference comment

## Example

### Before

```jsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import CustomerDetail from './CustomerDetail';

describe('CustomerDetail', () => {
  it('renders without crashing', () => {
    render(<CustomerDetail />);
    expect(screen.getByText(/customer/i)).toBeInTheDocument();
  });
});
```bash

### After

```jsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import { renderWithRouterAndTheme } from '../../test-utils/combined-wrapper';
import CustomerDetail from './CustomerDetail';

// Task: DEV004 - Fix component tests for React Router
describe('CustomerDetail', () => {
  it('renders without crashing', () => {
    renderWithRouterAndTheme(<CustomerDetail />, {
      path: '/customers/:id',
      route: '/customers/123',
      initialEntries: ['/customers/123']
    });
    expect(screen.getByText(/customer/i)).toBeInTheDocument();
  });
});
```bash

## Router Parameters

When testing components that use route parameters (e.g., from `useParams`), make sure to:

1. Set the `path` prop to include the parameter placeholders (e.g., `/customers/:id`)
2. Set the `route` prop to the actual URL you want to test (e.g., `/customers/123`)
3. Include the route in the `initialEntries` array

## Additional Resources

For more information, see:
- [React Router Testing Documentation](docs/testing/react-router-testing.md)
- [Testing Utilities README](client/src/test-utils/README.md)
- [Test Fixing Scripts README](client/scripts/README-router-test-fixer.md)
