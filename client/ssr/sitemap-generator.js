#!/usr/bin/env node

/**
 * AeroSuite Sitemap Generator
 * Task: TS365 - Server-side rendering implementation
 * 
 * This script generates a sitemap.xml file and robots.txt for better SEO.
 * It also supports generating loadable-stats.json for code splitting.
 */

const fs = require('fs');
const path = require('path');
const { SitemapStream, streamToPromise } = require('sitemap');
const { Readable } = require('stream');
const { execSync } = require('child_process');

// Base URL for the site
const BASE_URL = process.env.SITE_URL || 'https://aerosuite.example.com';
const BUILD_DIR = path.resolve(__dirname, '../build');

// Check if we should generate loadable stats
const generateLoadableStats = process.env.LOADABLE_STATS === 'true';

// Define the routes to include in the sitemap
const routes = [
  // Main pages
  { url: '/', changefreq: 'daily', priority: 1.0 },
  { url: '/dashboard', changefreq: 'daily', priority: 0.9 },
  
  // Supplier pages
  { url: '/suppliers', changefreq: 'daily', priority: 0.8 },
  { url: '/suppliers/add', changefreq: 'monthly', priority: 0.7 },
  { url: '/suppliers/analytics', changefreq: 'weekly', priority: 0.8 },
  { url: '/suppliers/risk-assessment', changefreq: 'weekly', priority: 0.7 },
  
  // Customer pages
  { url: '/customers', changefreq: 'daily', priority: 0.8 },
  { url: '/customers/add', changefreq: 'monthly', priority: 0.7 },
  { url: '/customers/analytics', changefreq: 'weekly', priority: 0.8 },
  
  // Inspection pages
  { url: '/inspections', changefreq: 'daily', priority: 0.8 },
  { url: '/inspections/schedule', changefreq: 'daily', priority: 0.7 },
  { url: '/inspections/dashboard', changefreq: 'daily', priority: 0.8 },
  { url: '/inspections/reports', changefreq: 'weekly', priority: 0.7 },
  
  // Component pages
  { url: '/components', changefreq: 'weekly', priority: 0.7 },
  
  // Report pages
  { url: '/reports', changefreq: 'weekly', priority: 0.7 },
  { url: '/reports/quality', changefreq: 'weekly', priority: 0.7 },
  { url: '/reports/supplier', changefreq: 'weekly', priority: 0.7 },
  { url: '/reports/custom', changefreq: 'weekly', priority: 0.6 },
  
  // Monitoring pages
  { url: '/monitoring', changefreq: 'weekly', priority: 0.6 },
  { url: '/monitoring/performance', changefreq: 'weekly', priority: 0.6 },
  { url: '/monitoring/backups', changefreq: 'weekly', priority: 0.6 },
  
  // AI Analysis pages
  { url: '/ai-analysis', changefreq: 'weekly', priority: 0.6 },
  { url: '/ai-analysis/defect-detection', changefreq: 'weekly', priority: 0.6 },
  { url: '/ai-analysis/predictive', changefreq: 'weekly', priority: 0.6 },
  
  // Settings pages
  { url: '/settings', changefreq: 'monthly', priority: 0.5 },
  { url: '/settings/profile', changefreq: 'monthly', priority: 0.5 },
  { url: '/settings/notifications', changefreq: 'monthly', priority: 0.5 },
  { url: '/settings/appearance', changefreq: 'monthly', priority: 0.5 },
  
  // Feedback pages
  { url: '/feedback', changefreq: 'monthly', priority: 0.5 },
];

/**
 * Generate sitemap.xml and robots.txt files
 */
async function generateSitemap() {
  try {
    console.log('Generating sitemap.xml and robots.txt...');
    
    // Create a sitemap stream
    const stream = new SitemapStream({ hostname: BASE_URL });
    
    // Pipe the routes to the sitemap stream
    const data = await streamToPromise(
      Readable.from(routes).pipe(stream)
    );
    
    // Write the sitemap to the build directory
    fs.writeFileSync(path.join(BUILD_DIR, 'sitemap.xml'), data.toString());
    
    // Create a robots.txt file
    const robotsTxt = `
User-agent: *
Allow: /

# Disallow admin and auth pages
Disallow: /admin/
Disallow: /auth/logout
Disallow: /auth/reset-password

# Sitemap
Sitemap: ${BASE_URL}/sitemap.xml
    `.trim();
    
    fs.writeFileSync(path.join(BUILD_DIR, 'robots.txt'), robotsTxt);
    
    console.log('✅ Sitemap and robots.txt generated successfully!');
  } catch (error) {
    console.error('❌ Error generating sitemap:', error);
    process.exit(1);
  }
}

/**
 * Generate loadable-stats.json for code splitting
 */
function generateLoadableStats() {
  try {
    console.log('Generating loadable-stats.json for code splitting...');
    
    // Check if webpack-stats.json exists (generated by @loadable/webpack-plugin)
    const webpackStatsPath = path.join(BUILD_DIR, 'webpack-stats.json');
    
    if (fs.existsSync(webpackStatsPath)) {
      // If it exists, copy it to loadable-stats.json
      fs.copyFileSync(webpackStatsPath, path.join(BUILD_DIR, 'loadable-stats.json'));
      console.log('✅ loadable-stats.json copied from webpack-stats.json');
    } else {
      // If it doesn't exist, generate a basic one
      console.log('⚠️ webpack-stats.json not found, generating basic loadable-stats.json');
      
      // Get all JS files in the build directory
      const jsFiles = [];
      
      // Find all JS files in the build directory recursively
      function findJsFiles(dir) {
        const files = fs.readdirSync(dir);
        
        for (const file of files) {
          const filePath = path.join(dir, file);
          const stat = fs.statSync(filePath);
          
          if (stat.isDirectory()) {
            findJsFiles(filePath);
          } else if (file.endsWith('.js')) {
            const relativePath = path.relative(BUILD_DIR, filePath);
            jsFiles.push('/' + relativePath.replace(/\\/g, '/'));
          }
        }
      }
      
      findJsFiles(path.join(BUILD_DIR, 'static/js'));
      
      // Create a basic loadable-stats.json
      const loadableStats = {
        assetsByChunkName: {
          main: jsFiles.filter(file => file.includes('main')),
          vendor: jsFiles.filter(file => file.includes('vendor')),
        },
        publicPath: '/',
        namedChunkGroups: {
          main: {
            assets: jsFiles.filter(file => file.includes('main')),
          },
          vendor: {
            assets: jsFiles.filter(file => file.includes('vendor')),
          },
        },
      };
      
      fs.writeFileSync(
        path.join(BUILD_DIR, 'loadable-stats.json'),
        JSON.stringify(loadableStats, null, 2)
      );
      
      console.log('✅ Basic loadable-stats.json generated');
    }
  } catch (error) {
    console.error('❌ Error generating loadable-stats.json:', error);
    // Don't exit, as this is not critical
  }
}

// Run the generators
(async () => {
  // Generate sitemap and robots.txt
  await generateSitemap();
  
  // Generate loadable stats if requested
  if (generateLoadableStats) {
    generateLoadableStats();
  }
  
  console.log('✅ All files generated successfully!');
})(); 