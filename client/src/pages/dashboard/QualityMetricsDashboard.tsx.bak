import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  CardHeader,
  Grid,
  Typography,
  Button,
  CircularProgress,
  Alert,
  Tabs,
  Tab,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  SelectChangeEvent,
  IconButton,
  Tooltip,
  Divider } from
'@mui/material';
import {
  Refresh as RefreshIcon,
  BarChart as BarChartIcon,
  Timeline as TimelineIcon,
  PieChart as PieChartIcon,
  Settings as SettingsIcon,
  Info as InfoIcon,
  Download as DownloadIcon,
  Dashboard as DashboardIcon } from
'@mui/icons-material';
import { ResponsiveContainer, LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, PieChart, Pie, Cell } from 'recharts';
import AddQualityMetricsButton from '../../components/dashboard/AddQualityMetricsButton';

// Mock data for quality metrics
const mockQualityData = {
  defectRateHistory: [
  { month: 'Jan', rate: 2.3 },
  { month: 'Feb', rate: 2.1 },
  { month: 'Mar', rate: 2.5 },
  { month: 'Apr', rate: 1.8 },
  { month: 'May', rate: 1.5 },
  { month: 'Jun', rate: 1.2 }],

  firstTimeYieldHistory: [
  { month: 'Jan', yield: 92.5 },
  { month: 'Feb', yield: 93.1 },
  { month: 'Mar', yield: 92.8 },
  { month: 'Apr', yield: 94.2 },
  { month: 'May', yield: 95.0 },
  { month: 'Jun', yield: 95.8 }],

  inspectionResults: [
  { name: 'Pass', value: 85 },
  { name: 'Fail', value: 8 },
  { name: 'Conditional', value: 7 }],

  defectCategories: [
  { name: 'Dimensional', count: 24 },
  { name: 'Surface', count: 18 },
  { name: 'Material', count: 12 },
  { name: 'Assembly', count: 9 },
  { name: 'Documentation', count: 6 }],

  supplierPerformance: [
  { name: 'Aerospace Components Inc.', score: 95 },
  { name: 'Global Aviation Parts', score: 88 },
  { name: 'Precision Engineering Ltd', score: 92 },
  { name: 'Avionics Solutions', score: 78 },
  { name: 'JetTech Materials', score: 65 }],

  currentMetrics: {
    defectRate: 1.2,
    firstTimeYield: 95.8,
    onTimeDelivery: 97.2,
    supplierQuality: 89.5,
    ncmrCount: 14
  }
};

// Chart colors
const CHART_COLORS = {
  primary: '#1976d2',
  secondary: '#9c27b0',
  success: '#4caf50',
  error: '#f44336',
  warning: '#ff9800',
  info: '#03a9f4',
  grey: '#9e9e9e'
};

// Pie chart colors
const PIE_COLORS = ['#4caf50', '#f44336', '#ff9800', '#2196f3', '#9c27b0'];

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`metrics-tabpanel-${index}`}
      aria-labelledby={`metrics-tab-${index}`}
      {...other}>

      {value === index &&
      <Box sx={{ p: 3 }}>
          {children}
        </Box>
      }
    </div>);

};

const a11yProps = (index: number) => {
  return {
    id: `metrics-tab-${index}`,
    'aria-controls': `metrics-tabpanel-${index}`
  };
};

const QualityMetricsDashboard: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [tabValue, setTabValue] = useState(0);
  const [timeRange, setTimeRange] = useState('6m');
  const [qualityData, setQualityData] = useState(mockQualityData);
  const [autoRefresh, setAutoRefresh] = useState(false);

  // Load quality metrics data
  const loadQualityMetrics = async () => {
    try {
      setLoading(true);
      setError(null);

      // In a real implementation, this would be an API call
      // const response = await api.get('/api/v1/quality-metrics', { params: { timeRange } });
      // setQualityData(response.data);

      // Using mock data for now
      setTimeout(() => {
        setQualityData(mockQualityData);
        setLoading(false);
      }, 800);
    } catch (err: any) {
      console.error("Error:", error);
      setError(err.message || 'Failed to load quality metrics');
      setLoading(false);
    }
  };

  // Load data on component mount and when time range changes
  useEffect(() => {
    loadQualityMetrics();
  }, [timeRange]);

  // Set up auto-refresh if enabled
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null;

    if (autoRefresh) {
      intervalId = setInterval(() => {
        loadQualityMetrics();
      }, 30000); // Refresh every 30 seconds
    }

    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [autoRefresh]);

  // Handle tab change
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // Handle time range change
  const handleTimeRangeChange = (event: SelectChangeEvent) => {
    setTimeRange(event.target.value);
  };

  // Toggle auto refresh
  const toggleAutoRefresh = () => {
    setAutoRefresh(!autoRefresh);
  };

  // Format percentage
  const formatPercent = (value: number) => `${value.toFixed(1)}%`;

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h4" component="h1">
          Quality Metrics Dashboard
        </Typography>
        <Box>
          <AddQualityMetricsButton
            variant="outlined"
            sx={{ mr: 2 }} />

          <FormControl sx={{ minWidth: 120, mr: 2 }}>
            <InputLabel id="time-range-label">Time Range</InputLabel>
            <Select
              labelId="time-range-label"
              id="time-range-select"
              value={timeRange}
              label="Time Range"
              onChange={handleTimeRangeChange}
              size="small">

              <MenuItem value="1m">Last Month</MenuItem>
              <MenuItem value="3m">Last 3 Months</MenuItem>
              <MenuItem value="6m">Last 6 Months</MenuItem>
              <MenuItem value="1y">Last Year</MenuItem>
              <MenuItem value="all">All Time</MenuItem>
            </Select>
          </FormControl>
          <Button
            variant="outlined"
            color={autoRefresh ? "success" : "primary"}
            onClick={toggleAutoRefresh}
            sx={{ mr: 2 }}>

            {autoRefresh ? "Auto-Refresh On" : "Auto-Refresh Off"}
          </Button>
          <Button
            variant="outlined"
            color="primary"
            startIcon={<RefreshIcon />}
            onClick={loadQualityMetrics}
            disabled={loading}>

            Refresh
          </Button>
        </Box>
      </Box>

      {error &&
      <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      }

      
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="subtitle2" color="text.secondary">
                Current Defect Rate
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'baseline', mt: 1 }}>
                <Typography variant="h3" component="div" color={qualityData.currentMetrics.defectRate < 2 ? "success.main" : "error.main"}>
                  {qualityData.currentMetrics.defectRate}%
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
                  Target: &lt;2%
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="subtitle2" color="text.secondary">
                First Time Yield
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'baseline', mt: 1 }}>
                <Typography variant="h3" component="div" color={qualityData.currentMetrics.firstTimeYield > 95 ? "success.main" : "warning.main"}>
                  {qualityData.currentMetrics.firstTimeYield}%
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
                  Target: &gt;95%
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="subtitle2" color="text.secondary">
                On-Time Delivery
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'baseline', mt: 1 }}>
                <Typography variant="h3" component="div" color={qualityData.currentMetrics.onTimeDelivery > 95 ? "success.main" : "warning.main"}>
                  {qualityData.currentMetrics.onTimeDelivery}%
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
                  Target: &gt;95%
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="quality metrics tabs">
            <Tab label="Trend Analysis" icon={<TimelineIcon />} iconPosition="start" {...a11yProps(0)} />
            <Tab label="Defect Analysis" icon={<PieChartIcon />} iconPosition="start" {...a11yProps(1)} />
            <Tab label="Supplier Performance" icon={<BarChartIcon />} iconPosition="start" {...a11yProps(2)} />
          </Tabs>
        </Box>
        
        {loading ?
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 5 }}>
            <CircularProgress />
          </Box> :

        <>
            
            <TabPanel value={tabValue} index={0}>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardHeader
                    title="Defect Rate Trend"
                    action={
                    <Tooltip title="Download Data">
                          <IconButton>
                            <DownloadIcon />
                          </IconButton>
                        </Tooltip>
                    } />

                    <Divider />
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={qualityData.defectRateHistory}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="month" />
                          <YAxis name="Defect Rate (%)" />
                          <RechartsTooltip />
                          <Legend />
                          <Line
                          type="monotone"
                          dataKey="rate"
                          name="Defect Rate (%)"
                          stroke={CHART_COLORS.error}
                          activeDot={{ r: 8 }} />

                        </LineChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                </Grid>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardHeader
                    title="First Time Yield Trend"
                    action={
                    <Tooltip title="Download Data">
                          <IconButton>
                            <DownloadIcon />
                          </IconButton>
                        </Tooltip>
                    } />

                    <Divider />
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={qualityData.firstTimeYieldHistory}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="month" />
                          <YAxis domain={[90, 100]} name="Yield (%)" />
                          <RechartsTooltip />
                          <Legend />
                          <Line
                          type="monotone"
                          dataKey="yield"
                          name="First Time Yield (%)"
                          stroke={CHART_COLORS.success}
                          activeDot={{ r: 8 }} />

                        </LineChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </TabPanel>

            
            <TabPanel value={tabValue} index={1}>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardHeader title="Inspection Results" />
                    <Divider />
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                          <Pie
                          data={qualityData.inspectionResults}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                          outerRadius={100}
                          fill="#8884d8"
                          dataKey="value">

                            {qualityData.inspectionResults.map((entry, index) =>
                          <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />
                          )}
                          </Pie>
                          <RechartsTooltip formatter={(value) => `${value} inspections`} />
                          <Legend />
                        </PieChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                </Grid>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardHeader title="Top Defect Categories" />
                    <Divider />
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={qualityData.defectCategories}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" />
                          <YAxis />
                          <RechartsTooltip />
                          <Legend />
                          <Bar dataKey="count" name="Number of Defects" fill={CHART_COLORS.warning} />
                        </BarChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </TabPanel>

            
            <TabPanel value={tabValue} index={2}>
              <Card variant="outlined">
                <CardHeader title="Supplier Quality Performance" />
                <Divider />
                <CardContent>
                  <ResponsiveContainer width="100%" height={400}>
                    <BarChart
                    data={qualityData.supplierPerformance}
                    layout="vertical"
                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>

                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" domain={[0, 100]} />
                      <YAxis dataKey="name" type="category" width={150} />
                      <RechartsTooltip formatter={(value) => `${value}%`} />
                      <Legend />
                      <Bar
                      dataKey="score"
                      name="Quality Score"
                      fill={CHART_COLORS.primary}
                      label={{ position: 'right', formatter: formatPercent }} />

                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </TabPanel>
          </>
        }
      </Card>
    </Box>);

};

export default QualityMetricsDashboard;