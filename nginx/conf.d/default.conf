# AeroSuite Advanced Load Balancing Configuration
# Implements RF041 - Configure advanced load balancing strategies

# Define connection upgrade for WebSockets
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Define variables for A/B testing
split_clients "${remote_addr}${http_user_agent}" $variant {
    20%     "A";
    20%     "B";
    *       "";
}

# Define geo-based routing
geo $remote_addr $geo_region {
    default         "global";
    10.0.0.0/8      "internal";
    192.168.0.0/16  "internal";
    172.16.0.0/12   "internal";
}

server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Redirect all HTTP requests to HTTPS with 301 (permanent) redirect
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    
    # SSL certificates
    # ssl_certificate /etc/nginx/ssl/aerosuite.crt;
    # ssl_certificate_key /etc/nginx/ssl/aerosuite.key;
    
    # For development without SSL
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https:; frame-src 'self'; object-src 'none'; media-src 'self'" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()";
    
    # Optional: Enable OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Cache SSL sessions
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 24h;
    
    # Global connection limits
    limit_conn conn_limit 10;
    
    # API routing with advanced load balancing
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Special rate limit for auth endpoints
        location /api/auth/ {
            limit_req zone=login_limit burst=5 nodelay;
            proxy_pass http://api_servers;
        }
        
        # High-traffic endpoints use weighted round-robin
        location ~ ^/api/(customers|suppliers|inspections)/list {
            proxy_pass http://api_high_traffic;
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # Read-only endpoints use least time strategy
        location ~ ^/api/.*/view {
            proxy_pass http://api_read_only;
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # Standard headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        
        # Pass to backend with sticky session support
        proxy_pass http://api_servers;
    }
    
    # Monitoring endpoints
    location /monitoring/ {
        # Only allow internal access
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        allow 10.0.0.0/8;
        deny all;
        
        # Remove /monitoring prefix
        rewrite ^/monitoring/(.*) /$1 break;
        
        # Pass to backend monitoring
        proxy_pass http://api_servers/api/monitoring/;
    }
    
    # Frontend routing with load balancing
    location / {
        # Apply connection limits
        limit_conn conn_limit 5;
        
        # A/B testing based on variant
        if ($variant = "A") {
            add_header X-Variant "A";
            proxy_pass http://frontend_servers;
        }
        if ($variant = "B") {
            add_header X-Variant "B";
            proxy_pass http://frontend_servers;
        }
        
        # Standard headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Cache static content
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            limit_req zone=static_limit burst=50 nodelay;
            proxy_pass http://frontend_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;
            expires 1d;
            add_header Cache-Control "public, max-age=86400, must-revalidate";
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # Cache fonts for longer
        location ~* \.(woff|woff2|ttf|otf|eot)$ {
            proxy_pass http://frontend_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 7d;
            proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            expires 7d;
            add_header Cache-Control "public, max-age=604800";
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # Pass to frontend with least connections strategy
        proxy_pass http://frontend_servers;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","timestamp":$time_iso8601}';
    }
    
    # Advanced health check for load balancers
    location /lb-health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","timestamp":$time_iso8601,"server":"$hostname","client":"$remote_addr"}';
    }
    
    # Error handling
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# For development, add a self-signed certificate generation command
# Run this once before starting:
# mkdir -p /etc/nginx/ssl && openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx-selfsigned.key -out /etc/nginx/ssl/nginx-selfsigned.crt -subj "/CN=localhost" 