services:
  # MongoDB Database
  mongo:
    image: mongo:latest
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    restart: always
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    environment:
      - MONGO_INITDB_DATABASE=aerosuite
    networks:
      - aerosuite-network

  # Redis for caching and messaging
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - aerosuite-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    depends_on:
      - aerosuite-server
    networks:
      - aerosuite-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    restart: always
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - aerosuite-network

  # Backend API Server
  aerosuite-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongo:27017/aerosuite
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - EMAIL_SERVICE=smtp
      - EMAIL_USER=${EMAIL_USER:-test@example.com}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - CLIENT_URL=http://localhost:3000
      - WORKER_COUNT=1
      - NODE_OPTIONS=--max-old-space-size=2048
    ports:
      - "9999:5000"
    restart: always
    depends_on:
      - mongo
      - redis
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aerosuite-network

  # Frontend Client
  aerosuite-client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    restart: always
    depends_on:
      - aerosuite-server
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - aerosuite-network

networks:
  aerosuite-network:
    driver: bridge

volumes:
  mongo-data:
  prometheus-data:
  grafana-data: 