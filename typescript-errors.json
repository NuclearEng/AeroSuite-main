{
  "summary": {
    "total": 8,
    "byType": {
      "cannotBeUsedAsJSX": 2,
      "argumentNotAssignable": 1,
      "cannotFindName": 2,
      "noDeclarationFile": 1,
      "implicitAny": 1,
      "typeIsNotFunction": 1
    },
    "byFile": {
      "src/App.tsx": 2,
      "src/components/auth/TwoFactorSetup.tsx": 1,
      "src/components/common/ThemeSettings.tsx": 1,
      "src/components/common/FeedbackForm.tsx": 1,
      "src/components/common/SearchModal.tsx": 1,
      "src/components/dashboard/DashboardCustomizer.tsx": 1,
      "src/utils/auth.ts": 1
    },
    "autoFixable": 7
  },
  "errors": [
    {
      "file": "src/App.tsx",
      "line": 26,
      "column": 12,
      "code": "TS2786",
      "message": "'HelmetProvider' cannot be used as a JSX component.",
      "type": "cannotBeUsedAsJSX",
      "context": [
        "    24 |       <ThemeProvider>",
        "    25 |         <LocalizationProvider dateAdapter={AdapterDateFns}>",
        "    27 |             <SnackbarProvider ",
        "    28 |               maxSnack={5} ",
        "    29 |               anchorOrigin={{ "
      ],
      "suggestedFix": {
        "type": "jsxComponent",
        "description": "Add proper type definitions or fix component implementation",
        "autoFixable": true
      }
    },
    {
      "file": "src/App.tsx",
      "line": 27,
      "column": 14,
      "code": "TS2786",
      "message": "'SnackbarProvider' cannot be used as a JSX component.",
      "type": "cannotBeUsedAsJSX",
      "context": [
        "    25 |         <LocalizationProvider dateAdapter={AdapterDateFns}>",
        "    26 |           <HelmetProvider>",
        "    28 |               maxSnack={5} ",
        "    29 |               anchorOrigin={{ ",
        "    30 |                 vertical: 'top', "
      ],
      "suggestedFix": {
        "type": "jsxComponent",
        "description": "Add proper type definitions or fix component implementation",
        "autoFixable": true
      }
    },
    {
      "file": "src/components/auth/TwoFactorSetup.tsx",
      "line": 73,
      "column": 19,
      "code": "TS2345",
      "message": "Argument of type 'string | undefined' is not assignable to parameter of type 'SetStateAction<string | null>'.",
      "type": "argumentNotAssignable",
      "context": [
        "    71 |       ",
        "    72 |       if (method === 'app') {",
        "    74 |         setSecret(response.secret);",
        "    75 |       }",
        "    76 |       "
      ],
      "suggestedFix": {
        "type": "typeIncompatibility",
        "description": "Fix type mismatch or add type assertion",
        "autoFixable": true
      }
    },
    {
      "file": "src/components/common/FeedbackForm.tsx",
      "line": 147,
      "column": 51,
      "code": "TS2304",
      "message": "Cannot find name 'err'.",
      "type": "cannotFindName",
      "context": [
        "    145 |       if (onSuccess) onSuccess();",
        "    146 |     } catch (_err) {",
        "    148 |       setError(t('feedback.errors.submissionFailed'));",
        "    149 |     } finally {",
        "    150 |       setLoading(false);"
      ],
      "suggestedFix": {
        "type": "undefinedVariable",
        "variable": "err",
        "description": "Import or define 'err'",
        "autoFixable": true
      }
    },
    {
      "file": "src/components/common/SearchModal.tsx",
      "line": 35,
      "column": 26,
      "code": "TS7016",
      "message": "Could not find a declaration file for module 'lodash'. '/Users/tannercoker/AeroSuite-main/node_modules/lodash/lodash.js' implicitly has an 'any' type.",
      "type": "noDeclarationFile",
      "context": [
        "    33 |   FilterList as FilterIcon,",
        "    34 | } from '@mui/icons-material';",
        "    36 |",
        "    37 | interface SearchResult {",
        "    38 |   id: string;"
      ],
      "suggestedFix": {
        "type": "missingTypes",
        "module": "lodash'. '/Users/tannercoker/AeroSuite-main/node_modules/lodash/lodash.js' implicitly has an 'any",
        "description": "Install @types/lodash'. '/Users/tannercoker/AeroSuite-main/node_modules/lodash/lodash.js' implicitly has an 'any or create declaration file",
        "autoFixable": true
      }
    },
    {
      "file": "src/components/common/ThemeSettings.tsx",
      "line": 174,
      "column": 14,
      "code": "TS2304",
      "message": "Cannot find name 'ColorLens'.",
      "type": "cannotFindName",
      "context": [
        "    172 |         >",
        "    173 |           <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>",
        "    175 |             <Box>",
        "    176 |               <Typography variant=\"subtitle1\" fontWeight=\"medium\">Theme Colors</Typography>",
        "    177 |               <Typography variant=\"body2\" color=\"text.secondary\">"
      ],
      "suggestedFix": {
        "type": "undefinedVariable",
        "variable": "ColorLens",
        "description": "Import or define 'ColorLens'",
        "autoFixable": true
      }
    },
    {
      "file": "src/components/dashboard/DashboardCustomizer.tsx",
      "line": 269,
      "column": 15,
      "code": "TS7006",
      "message": "Parameter 'provided' implicitly has an 'any' type.",
      "type": "implicitAny",
      "context": [
        "    267 |         <DragDropContext onDragEnd={handleDragEnd}>",
        "    268 |           <Droppable droppableId=\"widgets-list\">",
        "    270 |               <List ",
        "    271 |                 {...provided.droppableProps}",
        "    272 |                 ref={provided.innerRef}"
      ],
      "suggestedFix": {
        "type": "implicitAny",
        "parameter": "provided",
        "description": "Add explicit type annotation for parameter 'provided'",
        "autoFixable": true
      }
    },
    {
      "file": "src/utils/auth.ts",
      "line": 134,
      "column": 12,
      "code": "TS18046",
      "message": "'response' is of type 'unknown'.",
      "type": "typeIsNotFunction",
      "context": [
        "    132 |   try {",
        "    133 |     const response = await api.get('/v2/auth/sessions');",
        "    135 |   } catch (_error) {",
        "    136 |     console.error('Error fetching user sessions:', _error);",
        "    137 |     return [];"
      ],
      "suggestedFix": {
        "type": "manual",
        "description": "Manual fix required",
        "autoFixable": false
      }
    }
  ]
}